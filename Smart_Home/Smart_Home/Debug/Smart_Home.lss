
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001090  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00001090  00001124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000ae  008000ae  00001172  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a26  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af4  00000000  00000000  00002dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001255  00000000  00000000  000038c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00004b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000747  00000000  00000000  00004ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096c  00000000  00000000  0000562b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005f97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_2>
       c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 01 	call	0x276	; 0x276 <main>
      8a:	0c 94 46 08 	jmp	0x108c	; 0x108c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:


void app_init(void)
{	

	DIO_init(PORT_D,PIN3,IN); /*Makes PIN3 in PORT D input pin for interrupt_1*/
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	63 e0       	ldi	r22, 0x03	; 3
      96:	84 e4       	ldi	r24, 0x44	; 68
      98:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_init>
	DIO_init(PORT_B,PIN2,IN); /*Makes PIN2 in PORT B input pin for interrup_2t*/
      9c:	40 e0       	ldi	r20, 0x00	; 0
      9e:	62 e0       	ldi	r22, 0x02	; 2
      a0:	82 e4       	ldi	r24, 0x42	; 66
      a2:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_init>
	
	LCD_4_bit_init();
      a6:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_4_bit_init>
	KEYPAD_init();
      aa:	0e 94 b1 02 	call	0x562	; 0x562 <KEYPAD_init>
	Spi_Master_init();
      ae:	0e 94 3f 04 	call	0x87e	; 0x87e <Spi_Master_init>
	ISR_State = ISR_Not_Called;
      b2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <ISR_State>

	/*Enable the interrupts*/
	sei();
      b6:	8f b7       	in	r24, 0x3f	; 63
      b8:	80 68       	ori	r24, 0x80	; 128
      ba:	8f bf       	out	0x3f, r24	; 63
	/*Interrupt 1*/
	SET_BIT(MCUCR,PIN2);
      bc:	85 b7       	in	r24, 0x35	; 53
      be:	84 60       	ori	r24, 0x04	; 4
      c0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,PIN3);
      c2:	85 b7       	in	r24, 0x35	; 53
      c4:	88 60       	ori	r24, 0x08	; 8
      c6:	85 bf       	out	0x35, r24	; 53
	/*Interrupt 2*/
	SET_BIT(MCUCSR,PIN6);
      c8:	84 b7       	in	r24, 0x34	; 52
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	84 bf       	out	0x34, r24	; 52
	/*Interrupt 1 and Interrupt 2*/
	GICR  |= (1<<PIN5) | (1<<PIN7);
      ce:	8b b7       	in	r24, 0x3b	; 59
      d0:	80 6a       	ori	r24, 0xA0	; 160
      d2:	8b bf       	out	0x3b, r24	; 59
      d4:	08 95       	ret

000000d6 <app_start>:

}

void app_start(void)
{	
	if(ISR_State == ISR_Not_Called)
      d6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <ISR_State>
      da:	81 11       	cpse	r24, r1
      dc:	09 c0       	rjmp	.+18     	; 0xf0 <app_start+0x1a>
	{
		Spi_Master_send(Get_Temp);
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	0e 94 5f 04 	call	0x8be	; 0x8be <Spi_Master_send>
		TIMER0_delay(5000,no_prescale);
      e4:	61 e0       	ldi	r22, 0x01	; 1
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	88 e8       	ldi	r24, 0x88	; 136
      ea:	93 e1       	ldi	r25, 0x13	; 19
      ec:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
      f0:	08 95       	ret

000000f2 <password_check>:
	}
	
}

void password_check(void)
{
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
	
	LCD_4_bit_sendString(welcome_string);
      f6:	85 ea       	ldi	r24, 0xA5	; 165
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 2c 04 	call	0x858	; 0x858 <LCD_4_bit_sendString>
	TIMER0_delay(1000,no_prescale);
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	88 ee       	ldi	r24, 0xE8	; 232
     104:	93 e0       	ldi	r25, 0x03	; 3
     106:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	LCD_4_bit_sendCommand(0x01);
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendString(enter_pass_string);
     110:	86 e9       	ldi	r24, 0x96	; 150
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 2c 04 	call	0x858	; 0x858 <LCD_4_bit_sendString>
	TIMER0_delay(1000,no_prescale);
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	88 ee       	ldi	r24, 0xE8	; 232
     11e:	93 e0       	ldi	r25, 0x03	; 3
     120:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	LCD_4_bit_sendCommand(0x01);
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	
	while(password_correct == 0)
     12a:	9d c0       	rjmp	.+314    	; 0x266 <password_check+0x174>
	{
		KEYPAD_start();
     12c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <KEYPAD_start>
		if(x == 'c')
     130:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <x>
     134:	83 36       	cpi	r24, 0x63	; 99
     136:	09 f0       	breq	.+2      	; 0x13a <password_check+0x48>
     138:	96 c0       	rjmp	.+300    	; 0x266 <password_check+0x174>
		{
			string_counter = 0;
     13a:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <string_counter>
			if(new_pass == 1)
     13e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <new_pass>
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	29 f5       	brne	.+74     	; 0x190 <password_check+0x9e>
			{
			   EEPROM_write(0,pass_string[0]);
     146:	c6 eb       	ldi	r28, 0xB6	; 182
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	68 81       	ld	r22, Y
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 9e 02 	call	0x53c	; 0x53c <EEPROM_write>
			   EEPROM_write(1,pass_string[1]);
     154:	69 81       	ldd	r22, Y+1	; 0x01
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 9e 02 	call	0x53c	; 0x53c <EEPROM_write>
			   EEPROM_write(2,pass_string[2]);
     15e:	6a 81       	ldd	r22, Y+2	; 0x02
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 9e 02 	call	0x53c	; 0x53c <EEPROM_write>
			   EEPROM_write(3,pass_string[3]);
     168:	6b 81       	ldd	r22, Y+3	; 0x03
     16a:	83 e0       	ldi	r24, 0x03	; 3
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 9e 02 	call	0x53c	; 0x53c <EEPROM_write>
			   LCD_4_bit_sendString(success_string);
     172:	80 e6       	ldi	r24, 0x60	; 96
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 2c 04 	call	0x858	; 0x858 <LCD_4_bit_sendString>
			   TIMER0_delay(2000,no_prescale);
     17a:	61 e0       	ldi	r22, 0x01	; 1
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 ed       	ldi	r24, 0xD0	; 208
     180:	97 e0       	ldi	r25, 0x07	; 7
     182:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
			   LCD_4_bit_sendCommand(0x01);
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
			   new_pass = 0;				
     18c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <new_pass>
			}
			
			 first_number = EEPROM_read(0);
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 a9 02 	call	0x552	; 0x552 <EEPROM_read>
     198:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <first_number>
			 second_number = EEPROM_read(1);
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 a9 02 	call	0x552	; 0x552 <EEPROM_read>
     1a4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <second_number>
			 third_number = EEPROM_read(2);
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 a9 02 	call	0x552	; 0x552 <EEPROM_read>
     1b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <third_number>
			 fourth_number = EEPROM_read(3);
     1b4:	83 e0       	ldi	r24, 0x03	; 3
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 a9 02 	call	0x552	; 0x552 <EEPROM_read>
     1bc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <fourth_number>
			 
			if(pass_string[0] == first_number && pass_string[1] == second_number && pass_string[2] == third_number && pass_string[3] == fourth_number)
     1c0:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pass_string>
     1c4:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <first_number>
     1c8:	92 13       	cpse	r25, r18
     1ca:	21 c0       	rjmp	.+66     	; 0x20e <password_check+0x11c>
     1cc:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <pass_string+0x1>
     1d0:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <second_number>
     1d4:	32 13       	cpse	r19, r18
     1d6:	1b c0       	rjmp	.+54     	; 0x20e <password_check+0x11c>
     1d8:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <pass_string+0x2>
     1dc:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <third_number>
     1e0:	32 13       	cpse	r19, r18
     1e2:	15 c0       	rjmp	.+42     	; 0x20e <password_check+0x11c>
     1e4:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <pass_string+0x3>
     1e8:	82 13       	cpse	r24, r18
     1ea:	11 c0       	rjmp	.+34     	; 0x20e <password_check+0x11c>
			{
				LCD_4_bit_sendString(access_string);
     1ec:	87 e8       	ldi	r24, 0x87	; 135
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 2c 04 	call	0x858	; 0x858 <LCD_4_bit_sendString>
				TIMER0_delay(2000,no_prescale);
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	80 ed       	ldi	r24, 0xD0	; 208
     1fa:	97 e0       	ldi	r25, 0x07	; 7
     1fc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
				LCD_4_bit_sendCommand(0x01);
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
				password_correct = 1;	
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <password_correct>
     20c:	2c c0       	rjmp	.+88     	; 0x266 <password_check+0x174>
			}
			else if(pass_string[0] == '0' && pass_string[1] == '0' && pass_string[2] == '0' && pass_string[3] == '0')
     20e:	90 33       	cpi	r25, 0x30	; 48
     210:	e9 f4       	brne	.+58     	; 0x24c <password_check+0x15a>
     212:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <pass_string+0x1>
     216:	80 33       	cpi	r24, 0x30	; 48
     218:	c9 f4       	brne	.+50     	; 0x24c <password_check+0x15a>
     21a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <pass_string+0x2>
     21e:	80 33       	cpi	r24, 0x30	; 48
     220:	a9 f4       	brne	.+42     	; 0x24c <password_check+0x15a>
     222:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <pass_string+0x3>
     226:	80 33       	cpi	r24, 0x30	; 48
     228:	89 f4       	brne	.+34     	; 0x24c <password_check+0x15a>
			{
				LCD_4_bit_sendString(reset_string);
     22a:	88 e7       	ldi	r24, 0x78	; 120
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 2c 04 	call	0x858	; 0x858 <LCD_4_bit_sendString>
				new_pass = 1;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <new_pass>
				TIMER0_delay(5000,no_prescale);
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	88 e8       	ldi	r24, 0x88	; 136
     23e:	93 e1       	ldi	r25, 0x13	; 19
     240:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
				LCD_4_bit_sendCommand(0x01);
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
     24a:	0d c0       	rjmp	.+26     	; 0x266 <password_check+0x174>
			}
			else
			{
				LCD_4_bit_sendString(wrong_string);
     24c:	8d e6       	ldi	r24, 0x6D	; 109
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 2c 04 	call	0x858	; 0x858 <LCD_4_bit_sendString>
				TIMER0_delay(2000,no_prescale);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 ed       	ldi	r24, 0xD0	; 208
     25a:	97 e0       	ldi	r25, 0x07	; 7
     25c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
				LCD_4_bit_sendCommand(0x01);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x01);
	LCD_4_bit_sendString(enter_pass_string);
	TIMER0_delay(1000,no_prescale);
	LCD_4_bit_sendCommand(0x01);
	
	while(password_correct == 0)
     266:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <password_correct>
     26a:	88 23       	and	r24, r24
     26c:	09 f4       	brne	.+2      	; 0x270 <password_check+0x17e>
     26e:	5e cf       	rjmp	.-324    	; 0x12c <password_check+0x3a>
				LCD_4_bit_sendCommand(0x01);
			}
			
		}
	}	
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <main>:

#include "Apllication/app.h"

int main(void)
{
	app_init();
     276:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	
	password_check();
     27a:	0e 94 79 00 	call	0xf2	; 0xf2 <password_check>
	if(password_correct)
     27e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <password_correct>
     282:	88 23       	and	r24, r24
     284:	f1 f0       	breq	.+60     	; 0x2c2 <main+0x4c>
	{
		Spi_Master_send(Open_Door);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 5f 04 	call	0x8be	; 0x8be <Spi_Master_send>
		TIMER0_delay(2000,no_prescale);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 ed       	ldi	r24, 0xD0	; 208
     292:	97 e0       	ldi	r25, 0x07	; 7
     294:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
		Spi_Master_send(Open_Temp_LCD);
     298:	84 e0       	ldi	r24, 0x04	; 4
     29a:	0e 94 5f 04 	call	0x8be	; 0x8be <Spi_Master_send>
		TIMER0_delay(2000,no_prescale);
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	80 ed       	ldi	r24, 0xD0	; 208
     2a4:	97 e0       	ldi	r25, 0x07	; 7
     2a6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
		Spi_Master_send(Turn_On);
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	0e 94 5f 04 	call	0x8be	; 0x8be <Spi_Master_send>
		TIMER0_delay(2000,no_prescale);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	80 ed       	ldi	r24, 0xD0	; 208
     2b6:	97 e0       	ldi	r25, 0x07	; 7
     2b8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
		while(1)
		{
			app_start();
     2bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <app_start>
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <main+0x46>
		}		
	}
}
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	08 95       	ret

000002c8 <__vector_2>:
ISR(EXT_INT_1)
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	4f 93       	push	r20
     2d8:	5f 93       	push	r21
     2da:	6f 93       	push	r22
     2dc:	7f 93       	push	r23
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	af 93       	push	r26
     2e4:	bf 93       	push	r27
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
	Spi_Master_send(Close_Door);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 5f 04 	call	0x8be	; 0x8be <Spi_Master_send>

}
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	bf 91       	pop	r27
     2f6:	af 91       	pop	r26
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	7f 91       	pop	r23
     2fe:	6f 91       	pop	r22
     300:	5f 91       	pop	r21
     302:	4f 91       	pop	r20
     304:	3f 91       	pop	r19
     306:	2f 91       	pop	r18
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_3>:
ISR(EXT_INT_2)
{
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	ef 93       	push	r30
     332:	ff 93       	push	r31
	Spi_Master_send(Turn_Off);
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	0e 94 5f 04 	call	0x8be	; 0x8be <Spi_Master_send>
}
     33a:	ff 91       	pop	r31
     33c:	ef 91       	pop	r30
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <DIO_init>:

// global variables
// functions definitions
void DIO_init(uint8_t port_number, uint8_t pin_number, uint8_t direction)
{
	switch(port_number)
     35c:	82 34       	cpi	r24, 0x42	; 66
     35e:	29 f1       	breq	.+74     	; 0x3aa <DIO_init+0x4e>
     360:	18 f4       	brcc	.+6      	; 0x368 <DIO_init+0xc>
     362:	81 34       	cpi	r24, 0x41	; 65
     364:	39 f0       	breq	.+14     	; 0x374 <DIO_init+0x18>
     366:	08 95       	ret
     368:	83 34       	cpi	r24, 0x43	; 67
     36a:	d1 f1       	breq	.+116    	; 0x3e0 <DIO_init+0x84>
     36c:	84 34       	cpi	r24, 0x44	; 68
     36e:	09 f4       	brne	.+2      	; 0x372 <DIO_init+0x16>
     370:	52 c0       	rjmp	.+164    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     372:	08 95       	ret
	{
		case PORT_A:
		if(direction == OUT)
     374:	41 30       	cpi	r20, 0x01	; 1
     376:	59 f4       	brne	.+22     	; 0x38e <DIO_init+0x32>
		{
			//DDRA |= (1<<pin_number); //output
			SET_BIT(DDRA, pin_number);
     378:	2a b3       	in	r18, 0x1a	; 26
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_init+0x28>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	6a 95       	dec	r22
     386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_init+0x24>
     388:	82 2b       	or	r24, r18
     38a:	8a bb       	out	0x1a, r24	; 26
     38c:	08 95       	ret
			
		}
		else if(direction == IN)
     38e:	41 11       	cpse	r20, r1
     390:	5c c0       	rjmp	.+184    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			//DDRA &= ~(1<<pin_number); // input
			ClEAR_BIT(DDRA, pin_number);
     392:	2a b3       	in	r18, 0x1a	; 26
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_init+0x42>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_init+0x3e>
     3a2:	80 95       	com	r24
     3a4:	82 23       	and	r24, r18
     3a6:	8a bb       	out	0x1a, r24	; 26
     3a8:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_B:
		if(direction == OUT)
     3aa:	41 30       	cpi	r20, 0x01	; 1
     3ac:	59 f4       	brne	.+22     	; 0x3c4 <DIO_init+0x68>
		{
			//DDRB |= (1<<pin_number);
			SET_BIT(DDRB, pin_number);
     3ae:	27 b3       	in	r18, 0x17	; 23
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_init+0x5e>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	6a 95       	dec	r22
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_init+0x5a>
     3be:	82 2b       	or	r24, r18
     3c0:	87 bb       	out	0x17, r24	; 23
     3c2:	08 95       	ret
		}
		else if(direction == IN)
     3c4:	41 11       	cpse	r20, r1
     3c6:	41 c0       	rjmp	.+130    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			//DDRB &= ~(1<<pin_number);
			ClEAR_BIT(DDRB, pin_number);
     3c8:	27 b3       	in	r18, 0x17	; 23
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_init+0x78>
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	6a 95       	dec	r22
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_init+0x74>
     3d8:	80 95       	com	r24
     3da:	82 23       	and	r24, r18
     3dc:	87 bb       	out	0x17, r24	; 23
     3de:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_C:
		if(direction == OUT)
     3e0:	41 30       	cpi	r20, 0x01	; 1
     3e2:	59 f4       	brne	.+22     	; 0x3fa <DIO_init+0x9e>
		{
			//DDRC |= (1<<pin_number);
			SET_BIT(DDRC, pin_number);
     3e4:	24 b3       	in	r18, 0x14	; 20
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_init+0x94>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	6a 95       	dec	r22
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_init+0x90>
     3f4:	82 2b       	or	r24, r18
     3f6:	84 bb       	out	0x14, r24	; 20
     3f8:	08 95       	ret
		}
		else if(direction == IN)
     3fa:	41 11       	cpse	r20, r1
     3fc:	26 c0       	rjmp	.+76     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			//DDRC &= ~(1<<pin_number);
			ClEAR_BIT(DDRC, pin_number);
     3fe:	24 b3       	in	r18, 0x14	; 20
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	6a 95       	dec	r22
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     40e:	80 95       	com	r24
     410:	82 23       	and	r24, r18
     412:	84 bb       	out	0x14, r24	; 20
     414:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_D:
		if(direction == OUT)
     416:	41 30       	cpi	r20, 0x01	; 1
     418:	59 f4       	brne	.+22     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		{
			//DDRD |= (1<<pin_number);
			SET_BIT(DDRD, pin_number);
     41a:	21 b3       	in	r18, 0x11	; 17
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	6a 95       	dec	r22
     428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     42a:	82 2b       	or	r24, r18
     42c:	81 bb       	out	0x11, r24	; 17
     42e:	08 95       	ret
		}
		else if(direction == IN)
     430:	41 11       	cpse	r20, r1
     432:	0b c0       	rjmp	.+22     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			//DDRD &= ~(1<<pin_number);
			ClEAR_BIT(DDRD, pin_number);
     434:	21 b3       	in	r18, 0x11	; 17
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	6a 95       	dec	r22
     442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     444:	80 95       	com	r24
     446:	82 23       	and	r24, r18
     448:	81 bb       	out	0x11, r24	; 17
     44a:	08 95       	ret

0000044c <DIO_write>:
	}
}

void DIO_write(uint8_t port_number, uint8_t pin_number, uint8_t value)
{
		switch(port_number)
     44c:	82 34       	cpi	r24, 0x42	; 66
     44e:	29 f1       	breq	.+74     	; 0x49a <DIO_write+0x4e>
     450:	18 f4       	brcc	.+6      	; 0x458 <DIO_write+0xc>
     452:	81 34       	cpi	r24, 0x41	; 65
     454:	39 f0       	breq	.+14     	; 0x464 <DIO_write+0x18>
     456:	08 95       	ret
     458:	83 34       	cpi	r24, 0x43	; 67
     45a:	d1 f1       	breq	.+116    	; 0x4d0 <DIO_write+0x84>
     45c:	84 34       	cpi	r24, 0x44	; 68
     45e:	09 f4       	brne	.+2      	; 0x462 <DIO_write+0x16>
     460:	52 c0       	rjmp	.+164    	; 0x506 <DIO_write+0xba>
     462:	08 95       	ret
		{
			case PORT_A:
			if(value == HIGH)
     464:	41 30       	cpi	r20, 0x01	; 1
     466:	59 f4       	brne	.+22     	; 0x47e <DIO_write+0x32>
			{
				//PORTA |= (1<<pin_number); //write 1
				SET_BIT(PORTA, pin_number);
     468:	2b b3       	in	r18, 0x1b	; 27
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_write+0x28>
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	6a 95       	dec	r22
     476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_write+0x24>
     478:	82 2b       	or	r24, r18
     47a:	8b bb       	out	0x1b, r24	; 27
     47c:	08 95       	ret
			}
			else if(value == LOW)
     47e:	41 11       	cpse	r20, r1
     480:	5c c0       	rjmp	.+184    	; 0x53a <DIO_write+0xee>
			{
				//PORTA &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTA, pin_number);
     482:	2b b3       	in	r18, 0x1b	; 27
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_write+0x42>
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	6a 95       	dec	r22
     490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_write+0x3e>
     492:	80 95       	com	r24
     494:	82 23       	and	r24, r18
     496:	8b bb       	out	0x1b, r24	; 27
     498:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_B:
			if(value == HIGH)
     49a:	41 30       	cpi	r20, 0x01	; 1
     49c:	59 f4       	brne	.+22     	; 0x4b4 <DIO_write+0x68>
			{
				//PORTB |= (1<<pin_number); //write 1
				SET_BIT(PORTB, pin_number);
     49e:	28 b3       	in	r18, 0x18	; 24
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_write+0x5e>
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	6a 95       	dec	r22
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_write+0x5a>
     4ae:	82 2b       	or	r24, r18
     4b0:	88 bb       	out	0x18, r24	; 24
     4b2:	08 95       	ret
			}
			else if(value == LOW)
     4b4:	41 11       	cpse	r20, r1
     4b6:	41 c0       	rjmp	.+130    	; 0x53a <DIO_write+0xee>
			{
				//PORTB &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTB, pin_number);
     4b8:	28 b3       	in	r18, 0x18	; 24
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_write+0x78>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	6a 95       	dec	r22
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_write+0x74>
     4c8:	80 95       	com	r24
     4ca:	82 23       	and	r24, r18
     4cc:	88 bb       	out	0x18, r24	; 24
     4ce:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_C:
			if(value == HIGH)
     4d0:	41 30       	cpi	r20, 0x01	; 1
     4d2:	59 f4       	brne	.+22     	; 0x4ea <DIO_write+0x9e>
			{
				//PORTC |= (1<<pin_number); //write 1
				SET_BIT(PORTC, pin_number);
     4d4:	25 b3       	in	r18, 0x15	; 21
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_write+0x94>
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	6a 95       	dec	r22
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_write+0x90>
     4e4:	82 2b       	or	r24, r18
     4e6:	85 bb       	out	0x15, r24	; 21
     4e8:	08 95       	ret
			}
			else if(value == LOW)
     4ea:	41 11       	cpse	r20, r1
     4ec:	26 c0       	rjmp	.+76     	; 0x53a <DIO_write+0xee>
			{
				//PORTC &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTC, pin_number);
     4ee:	25 b3       	in	r18, 0x15	; 21
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_write+0xae>
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	6a 95       	dec	r22
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_write+0xaa>
     4fe:	80 95       	com	r24
     500:	82 23       	and	r24, r18
     502:	85 bb       	out	0x15, r24	; 21
     504:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_D:
			if(value == HIGH)
     506:	41 30       	cpi	r20, 0x01	; 1
     508:	59 f4       	brne	.+22     	; 0x520 <DIO_write+0xd4>
			{
				//PORTD |= (1<<pin_number); //write 1
				SET_BIT(PORTD, pin_number);
     50a:	22 b3       	in	r18, 0x12	; 18
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_write+0xca>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	6a 95       	dec	r22
     518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_write+0xc6>
     51a:	82 2b       	or	r24, r18
     51c:	82 bb       	out	0x12, r24	; 18
     51e:	08 95       	ret
			}
			else if(value == LOW)
     520:	41 11       	cpse	r20, r1
     522:	0b c0       	rjmp	.+22     	; 0x53a <DIO_write+0xee>
			{
				//PORTD &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTD, pin_number);
     524:	22 b3       	in	r18, 0x12	; 18
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_write+0xe4>
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	6a 95       	dec	r22
     532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_write+0xe0>
     534:	80 95       	com	r24
     536:	82 23       	and	r24, r18
     538:	82 bb       	out	0x12, r24	; 18
     53a:	08 95       	ret

0000053c <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	while(EECR & (1<<EEWE));
     53c:	e1 99       	sbic	0x1c, 1	; 28
     53e:	fe cf       	rjmp	.-4      	; 0x53c <EEPROM_write>
	
	EEARL = uiAddress;
     540:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     542:	6d bb       	out	0x1d, r22	; 29
	
	EECR |= (1<<EEMWE);
     544:	8c b3       	in	r24, 0x1c	; 28
     546:	84 60       	ori	r24, 0x04	; 4
     548:	8c bb       	out	0x1c, r24	; 28
	
	EECR |= (1<<EEWE);
     54a:	8c b3       	in	r24, 0x1c	; 28
     54c:	82 60       	ori	r24, 0x02	; 2
     54e:	8c bb       	out	0x1c, r24	; 28
     550:	08 95       	ret

00000552 <EEPROM_read>:
}
uint8_t EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEWE));
     552:	e1 99       	sbic	0x1c, 1	; 28
     554:	fe cf       	rjmp	.-4      	; 0x552 <EEPROM_read>
	
	EEARL = uiAddress;
     556:	8e bb       	out	0x1e, r24	; 30
	
	EECR |= (1<<EERE);
     558:	8c b3       	in	r24, 0x1c	; 28
     55a:	81 60       	ori	r24, 0x01	; 1
     55c:	8c bb       	out	0x1c, r24	; 28
	
	return EEDR;
     55e:	8d b3       	in	r24, 0x1d	; 29
	
	
     560:	08 95       	ret

00000562 <KEYPAD_init>:
uint8_t key;


void KEYPAD_init(void)
{
	DDRA = 0x0F;
     562:	8f e0       	ldi	r24, 0x0F	; 15
     564:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	87 bb       	out	0x17, r24	; 23
	PORTA = 0xFF;
     56a:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x00;
     56c:	18 ba       	out	0x18, r1	; 24
     56e:	08 95       	ret

00000570 <GET_KEY>:
		
}
uint8_t GET_KEY(void)
{
			/*First ROW*/
	if(READ_BIT(PINA,PIN4) == 0)
     570:	cc 99       	sbic	0x19, 4	; 25
     572:	06 c0       	rjmp	.+12     	; 0x580 <GET_KEY+0x10>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     574:	cc 9b       	sbis	0x19, 4	; 25
     576:	fe cf       	rjmp	.-4      	; 0x574 <GET_KEY+0x4>
		key = '7';
     578:	87 e3       	ldi	r24, 0x37	; 55
     57a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     57e:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     580:	cd 99       	sbic	0x19, 5	; 25
     582:	06 c0       	rjmp	.+12     	; 0x590 <GET_KEY+0x20>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     584:	cd 9b       	sbis	0x19, 5	; 25
     586:	fe cf       	rjmp	.-4      	; 0x584 <GET_KEY+0x14>
		key = '8';
     588:	88 e3       	ldi	r24, 0x38	; 56
     58a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     58e:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     590:	ce 99       	sbic	0x19, 6	; 25
     592:	06 c0       	rjmp	.+12     	; 0x5a0 <GET_KEY+0x30>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     594:	ce 9b       	sbis	0x19, 6	; 25
     596:	fe cf       	rjmp	.-4      	; 0x594 <GET_KEY+0x24>
		key = '9';
     598:	89 e3       	ldi	r24, 0x39	; 57
     59a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     59e:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     5a0:	cf 99       	sbic	0x19, 7	; 25
     5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <GET_KEY+0x40>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     5a4:	cf 9b       	sbis	0x19, 7	; 25
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <GET_KEY+0x34>
		key = 47; /* / Division */
     5a8:	8f e2       	ldi	r24, 0x2F	; 47
     5aa:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5ae:	08 95       	ret
	}

	SET_BIT(PORTA,PIN0);
     5b0:	8b b3       	in	r24, 0x1b	; 27
     5b2:	81 60       	ori	r24, 0x01	; 1
     5b4:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	8a e0       	ldi	r24, 0x0A	; 10
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
			/*Second ROW*/
	ClEAR_BIT(PORTA,PIN1);
     5c2:	8b b3       	in	r24, 0x1b	; 27
     5c4:	8d 7f       	andi	r24, 0xFD	; 253
     5c6:	8b bb       	out	0x1b, r24	; 27
	if(READ_BIT(PINA,PIN4) == 0)
     5c8:	cc 99       	sbic	0x19, 4	; 25
     5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <GET_KEY+0x68>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     5cc:	cc 9b       	sbis	0x19, 4	; 25
     5ce:	fe cf       	rjmp	.-4      	; 0x5cc <GET_KEY+0x5c>
		key = '4';
     5d0:	84 e3       	ldi	r24, 0x34	; 52
     5d2:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;	
     5d6:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     5d8:	cd 99       	sbic	0x19, 5	; 25
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <GET_KEY+0x78>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     5dc:	cd 9b       	sbis	0x19, 5	; 25
     5de:	fe cf       	rjmp	.-4      	; 0x5dc <GET_KEY+0x6c>
		key = '5';
     5e0:	85 e3       	ldi	r24, 0x35	; 53
     5e2:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5e6:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     5e8:	ce 99       	sbic	0x19, 6	; 25
     5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <GET_KEY+0x88>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     5ec:	ce 9b       	sbis	0x19, 6	; 25
     5ee:	fe cf       	rjmp	.-4      	; 0x5ec <GET_KEY+0x7c>
		key = '6';
     5f0:	86 e3       	ldi	r24, 0x36	; 54
     5f2:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5f6:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     5f8:	cf 99       	sbic	0x19, 7	; 25
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <GET_KEY+0x98>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     5fc:	cf 9b       	sbis	0x19, 7	; 25
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <GET_KEY+0x8c>
		key = 42;    // * multiply
     600:	8a e2       	ldi	r24, 0x2A	; 42
     602:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     606:	08 95       	ret
	}
	SET_BIT(PORTA,PIN1);
     608:	8b b3       	in	r24, 0x1b	; 27
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	8a e0       	ldi	r24, 0x0A	; 10
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
			/*Third ROW*/
	ClEAR_BIT(PORTA,PIN2);
     61a:	8b b3       	in	r24, 0x1b	; 27
     61c:	8b 7f       	andi	r24, 0xFB	; 251
     61e:	8b bb       	out	0x1b, r24	; 27
	if(READ_BIT(PINA,PIN4) == 0)
     620:	cc 99       	sbic	0x19, 4	; 25
     622:	06 c0       	rjmp	.+12     	; 0x630 <GET_KEY+0xc0>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     624:	cc 9b       	sbis	0x19, 4	; 25
     626:	fe cf       	rjmp	.-4      	; 0x624 <GET_KEY+0xb4>
		key = '1';
     628:	81 e3       	ldi	r24, 0x31	; 49
     62a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     62e:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     630:	cd 99       	sbic	0x19, 5	; 25
     632:	06 c0       	rjmp	.+12     	; 0x640 <GET_KEY+0xd0>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     634:	cd 9b       	sbis	0x19, 5	; 25
     636:	fe cf       	rjmp	.-4      	; 0x634 <GET_KEY+0xc4>
		key = '2';
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     63e:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     640:	ce 99       	sbic	0x19, 6	; 25
     642:	06 c0       	rjmp	.+12     	; 0x650 <GET_KEY+0xe0>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     644:	ce 9b       	sbis	0x19, 6	; 25
     646:	fe cf       	rjmp	.-4      	; 0x644 <GET_KEY+0xd4>
		key = '3';
     648:	83 e3       	ldi	r24, 0x33	; 51
     64a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     64e:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     650:	cf 99       	sbic	0x19, 7	; 25
     652:	06 c0       	rjmp	.+12     	; 0x660 <GET_KEY+0xf0>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     654:	cf 9b       	sbis	0x19, 7	; 25
     656:	fe cf       	rjmp	.-4      	; 0x654 <GET_KEY+0xe4>
		key = 45; // - Subtract
     658:	8d e2       	ldi	r24, 0x2D	; 45
     65a:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     65e:	08 95       	ret
	}
	SET_BIT(PORTA,PIN2);
     660:	8b b3       	in	r24, 0x1b	; 27
     662:	84 60       	ori	r24, 0x04	; 4
     664:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e0       	ldi	r24, 0x0A	; 10
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
			/*Fourth ROW*/
	ClEAR_BIT(PORTA,PIN3);
     672:	8b b3       	in	r24, 0x1b	; 27
     674:	87 7f       	andi	r24, 0xF7	; 247
     676:	8b bb       	out	0x1b, r24	; 27
	if(READ_BIT(PINA,PIN4) == 0)
     678:	cc 99       	sbic	0x19, 4	; 25
     67a:	06 c0       	rjmp	.+12     	; 0x688 <GET_KEY+0x118>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     67c:	cc 9b       	sbis	0x19, 4	; 25
     67e:	fe cf       	rjmp	.-4      	; 0x67c <GET_KEY+0x10c>
		key = 'c';
     680:	83 e6       	ldi	r24, 0x63	; 99
     682:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     686:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     688:	cd 99       	sbic	0x19, 5	; 25
     68a:	06 c0       	rjmp	.+12     	; 0x698 <GET_KEY+0x128>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     68c:	cd 9b       	sbis	0x19, 5	; 25
     68e:	fe cf       	rjmp	.-4      	; 0x68c <GET_KEY+0x11c>
		key = '0';
     690:	80 e3       	ldi	r24, 0x30	; 48
     692:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     696:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     698:	ce 99       	sbic	0x19, 6	; 25
     69a:	06 c0       	rjmp	.+12     	; 0x6a8 <GET_KEY+0x138>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     69c:	ce 9b       	sbis	0x19, 6	; 25
     69e:	fe cf       	rjmp	.-4      	; 0x69c <GET_KEY+0x12c>
		key = '=';
     6a0:	8d e3       	ldi	r24, 0x3D	; 61
     6a2:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     6a6:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     6a8:	cf 99       	sbic	0x19, 7	; 25
     6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <GET_KEY+0x148>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     6ac:	cf 9b       	sbis	0x19, 7	; 25
     6ae:	fe cf       	rjmp	.-4      	; 0x6ac <GET_KEY+0x13c>
		key = 43;  // + Add
     6b0:	8b e2       	ldi	r24, 0x2B	; 43
     6b2:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;		
     6b6:	08 95       	ret
	}
	SET_BIT(PORTA,PIN3);
     6b8:	8b b3       	in	r24, 0x1b	; 27
     6ba:	88 60       	ori	r24, 0x08	; 8
     6bc:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);	
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	8a e0       	ldi	r24, 0x0A	; 10
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
		
	key = '_';
     6ca:	8f e5       	ldi	r24, 0x5F	; 95
     6cc:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
	return key;	
	
}
     6d0:	08 95       	ret

000006d2 <KEYPAD_start>:
void KEYPAD_start(void)
{
	ClEAR_BIT(PORTA,PIN0);
     6d2:	8b b3       	in	r24, 0x1b	; 27
     6d4:	8e 7f       	andi	r24, 0xFE	; 254
     6d6:	8b bb       	out	0x1b, r24	; 27
	if(PINA != 0xFF )
     6d8:	89 b3       	in	r24, 0x19	; 25
     6da:	8f 3f       	cpi	r24, 0xFF	; 255
     6dc:	01 f1       	breq	.+64     	; 0x71e <KEYPAD_start+0x4c>
	{
		x = GET_KEY();
     6de:	0e 94 b8 02 	call	0x570	; 0x570 <GET_KEY>
     6e2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <x>
		if(x != '_')
     6e6:	8f 35       	cpi	r24, 0x5F	; 95
     6e8:	a1 f0       	breq	.+40     	; 0x712 <KEYPAD_start+0x40>
		{
			if(x == 'c') 
     6ea:	83 36       	cpi	r24, 0x63	; 99
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <KEYPAD_start+0x24>
			{
				LCD_4_bit_sendCommand(0x01);
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
     6f4:	0e c0       	rjmp	.+28     	; 0x712 <KEYPAD_start+0x40>
			}
			
			else
			{
				if(string_counter <= 3)
     6f6:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <string_counter>
     6fa:	94 30       	cpi	r25, 0x04	; 4
     6fc:	40 f4       	brcc	.+16     	; 0x70e <KEYPAD_start+0x3c>
				{
					pass_string[string_counter] = x;
     6fe:	e9 2f       	mov	r30, r25
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	ea 54       	subi	r30, 0x4A	; 74
     704:	ff 4f       	sbci	r31, 0xFF	; 255
     706:	80 83       	st	Z, r24
					string_counter++;
     708:	9f 5f       	subi	r25, 0xFF	; 255
     70a:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <string_counter>
				}
				
				LCD_4_bit_sendChar(x);
     70e:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_4_bit_sendChar>
			}
			
		}
		TIMER0_delay(100,no_prescale);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	84 e6       	ldi	r24, 0x64	; 100
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
     71e:	08 95       	ret

00000720 <LCD_4_bit_sendCommand>:
	LCD_4_bit_sendCommand(0x01);	//clear Display
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
	
}
void LCD_4_bit_sendCommand(uint8_t command)
{
     720:	cf 93       	push	r28
     722:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command & 0xF0); //Sending upper nibble
     724:	85 b3       	in	r24, 0x15	; 21
     726:	8f 70       	andi	r24, 0x0F	; 15
     728:	9c 2f       	mov	r25, r28
     72a:	90 7f       	andi	r25, 0xF0	; 240
     72c:	89 2b       	or	r24, r25
     72e:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port &= ~(1<<RS); // RS PIN = 0 command register
     730:	82 b3       	in	r24, 0x12	; 18
     732:	8e 7f       	andi	r24, 0xFE	; 254
     734:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
     736:	82 b3       	in	r24, 0x12	; 18
     738:	8d 7f       	andi	r24, 0xFD	; 253
     73a:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     73c:	82 b3       	in	r24, 0x12	; 18
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     74e:	82 b3       	in	r24, 0x12	; 18
     750:	8b 7f       	andi	r24, 0xFB	; 251
     752:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command << 4); //Sending upper nibble
     760:	25 b3       	in	r18, 0x15	; 21
     762:	30 e1       	ldi	r19, 0x10	; 16
     764:	c3 9f       	mul	r28, r19
     766:	c0 01       	movw	r24, r0
     768:	11 24       	eor	r1, r1
     76a:	92 2f       	mov	r25, r18
     76c:	9f 70       	andi	r25, 0x0F	; 15
     76e:	89 2b       	or	r24, r25
     770:	85 bb       	out	0x15, r24	; 21
		
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     772:	82 b3       	in	r24, 0x12	; 18
     774:	84 60       	ori	r24, 0x04	; 4
     776:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     784:	82 b3       	in	r24, 0x12	; 18
     786:	8b 7f       	andi	r24, 0xFB	; 251
     788:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
}
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <LCD_4_bit_init>:
	
}

void LCD_4_bit_init(void)
{
	LCD_Command_Port_Dir |= (1<<0) | (1<<1) | (1<<2);  //Make PIN0, PIN1, PIN2 in PORTD outputs
     79a:	81 b3       	in	r24, 0x11	; 17
     79c:	87 60       	ori	r24, 0x07	; 7
     79e:	81 bb       	out	0x11, r24	; 17
	LCD_Data_PORT_Dir |= (1<<4) | (1<<5) | (1<<6) | (1<<7); //Make PIN4, PIN5, PIN6, PIN7 in PORTC outputs
     7a0:	84 b3       	in	r24, 0x14	; 20
     7a2:	80 6f       	ori	r24, 0xF0	; 240
     7a4:	84 bb       	out	0x14, r24	; 20
	TIMER_set(Normal);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <TIMER_set>
	TIMER0_delay(20, no_prescale);	//LCD power ON delay always >15ms
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	84 e1       	ldi	r24, 0x14	; 20
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	LCD_4_bit_sendCommand(0x02);	//Send for 4 bit initialization of the LCD
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x28);	//initialization of 5x7 LCD in 4 bit mode
     7be:	88 e2       	ldi	r24, 0x28	; 40
     7c0:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x0C);	//Display ON, Cursor OFF
     7c4:	8c e0       	ldi	r24, 0x0C	; 12
     7c6:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x06);	//Auto increment cursor
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x01);	//clear Display
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
     7d6:	80 e8       	ldi	r24, 0x80	; 128
     7d8:	0e 94 90 03 	call	0x720	; 0x720 <LCD_4_bit_sendCommand>
     7dc:	08 95       	ret

000007de <LCD_4_bit_sendChar>:
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
	
	TIMER0_delay(1,no_prescale);
}
void LCD_4_bit_sendChar(uint8_t character)
{
     7de:	cf 93       	push	r28
     7e0:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character & 0xF0); //Sending upper nibble
     7e2:	85 b3       	in	r24, 0x15	; 21
     7e4:	8f 70       	andi	r24, 0x0F	; 15
     7e6:	9c 2f       	mov	r25, r28
     7e8:	90 7f       	andi	r25, 0xF0	; 240
     7ea:	89 2b       	or	r24, r25
     7ec:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<RS); // RS PIN = 1 data register
     7ee:	82 b3       	in	r24, 0x12	; 18
     7f0:	81 60       	ori	r24, 0x01	; 1
     7f2:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
     7f4:	82 b3       	in	r24, 0x12	; 18
     7f6:	8d 7f       	andi	r24, 0xFD	; 253
     7f8:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     7fa:	82 b3       	in	r24, 0x12	; 18
     7fc:	84 60       	ori	r24, 0x04	; 4
     7fe:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     80c:	82 b3       	in	r24, 0x12	; 18
     80e:	8b 7f       	andi	r24, 0xFB	; 251
     810:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character << 4); //Sending upper nibble
     81e:	25 b3       	in	r18, 0x15	; 21
     820:	30 e1       	ldi	r19, 0x10	; 16
     822:	c3 9f       	mul	r28, r19
     824:	c0 01       	movw	r24, r0
     826:	11 24       	eor	r1, r1
     828:	92 2f       	mov	r25, r18
     82a:	9f 70       	andi	r25, 0x0F	; 15
     82c:	89 2b       	or	r24, r25
     82e:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     830:	82 b3       	in	r24, 0x12	; 18
     832:	84 60       	ori	r24, 0x04	; 4
     834:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     842:	82 b3       	in	r24, 0x12	; 18
     844:	8b 7f       	andi	r24, 0xFB	; 251
     846:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TIMER0_delay>
}
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <LCD_4_bit_sendString>:
void LCD_4_bit_sendString(uint8_t *str)
{
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	8c 01       	movw	r16, r24
	uint8_t i;

	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
     860:	c0 e0       	ldi	r28, 0x00	; 0
     862:	03 c0       	rjmp	.+6      	; 0x86a <__stack+0xb>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
     864:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_4_bit_sendChar>
}
void LCD_4_bit_sendString(uint8_t *str)
{
	uint8_t i;

	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
     868:	cf 5f       	subi	r28, 0xFF	; 255
     86a:	f8 01       	movw	r30, r16
     86c:	ec 0f       	add	r30, r28
     86e:	f1 1d       	adc	r31, r1
     870:	80 81       	ld	r24, Z
     872:	81 11       	cpse	r24, r1
     874:	f7 cf       	rjmp	.-18     	; 0x864 <__stack+0x5>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
	}
	
}
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	08 95       	ret

0000087e <Spi_Master_init>:
uint8_t flush_buffer = 0;

void Spi_Master_init(void)
{
	//initialize the IN and OUT PINS
	DIO_init(PORT_B,SS,OUT);
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	64 e0       	ldi	r22, 0x04	; 4
     882:	82 e4       	ldi	r24, 0x42	; 66
     884:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_init>
	DIO_init(PORT_B,SCK,OUT);
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	67 e0       	ldi	r22, 0x07	; 7
     88c:	82 e4       	ldi	r24, 0x42	; 66
     88e:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_init>
	DIO_init(PORT_B,MOSI,OUT);
     892:	41 e0       	ldi	r20, 0x01	; 1
     894:	65 e0       	ldi	r22, 0x05	; 5
     896:	82 e4       	ldi	r24, 0x42	; 66
     898:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_init>
	DIO_init(PORT_B,MISO,IN);
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	66 e0       	ldi	r22, 0x06	; 6
     8a0:	82 e4       	ldi	r24, 0x42	; 66
     8a2:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_init>
	
	//initialize Slave select pin to be high
	DIO_write(PORT_B,SS,HIGH);
     8a6:	41 e0       	ldi	r20, 0x01	; 1
     8a8:	64 e0       	ldi	r22, 0x04	; 4
     8aa:	82 e4       	ldi	r24, 0x42	; 66
     8ac:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_write>
	
	//Select Master mode, prescale of /16, enable the SPI
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR1); 
     8b0:	8d b1       	in	r24, 0x0d	; 13
     8b2:	82 65       	ori	r24, 0x52	; 82
     8b4:	8d b9       	out	0x0d, r24	; 13
	//disable the double SPI speed bit
	SPSR &= ~ (1<<SPI2X);
     8b6:	8e b1       	in	r24, 0x0e	; 14
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	8e b9       	out	0x0e, r24	; 14
     8bc:	08 95       	ret

000008be <Spi_Master_send>:
	
}
void Spi_Master_send(uint8_t request)
{
     8be:	cf 93       	push	r28
     8c0:	c8 2f       	mov	r28, r24
	
	DIO_write(PORT_B,SS,LOW);
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	64 e0       	ldi	r22, 0x04	; 4
     8c6:	82 e4       	ldi	r24, 0x42	; 66
     8c8:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_write>
	
	SPDR = request;
     8cc:	cf b9       	out	0x0f, r28	; 15
	
	while(READ_BIT(SPSR,SPIF) == 0);
     8ce:	77 9b       	sbis	0x0e, 7	; 14
     8d0:	fe cf       	rjmp	.-4      	; 0x8ce <Spi_Master_send+0x10>
	
	flush_buffer = SPDR;
     8d2:	8f b1       	in	r24, 0x0f	; 15
     8d4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
	
	DIO_write(PORT_B,SS,HIGH);
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	64 e0       	ldi	r22, 0x04	; 4
     8dc:	82 e4       	ldi	r24, 0x42	; 66
     8de:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_write>
	
}
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <TIMER_set>:

//functions definitions

void TIMER_set(uint8_t Mode)
{
	switch(Mode)
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	69 f0       	breq	.+26     	; 0x904 <TIMER_set+0x1e>
     8ea:	28 f0       	brcs	.+10     	; 0x8f6 <TIMER_set+0x10>
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	89 f0       	breq	.+34     	; 0x912 <TIMER_set+0x2c>
     8f0:	83 30       	cpi	r24, 0x03	; 3
     8f2:	b1 f0       	breq	.+44     	; 0x920 <TIMER_set+0x3a>
     8f4:	08 95       	ret
	{
		case Normal:
			ClEAR_BIT(TCCR0, PIN3) ;		//Normal Mode
     8f6:	83 b7       	in	r24, 0x33	; 51
     8f8:	87 7f       	andi	r24, 0xF7	; 247
     8fa:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;	
     8fc:	83 b7       	in	r24, 0x33	; 51
     8fe:	8f 7b       	andi	r24, 0xBF	; 191
     900:	83 bf       	out	0x33, r24	; 51
		break;
     902:	08 95       	ret
		
		case PWM_Phase_Correct:
			ClEAR_BIT(TCCR0, PIN3) ;
     904:	83 b7       	in	r24, 0x33	; 51
     906:	87 7f       	andi	r24, 0xF7	; 247
     908:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			//PWM_Phase_Correct Mode
     90a:	83 b7       	in	r24, 0x33	; 51
     90c:	80 64       	ori	r24, 0x40	; 64
     90e:	83 bf       	out	0x33, r24	; 51
		break;	
     910:	08 95       	ret
			
		case CTC:
			SET_BIT(TCCR0, PIN3) ;			//CTC Mode
     912:	83 b7       	in	r24, 0x33	; 51
     914:	88 60       	ori	r24, 0x08	; 8
     916:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;			
     918:	83 b7       	in	r24, 0x33	; 51
     91a:	8f 7b       	andi	r24, 0xBF	; 191
     91c:	83 bf       	out	0x33, r24	; 51
		break;
     91e:	08 95       	ret
		
		case Fast_PWM:
			SET_BIT(TCCR0, PIN3) ;			//Fast_PWM Mode
     920:	83 b7       	in	r24, 0x33	; 51
     922:	88 60       	ori	r24, 0x08	; 8
     924:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			
     926:	83 b7       	in	r24, 0x33	; 51
     928:	80 64       	ori	r24, 0x40	; 64
     92a:	83 bf       	out	0x33, r24	; 51
     92c:	08 95       	ret

0000092e <TIMER_start>:
	}
	
}
void TIMER_start(uint16_t prescale)
{
	switch(prescale)
     92e:	88 30       	cpi	r24, 0x08	; 8
     930:	91 05       	cpc	r25, r1
     932:	d1 f0       	breq	.+52     	; 0x968 <TIMER_start+0x3a>
     934:	48 f4       	brcc	.+18     	; 0x948 <TIMER_start+0x1a>
     936:	85 30       	cpi	r24, 0x05	; 5
     938:	91 05       	cpc	r25, r1
     93a:	31 f1       	breq	.+76     	; 0x988 <TIMER_start+0x5a>
     93c:	86 30       	cpi	r24, 0x06	; 6
     93e:	91 05       	cpc	r25, r1
     940:	39 f1       	breq	.+78     	; 0x990 <TIMER_start+0x62>
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	41 f5       	brne	.+80     	; 0x996 <TIMER_start+0x68>
     946:	0c c0       	rjmp	.+24     	; 0x960 <TIMER_start+0x32>
     948:	81 15       	cp	r24, r1
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	92 07       	cpc	r25, r18
     94e:	a1 f0       	breq	.+40     	; 0x978 <TIMER_start+0x4a>
     950:	81 15       	cp	r24, r1
     952:	24 e0       	ldi	r18, 0x04	; 4
     954:	92 07       	cpc	r25, r18
     956:	a1 f0       	breq	.+40     	; 0x980 <TIMER_start+0x52>
     958:	80 34       	cpi	r24, 0x40	; 64
     95a:	91 05       	cpc	r25, r1
     95c:	e1 f4       	brne	.+56     	; 0x996 <TIMER_start+0x68>
     95e:	08 c0       	rjmp	.+16     	; 0x970 <TIMER_start+0x42>
	{
		case no_prescale:				//No prescaling
			TCCR0 |= 0b00000001;
     960:	83 b7       	in	r24, 0x33	; 51
     962:	81 60       	ori	r24, 0x01	; 1
     964:	83 bf       	out	0x33, r24	; 51
		break;
     966:	08 95       	ret
		
		case prescale8:					//8 prescaling
			TCCR0 |= 0b00000010;
     968:	83 b7       	in	r24, 0x33	; 51
     96a:	82 60       	ori	r24, 0x02	; 2
     96c:	83 bf       	out	0x33, r24	; 51
		break;
     96e:	08 95       	ret

		case prescale64:				//64 prescaling
			TCCR0 |= 0b00000011;
     970:	83 b7       	in	r24, 0x33	; 51
     972:	83 60       	ori	r24, 0x03	; 3
     974:	83 bf       	out	0x33, r24	; 51
		break;
     976:	08 95       	ret
		
		case prescale256:				// 256 prescaling
			TCCR0 |= 0b00000100;
     978:	83 b7       	in	r24, 0x33	; 51
     97a:	84 60       	ori	r24, 0x04	; 4
     97c:	83 bf       	out	0x33, r24	; 51
		break;
     97e:	08 95       	ret
		
		case prescale1024:				//1024 prescaling
			TCCR0 |= 0b00000101;
     980:	83 b7       	in	r24, 0x33	; 51
     982:	85 60       	ori	r24, 0x05	; 5
     984:	83 bf       	out	0x33, r24	; 51
		break;
     986:	08 95       	ret
		
		case External_Falling: //External_Falling on T0 pin
			TCCR0 |= 0b00000110;
     988:	83 b7       	in	r24, 0x33	; 51
     98a:	86 60       	ori	r24, 0x06	; 6
     98c:	83 bf       	out	0x33, r24	; 51
		break;
     98e:	08 95       	ret


		case External_Raising : //External_Raising on T0 pin
			TCCR0 |= 0b00000111;
     990:	83 b7       	in	r24, 0x33	; 51
     992:	87 60       	ori	r24, 0x07	; 7
     994:	83 bf       	out	0x33, r24	; 51
     996:	08 95       	ret

00000998 <TIMER_overflow_read>:
	
}
void TIMER_overflow_read(void)
{
	//wait until the overflow flag is set
	while((READ_BIT(TIFR, PIN0) == 0));
     998:	08 b6       	in	r0, 0x38	; 56
     99a:	00 fe       	sbrs	r0, 0
     99c:	fd cf       	rjmp	.-6      	; 0x998 <TIMER_overflow_read>
	
	//Clear the OverFlow flag
	SET_BIT(TIFR, PIN0);
     99e:	88 b7       	in	r24, 0x38	; 56
     9a0:	81 60       	ori	r24, 0x01	; 1
     9a2:	88 bf       	out	0x38, r24	; 56
     9a4:	08 95       	ret

000009a6 <TIMER_stop>:
}
void TIMER_stop(void)
{
	//Stop the timer
	TCCR0 = 0x00;
     9a6:	13 be       	out	0x33, r1	; 51
     9a8:	08 95       	ret

000009aa <TIMER0_delay>:
}

void TIMER0_delay(uint16_t Time_delay, uint16_t prescale)
{
     9aa:	4f 92       	push	r4
     9ac:	5f 92       	push	r5
     9ae:	6f 92       	push	r6
     9b0:	7f 92       	push	r7
     9b2:	8f 92       	push	r8
     9b4:	9f 92       	push	r9
     9b6:	af 92       	push	r10
     9b8:	bf 92       	push	r11
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	eb 01       	movw	r28, r22
	Time_delay_ = Time_delay*0.001;
     9c8:	bc 01       	movw	r22, r24
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__floatunsisf>
     9d2:	2f e6       	ldi	r18, 0x6F	; 111
     9d4:	32 e1       	ldi	r19, 0x12	; 18
     9d6:	43 e8       	ldi	r20, 0x83	; 131
     9d8:	5a e3       	ldi	r21, 0x3A	; 58
     9da:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
     9de:	6b 01       	movw	r12, r22
     9e0:	7c 01       	movw	r14, r24
     9e2:	60 93 c9 00 	sts	0x00C9, r22	; 0x8000c9 <Time_delay_>
     9e6:	70 93 ca 00 	sts	0x00CA, r23	; 0x8000ca <Time_delay_+0x1>
     9ea:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <Time_delay_+0x2>
     9ee:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <Time_delay_+0x3>
	
	Timer_Tick = ( (prescale) / (CPU_Frequency) );
     9f2:	be 01       	movw	r22, r28
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__floatunsisf>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	34 e2       	ldi	r19, 0x24	; 36
     a00:	44 e7       	ldi	r20, 0x74	; 116
     a02:	59 e4       	ldi	r21, 0x49	; 73
     a04:	0e 94 40 06 	call	0xc80	; 0xc80 <__divsf3>
     a08:	2b 01       	movw	r4, r22
     a0a:	3c 01       	movw	r6, r24
     a0c:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <Timer_Tick>
     a10:	70 93 d1 00 	sts	0x00D1, r23	; 0x8000d1 <Timer_Tick+0x1>
     a14:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Timer_Tick+0x2>
     a18:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Timer_Tick+0x3>
	
	Timer_Delay_max = 	(Timer_Tick) * (256.0);
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e8       	ldi	r20, 0x80	; 128
     a22:	53 e4       	ldi	r21, 0x43	; 67
     a24:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__mulsf3>
     a28:	4b 01       	movw	r8, r22
     a2a:	5c 01       	movw	r10, r24
     a2c:	60 93 c5 00 	sts	0x00C5, r22	; 0x8000c5 <Timer_Delay_max>
     a30:	70 93 c6 00 	sts	0x00C6, r23	; 0x8000c6 <Timer_Delay_max+0x1>
     a34:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <Timer_Delay_max+0x2>
     a38:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <Timer_Delay_max+0x3>
	
	if(Time_delay_ < Timer_Delay_max)
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	c7 01       	movw	r24, r14
     a42:	b6 01       	movw	r22, r12
     a44:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
     a48:	88 23       	and	r24, r24
     a4a:	ac f4       	brge	.+42     	; 0xa76 <TIMER0_delay+0xcc>
	{
		Timer_initial_value = ( (Timer_Delay_max - Time_delay_ ) / (Timer_Tick) );
     a4c:	a7 01       	movw	r20, r14
     a4e:	96 01       	movw	r18, r12
     a50:	c5 01       	movw	r24, r10
     a52:	b4 01       	movw	r22, r8
     a54:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__subsf3>
     a58:	a3 01       	movw	r20, r6
     a5a:	92 01       	movw	r18, r4
     a5c:	0e 94 40 06 	call	0xc80	; 0xc80 <__divsf3>
     a60:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fixunssfsi>
     a64:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <Timer_initial_value>
			
		Number_of_overflows_needed = 1;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <Number_of_overflows_needed+0x1>
     a70:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Number_of_overflows_needed>
     a74:	4a c0       	rjmp	.+148    	; 0xb0a <TIMER0_delay+0x160>
	}
	else if(Time_delay_ == Timer_Delay_max)
     a76:	a5 01       	movw	r20, r10
     a78:	94 01       	movw	r18, r8
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 3b 06 	call	0xc76	; 0xc76 <__cmpsf2>
     a82:	81 11       	cpse	r24, r1
     a84:	09 c0       	rjmp	.+18     	; 0xa98 <TIMER0_delay+0xee>
	{
		Timer_initial_value = 0x00;
     a86:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <Timer_initial_value>
		Number_of_overflows_needed = 1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <Number_of_overflows_needed+0x1>
     a92:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Number_of_overflows_needed>
     a96:	39 c0       	rjmp	.+114    	; 0xb0a <TIMER0_delay+0x160>
	}	
	
	else if(Time_delay_ > Timer_Delay_max)
     a98:	a5 01       	movw	r20, r10
     a9a:	94 01       	movw	r18, r8
     a9c:	c7 01       	movw	r24, r14
     a9e:	b6 01       	movw	r22, r12
     aa0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__gesf2>
     aa4:	18 16       	cp	r1, r24
     aa6:	8c f5       	brge	.+98     	; 0xb0a <TIMER0_delay+0x160>
	{
		Number_of_overflows_needed = ceil((Time_delay_/Timer_Delay_max));
     aa8:	a5 01       	movw	r20, r10
     aaa:	94 01       	movw	r18, r8
     aac:	c7 01       	movw	r24, r14
     aae:	b6 01       	movw	r22, r12
     ab0:	0e 94 40 06 	call	0xc80	; 0xc80 <__divsf3>
     ab4:	0e 94 24 06 	call	0xc48	; 0xc48 <ceil>
     ab8:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fixunssfsi>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
     ac0:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <Number_of_overflows_needed+0x1>
     ac4:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <Number_of_overflows_needed>
		Timer_initial_value = (ceil((256) - ((Time_delay_/Timer_Tick)/(Number_of_overflows_needed))));
     ac8:	a3 01       	movw	r20, r6
     aca:	92 01       	movw	r18, r4
     acc:	c7 01       	movw	r24, r14
     ace:	b6 01       	movw	r22, r12
     ad0:	0e 94 40 06 	call	0xc80	; 0xc80 <__divsf3>
     ad4:	6b 01       	movw	r12, r22
     ad6:	7c 01       	movw	r14, r24
     ad8:	b4 01       	movw	r22, r8
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__floatunsisf>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	c7 01       	movw	r24, r14
     ae8:	b6 01       	movw	r22, r12
     aea:	0e 94 40 06 	call	0xc80	; 0xc80 <__divsf3>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e8       	ldi	r24, 0x80	; 128
     af8:	93 e4       	ldi	r25, 0x43	; 67
     afa:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__subsf3>
     afe:	0e 94 24 06 	call	0xc48	; 0xc48 <ceil>
     b02:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fixunssfsi>
     b06:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <Timer_initial_value>
	}
	
	TCNT0 = Timer_initial_value;		// setting initial value
     b0a:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Timer_initial_value>
     b0e:	82 bf       	out	0x32, r24	; 50
	
	TIMER_start(prescale);
     b10:	ce 01       	movw	r24, r28
     b12:	0e 94 97 04 	call	0x92e	; 0x92e <TIMER_start>

	while(overflows_counter < Number_of_overflows_needed)
     b16:	0b c0       	rjmp	.+22     	; 0xb2e <TIMER0_delay+0x184>
	{
		TIMER_overflow_read();
     b18:	0e 94 cc 04 	call	0x998	; 0x998 <TIMER_overflow_read>
		overflows_counter++;
     b1c:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <overflows_counter>
     b20:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <overflows_counter+0x1>
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <overflows_counter+0x1>
     b2a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <overflows_counter>
	
	TCNT0 = Timer_initial_value;		// setting initial value
	
	TIMER_start(prescale);

	while(overflows_counter < Number_of_overflows_needed)
     b2e:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <overflows_counter>
     b32:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <overflows_counter+0x1>
     b36:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Number_of_overflows_needed>
     b3a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <Number_of_overflows_needed+0x1>
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	50 f3       	brcs	.-44     	; 0xb18 <TIMER0_delay+0x16e>
	{
		TIMER_overflow_read();
		overflows_counter++;
	}
	overflows_counter = 0;
     b44:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <overflows_counter+0x1>
     b48:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <overflows_counter>
	
	TIMER_stop();
     b4c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <TIMER_stop>
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	9f 90       	pop	r9
     b62:	8f 90       	pop	r8
     b64:	7f 90       	pop	r7
     b66:	6f 90       	pop	r6
     b68:	5f 90       	pop	r5
     b6a:	4f 90       	pop	r4
     b6c:	08 95       	ret

00000b6e <__subsf3>:
     b6e:	50 58       	subi	r21, 0x80	; 128

00000b70 <__addsf3>:
     b70:	bb 27       	eor	r27, r27
     b72:	aa 27       	eor	r26, r26
     b74:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__addsf3x>
     b78:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_round>
     b7c:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     b80:	38 f0       	brcs	.+14     	; 0xb90 <__addsf3+0x20>
     b82:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     b86:	20 f0       	brcs	.+8      	; 0xb90 <__addsf3+0x20>
     b88:	39 f4       	brne	.+14     	; 0xb98 <__addsf3+0x28>
     b8a:	9f 3f       	cpi	r25, 0xFF	; 255
     b8c:	19 f4       	brne	.+6      	; 0xb94 <__addsf3+0x24>
     b8e:	26 f4       	brtc	.+8      	; 0xb98 <__addsf3+0x28>
     b90:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>
     b94:	0e f4       	brtc	.+2      	; 0xb98 <__addsf3+0x28>
     b96:	e0 95       	com	r30
     b98:	e7 fb       	bst	r30, 7
     b9a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>

00000b9e <__addsf3x>:
     b9e:	e9 2f       	mov	r30, r25
     ba0:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     ba4:	58 f3       	brcs	.-42     	; 0xb7c <__addsf3+0xc>
     ba6:	ba 17       	cp	r27, r26
     ba8:	62 07       	cpc	r22, r18
     baa:	73 07       	cpc	r23, r19
     bac:	84 07       	cpc	r24, r20
     bae:	95 07       	cpc	r25, r21
     bb0:	20 f0       	brcs	.+8      	; 0xbba <__addsf3x+0x1c>
     bb2:	79 f4       	brne	.+30     	; 0xbd2 <__addsf3x+0x34>
     bb4:	a6 f5       	brtc	.+104    	; 0xc1e <__addsf3x+0x80>
     bb6:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_zero>
     bba:	0e f4       	brtc	.+2      	; 0xbbe <__addsf3x+0x20>
     bbc:	e0 95       	com	r30
     bbe:	0b 2e       	mov	r0, r27
     bc0:	ba 2f       	mov	r27, r26
     bc2:	a0 2d       	mov	r26, r0
     bc4:	0b 01       	movw	r0, r22
     bc6:	b9 01       	movw	r22, r18
     bc8:	90 01       	movw	r18, r0
     bca:	0c 01       	movw	r0, r24
     bcc:	ca 01       	movw	r24, r20
     bce:	a0 01       	movw	r20, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ff 27       	eor	r31, r31
     bd4:	59 1b       	sub	r21, r25
     bd6:	99 f0       	breq	.+38     	; 0xbfe <__addsf3x+0x60>
     bd8:	59 3f       	cpi	r21, 0xF9	; 249
     bda:	50 f4       	brcc	.+20     	; 0xbf0 <__addsf3x+0x52>
     bdc:	50 3e       	cpi	r21, 0xE0	; 224
     bde:	68 f1       	brcs	.+90     	; 0xc3a <__addsf3x+0x9c>
     be0:	1a 16       	cp	r1, r26
     be2:	f0 40       	sbci	r31, 0x00	; 0
     be4:	a2 2f       	mov	r26, r18
     be6:	23 2f       	mov	r18, r19
     be8:	34 2f       	mov	r19, r20
     bea:	44 27       	eor	r20, r20
     bec:	58 5f       	subi	r21, 0xF8	; 248
     bee:	f3 cf       	rjmp	.-26     	; 0xbd6 <__addsf3x+0x38>
     bf0:	46 95       	lsr	r20
     bf2:	37 95       	ror	r19
     bf4:	27 95       	ror	r18
     bf6:	a7 95       	ror	r26
     bf8:	f0 40       	sbci	r31, 0x00	; 0
     bfa:	53 95       	inc	r21
     bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__addsf3x+0x52>
     bfe:	7e f4       	brtc	.+30     	; 0xc1e <__addsf3x+0x80>
     c00:	1f 16       	cp	r1, r31
     c02:	ba 0b       	sbc	r27, r26
     c04:	62 0b       	sbc	r22, r18
     c06:	73 0b       	sbc	r23, r19
     c08:	84 0b       	sbc	r24, r20
     c0a:	ba f0       	brmi	.+46     	; 0xc3a <__addsf3x+0x9c>
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <__addsf3x+0x9a>
     c10:	ff 0f       	add	r31, r31
     c12:	bb 1f       	adc	r27, r27
     c14:	66 1f       	adc	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	88 1f       	adc	r24, r24
     c1a:	c2 f7       	brpl	.-16     	; 0xc0c <__addsf3x+0x6e>
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__addsf3x+0x9c>
     c1e:	ba 0f       	add	r27, r26
     c20:	62 1f       	adc	r22, r18
     c22:	73 1f       	adc	r23, r19
     c24:	84 1f       	adc	r24, r20
     c26:	48 f4       	brcc	.+18     	; 0xc3a <__addsf3x+0x9c>
     c28:	87 95       	ror	r24
     c2a:	77 95       	ror	r23
     c2c:	67 95       	ror	r22
     c2e:	b7 95       	ror	r27
     c30:	f7 95       	ror	r31
     c32:	9e 3f       	cpi	r25, 0xFE	; 254
     c34:	08 f0       	brcs	.+2      	; 0xc38 <__addsf3x+0x9a>
     c36:	b0 cf       	rjmp	.-160    	; 0xb98 <__addsf3+0x28>
     c38:	93 95       	inc	r25
     c3a:	88 0f       	add	r24, r24
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <__addsf3x+0xa2>
     c3e:	99 27       	eor	r25, r25
     c40:	ee 0f       	add	r30, r30
     c42:	97 95       	ror	r25
     c44:	87 95       	ror	r24
     c46:	08 95       	ret

00000c48 <ceil>:
     c48:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_trunc>
     c4c:	90 f0       	brcs	.+36     	; 0xc72 <ceil+0x2a>
     c4e:	9f 37       	cpi	r25, 0x7F	; 127
     c50:	48 f4       	brcc	.+18     	; 0xc64 <ceil+0x1c>
     c52:	91 11       	cpse	r25, r1
     c54:	16 f4       	brtc	.+4      	; 0xc5a <ceil+0x12>
     c56:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_szero>
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	80 e8       	ldi	r24, 0x80	; 128
     c60:	9f e3       	ldi	r25, 0x3F	; 63
     c62:	08 95       	ret
     c64:	26 f0       	brts	.+8      	; 0xc6e <ceil+0x26>
     c66:	1b 16       	cp	r1, r27
     c68:	61 1d       	adc	r22, r1
     c6a:	71 1d       	adc	r23, r1
     c6c:	81 1d       	adc	r24, r1
     c6e:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__fp_mintl>
     c72:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_mpack>

00000c76 <__cmpsf2>:
     c76:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_cmp>
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <__cmpsf2+0x8>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	08 95       	ret

00000c80 <__divsf3>:
     c80:	0e 94 54 06 	call	0xca8	; 0xca8 <__divsf3x>
     c84:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_round>
     c88:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     c8c:	58 f0       	brcs	.+22     	; 0xca4 <__divsf3+0x24>
     c8e:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     c92:	40 f0       	brcs	.+16     	; 0xca4 <__divsf3+0x24>
     c94:	29 f4       	brne	.+10     	; 0xca0 <__divsf3+0x20>
     c96:	5f 3f       	cpi	r21, 0xFF	; 255
     c98:	29 f0       	breq	.+10     	; 0xca4 <__divsf3+0x24>
     c9a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
     c9e:	51 11       	cpse	r21, r1
     ca0:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_szero>
     ca4:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>

00000ca8 <__divsf3x>:
     ca8:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     cac:	68 f3       	brcs	.-38     	; 0xc88 <__divsf3+0x8>

00000cae <__divsf3_pse>:
     cae:	99 23       	and	r25, r25
     cb0:	b1 f3       	breq	.-20     	; 0xc9e <__divsf3+0x1e>
     cb2:	55 23       	and	r21, r21
     cb4:	91 f3       	breq	.-28     	; 0xc9a <__divsf3+0x1a>
     cb6:	95 1b       	sub	r25, r21
     cb8:	55 0b       	sbc	r21, r21
     cba:	bb 27       	eor	r27, r27
     cbc:	aa 27       	eor	r26, r26
     cbe:	62 17       	cp	r22, r18
     cc0:	73 07       	cpc	r23, r19
     cc2:	84 07       	cpc	r24, r20
     cc4:	38 f0       	brcs	.+14     	; 0xcd4 <__divsf3_pse+0x26>
     cc6:	9f 5f       	subi	r25, 0xFF	; 255
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	44 1f       	adc	r20, r20
     cd0:	aa 1f       	adc	r26, r26
     cd2:	a9 f3       	breq	.-22     	; 0xcbe <__divsf3_pse+0x10>
     cd4:	35 d0       	rcall	.+106    	; 0xd40 <__divsf3_pse+0x92>
     cd6:	0e 2e       	mov	r0, r30
     cd8:	3a f0       	brmi	.+14     	; 0xce8 <__divsf3_pse+0x3a>
     cda:	e0 e8       	ldi	r30, 0x80	; 128
     cdc:	32 d0       	rcall	.+100    	; 0xd42 <__divsf3_pse+0x94>
     cde:	91 50       	subi	r25, 0x01	; 1
     ce0:	50 40       	sbci	r21, 0x00	; 0
     ce2:	e6 95       	lsr	r30
     ce4:	00 1c       	adc	r0, r0
     ce6:	ca f7       	brpl	.-14     	; 0xcda <__divsf3_pse+0x2c>
     ce8:	2b d0       	rcall	.+86     	; 0xd40 <__divsf3_pse+0x92>
     cea:	fe 2f       	mov	r31, r30
     cec:	29 d0       	rcall	.+82     	; 0xd40 <__divsf3_pse+0x92>
     cee:	66 0f       	add	r22, r22
     cf0:	77 1f       	adc	r23, r23
     cf2:	88 1f       	adc	r24, r24
     cf4:	bb 1f       	adc	r27, r27
     cf6:	26 17       	cp	r18, r22
     cf8:	37 07       	cpc	r19, r23
     cfa:	48 07       	cpc	r20, r24
     cfc:	ab 07       	cpc	r26, r27
     cfe:	b0 e8       	ldi	r27, 0x80	; 128
     d00:	09 f0       	breq	.+2      	; 0xd04 <__divsf3_pse+0x56>
     d02:	bb 0b       	sbc	r27, r27
     d04:	80 2d       	mov	r24, r0
     d06:	bf 01       	movw	r22, r30
     d08:	ff 27       	eor	r31, r31
     d0a:	93 58       	subi	r25, 0x83	; 131
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	3a f0       	brmi	.+14     	; 0xd1e <__divsf3_pse+0x70>
     d10:	9e 3f       	cpi	r25, 0xFE	; 254
     d12:	51 05       	cpc	r21, r1
     d14:	78 f0       	brcs	.+30     	; 0xd34 <__divsf3_pse+0x86>
     d16:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
     d1a:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_szero>
     d1e:	5f 3f       	cpi	r21, 0xFF	; 255
     d20:	e4 f3       	brlt	.-8      	; 0xd1a <__divsf3_pse+0x6c>
     d22:	98 3e       	cpi	r25, 0xE8	; 232
     d24:	d4 f3       	brlt	.-12     	; 0xd1a <__divsf3_pse+0x6c>
     d26:	86 95       	lsr	r24
     d28:	77 95       	ror	r23
     d2a:	67 95       	ror	r22
     d2c:	b7 95       	ror	r27
     d2e:	f7 95       	ror	r31
     d30:	9f 5f       	subi	r25, 0xFF	; 255
     d32:	c9 f7       	brne	.-14     	; 0xd26 <__divsf3_pse+0x78>
     d34:	88 0f       	add	r24, r24
     d36:	91 1d       	adc	r25, r1
     d38:	96 95       	lsr	r25
     d3a:	87 95       	ror	r24
     d3c:	97 f9       	bld	r25, 7
     d3e:	08 95       	ret
     d40:	e1 e0       	ldi	r30, 0x01	; 1
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	bb 1f       	adc	r27, r27
     d4a:	62 17       	cp	r22, r18
     d4c:	73 07       	cpc	r23, r19
     d4e:	84 07       	cpc	r24, r20
     d50:	ba 07       	cpc	r27, r26
     d52:	20 f0       	brcs	.+8      	; 0xd5c <__divsf3_pse+0xae>
     d54:	62 1b       	sub	r22, r18
     d56:	73 0b       	sbc	r23, r19
     d58:	84 0b       	sbc	r24, r20
     d5a:	ba 0b       	sbc	r27, r26
     d5c:	ee 1f       	adc	r30, r30
     d5e:	88 f7       	brcc	.-30     	; 0xd42 <__divsf3_pse+0x94>
     d60:	e0 95       	com	r30
     d62:	08 95       	ret

00000d64 <__fixunssfsi>:
     d64:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_splitA>
     d68:	88 f0       	brcs	.+34     	; 0xd8c <__fixunssfsi+0x28>
     d6a:	9f 57       	subi	r25, 0x7F	; 127
     d6c:	98 f0       	brcs	.+38     	; 0xd94 <__fixunssfsi+0x30>
     d6e:	b9 2f       	mov	r27, r25
     d70:	99 27       	eor	r25, r25
     d72:	b7 51       	subi	r27, 0x17	; 23
     d74:	b0 f0       	brcs	.+44     	; 0xda2 <__fixunssfsi+0x3e>
     d76:	e1 f0       	breq	.+56     	; 0xdb0 <__fixunssfsi+0x4c>
     d78:	66 0f       	add	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	88 1f       	adc	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	1a f0       	brmi	.+6      	; 0xd88 <__fixunssfsi+0x24>
     d82:	ba 95       	dec	r27
     d84:	c9 f7       	brne	.-14     	; 0xd78 <__fixunssfsi+0x14>
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <__fixunssfsi+0x4c>
     d88:	b1 30       	cpi	r27, 0x01	; 1
     d8a:	91 f0       	breq	.+36     	; 0xdb0 <__fixunssfsi+0x4c>
     d8c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_zero>
     d90:	b1 e0       	ldi	r27, 0x01	; 1
     d92:	08 95       	ret
     d94:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__fp_zero>
     d98:	67 2f       	mov	r22, r23
     d9a:	78 2f       	mov	r23, r24
     d9c:	88 27       	eor	r24, r24
     d9e:	b8 5f       	subi	r27, 0xF8	; 248
     da0:	39 f0       	breq	.+14     	; 0xdb0 <__fixunssfsi+0x4c>
     da2:	b9 3f       	cpi	r27, 0xF9	; 249
     da4:	cc f3       	brlt	.-14     	; 0xd98 <__fixunssfsi+0x34>
     da6:	86 95       	lsr	r24
     da8:	77 95       	ror	r23
     daa:	67 95       	ror	r22
     dac:	b3 95       	inc	r27
     dae:	d9 f7       	brne	.-10     	; 0xda6 <__fixunssfsi+0x42>
     db0:	3e f4       	brtc	.+14     	; 0xdc0 <__fixunssfsi+0x5c>
     db2:	90 95       	com	r25
     db4:	80 95       	com	r24
     db6:	70 95       	com	r23
     db8:	61 95       	neg	r22
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	8f 4f       	sbci	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	08 95       	ret

00000dc2 <__floatunsisf>:
     dc2:	e8 94       	clt
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <__floatsisf+0x12>

00000dc6 <__floatsisf>:
     dc6:	97 fb       	bst	r25, 7
     dc8:	3e f4       	brtc	.+14     	; 0xdd8 <__floatsisf+0x12>
     dca:	90 95       	com	r25
     dcc:	80 95       	com	r24
     dce:	70 95       	com	r23
     dd0:	61 95       	neg	r22
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	8f 4f       	sbci	r24, 0xFF	; 255
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	99 23       	and	r25, r25
     dda:	a9 f0       	breq	.+42     	; 0xe06 <__floatsisf+0x40>
     ddc:	f9 2f       	mov	r31, r25
     dde:	96 e9       	ldi	r25, 0x96	; 150
     de0:	bb 27       	eor	r27, r27
     de2:	93 95       	inc	r25
     de4:	f6 95       	lsr	r31
     de6:	87 95       	ror	r24
     de8:	77 95       	ror	r23
     dea:	67 95       	ror	r22
     dec:	b7 95       	ror	r27
     dee:	f1 11       	cpse	r31, r1
     df0:	f8 cf       	rjmp	.-16     	; 0xde2 <__floatsisf+0x1c>
     df2:	fa f4       	brpl	.+62     	; 0xe32 <__floatsisf+0x6c>
     df4:	bb 0f       	add	r27, r27
     df6:	11 f4       	brne	.+4      	; 0xdfc <__floatsisf+0x36>
     df8:	60 ff       	sbrs	r22, 0
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <__floatsisf+0x6c>
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	16 c0       	rjmp	.+44     	; 0xe32 <__floatsisf+0x6c>
     e06:	88 23       	and	r24, r24
     e08:	11 f0       	breq	.+4      	; 0xe0e <__floatsisf+0x48>
     e0a:	96 e9       	ldi	r25, 0x96	; 150
     e0c:	11 c0       	rjmp	.+34     	; 0xe30 <__floatsisf+0x6a>
     e0e:	77 23       	and	r23, r23
     e10:	21 f0       	breq	.+8      	; 0xe1a <__floatsisf+0x54>
     e12:	9e e8       	ldi	r25, 0x8E	; 142
     e14:	87 2f       	mov	r24, r23
     e16:	76 2f       	mov	r23, r22
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__floatsisf+0x5e>
     e1a:	66 23       	and	r22, r22
     e1c:	71 f0       	breq	.+28     	; 0xe3a <__floatsisf+0x74>
     e1e:	96 e8       	ldi	r25, 0x86	; 134
     e20:	86 2f       	mov	r24, r22
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	2a f0       	brmi	.+10     	; 0xe32 <__floatsisf+0x6c>
     e28:	9a 95       	dec	r25
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	da f7       	brpl	.-10     	; 0xe28 <__floatsisf+0x62>
     e32:	88 0f       	add	r24, r24
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	97 f9       	bld	r25, 7
     e3a:	08 95       	ret

00000e3c <__fp_cmp>:
     e3c:	99 0f       	add	r25, r25
     e3e:	00 08       	sbc	r0, r0
     e40:	55 0f       	add	r21, r21
     e42:	aa 0b       	sbc	r26, r26
     e44:	e0 e8       	ldi	r30, 0x80	; 128
     e46:	fe ef       	ldi	r31, 0xFE	; 254
     e48:	16 16       	cp	r1, r22
     e4a:	17 06       	cpc	r1, r23
     e4c:	e8 07       	cpc	r30, r24
     e4e:	f9 07       	cpc	r31, r25
     e50:	c0 f0       	brcs	.+48     	; 0xe82 <__fp_cmp+0x46>
     e52:	12 16       	cp	r1, r18
     e54:	13 06       	cpc	r1, r19
     e56:	e4 07       	cpc	r30, r20
     e58:	f5 07       	cpc	r31, r21
     e5a:	98 f0       	brcs	.+38     	; 0xe82 <__fp_cmp+0x46>
     e5c:	62 1b       	sub	r22, r18
     e5e:	73 0b       	sbc	r23, r19
     e60:	84 0b       	sbc	r24, r20
     e62:	95 0b       	sbc	r25, r21
     e64:	39 f4       	brne	.+14     	; 0xe74 <__fp_cmp+0x38>
     e66:	0a 26       	eor	r0, r26
     e68:	61 f0       	breq	.+24     	; 0xe82 <__fp_cmp+0x46>
     e6a:	23 2b       	or	r18, r19
     e6c:	24 2b       	or	r18, r20
     e6e:	25 2b       	or	r18, r21
     e70:	21 f4       	brne	.+8      	; 0xe7a <__fp_cmp+0x3e>
     e72:	08 95       	ret
     e74:	0a 26       	eor	r0, r26
     e76:	09 f4       	brne	.+2      	; 0xe7a <__fp_cmp+0x3e>
     e78:	a1 40       	sbci	r26, 0x01	; 1
     e7a:	a6 95       	lsr	r26
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	81 1d       	adc	r24, r1
     e80:	81 1d       	adc	r24, r1
     e82:	08 95       	ret

00000e84 <__fp_inf>:
     e84:	97 f9       	bld	r25, 7
     e86:	9f 67       	ori	r25, 0x7F	; 127
     e88:	80 e8       	ldi	r24, 0x80	; 128
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	08 95       	ret

00000e90 <__fp_mintl>:
     e90:	88 23       	and	r24, r24
     e92:	71 f4       	brne	.+28     	; 0xeb0 <__fp_mintl+0x20>
     e94:	77 23       	and	r23, r23
     e96:	21 f0       	breq	.+8      	; 0xea0 <__fp_mintl+0x10>
     e98:	98 50       	subi	r25, 0x08	; 8
     e9a:	87 2b       	or	r24, r23
     e9c:	76 2f       	mov	r23, r22
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <__fp_mintl+0x1e>
     ea0:	66 23       	and	r22, r22
     ea2:	11 f4       	brne	.+4      	; 0xea8 <__fp_mintl+0x18>
     ea4:	99 27       	eor	r25, r25
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__fp_mintl+0x32>
     ea8:	90 51       	subi	r25, 0x10	; 16
     eaa:	86 2b       	or	r24, r22
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	2a f0       	brmi	.+10     	; 0xebc <__fp_mintl+0x2c>
     eb2:	9a 95       	dec	r25
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	da f7       	brpl	.-10     	; 0xeb2 <__fp_mintl+0x22>
     ebc:	88 0f       	add	r24, r24
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	97 f9       	bld	r25, 7
     ec4:	08 95       	ret

00000ec6 <__fp_mpack>:
     ec6:	9f 3f       	cpi	r25, 0xFF	; 255
     ec8:	31 f0       	breq	.+12     	; 0xed6 <__fp_mpack_finite+0xc>

00000eca <__fp_mpack_finite>:
     eca:	91 50       	subi	r25, 0x01	; 1
     ecc:	20 f4       	brcc	.+8      	; 0xed6 <__fp_mpack_finite+0xc>
     ece:	87 95       	ror	r24
     ed0:	77 95       	ror	r23
     ed2:	67 95       	ror	r22
     ed4:	b7 95       	ror	r27
     ed6:	88 0f       	add	r24, r24
     ed8:	91 1d       	adc	r25, r1
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret

00000ee2 <__fp_nan>:
     ee2:	9f ef       	ldi	r25, 0xFF	; 255
     ee4:	80 ec       	ldi	r24, 0xC0	; 192
     ee6:	08 95       	ret

00000ee8 <__fp_pscA>:
     ee8:	00 24       	eor	r0, r0
     eea:	0a 94       	dec	r0
     eec:	16 16       	cp	r1, r22
     eee:	17 06       	cpc	r1, r23
     ef0:	18 06       	cpc	r1, r24
     ef2:	09 06       	cpc	r0, r25
     ef4:	08 95       	ret

00000ef6 <__fp_pscB>:
     ef6:	00 24       	eor	r0, r0
     ef8:	0a 94       	dec	r0
     efa:	12 16       	cp	r1, r18
     efc:	13 06       	cpc	r1, r19
     efe:	14 06       	cpc	r1, r20
     f00:	05 06       	cpc	r0, r21
     f02:	08 95       	ret

00000f04 <__fp_round>:
     f04:	09 2e       	mov	r0, r25
     f06:	03 94       	inc	r0
     f08:	00 0c       	add	r0, r0
     f0a:	11 f4       	brne	.+4      	; 0xf10 <__fp_round+0xc>
     f0c:	88 23       	and	r24, r24
     f0e:	52 f0       	brmi	.+20     	; 0xf24 <__fp_round+0x20>
     f10:	bb 0f       	add	r27, r27
     f12:	40 f4       	brcc	.+16     	; 0xf24 <__fp_round+0x20>
     f14:	bf 2b       	or	r27, r31
     f16:	11 f4       	brne	.+4      	; 0xf1c <__fp_round+0x18>
     f18:	60 ff       	sbrs	r22, 0
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <__fp_round+0x20>
     f1c:	6f 5f       	subi	r22, 0xFF	; 255
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	8f 4f       	sbci	r24, 0xFF	; 255
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	08 95       	ret

00000f26 <__fp_split3>:
     f26:	57 fd       	sbrc	r21, 7
     f28:	90 58       	subi	r25, 0x80	; 128
     f2a:	44 0f       	add	r20, r20
     f2c:	55 1f       	adc	r21, r21
     f2e:	59 f0       	breq	.+22     	; 0xf46 <__fp_splitA+0x10>
     f30:	5f 3f       	cpi	r21, 0xFF	; 255
     f32:	71 f0       	breq	.+28     	; 0xf50 <__fp_splitA+0x1a>
     f34:	47 95       	ror	r20

00000f36 <__fp_splitA>:
     f36:	88 0f       	add	r24, r24
     f38:	97 fb       	bst	r25, 7
     f3a:	99 1f       	adc	r25, r25
     f3c:	61 f0       	breq	.+24     	; 0xf56 <__fp_splitA+0x20>
     f3e:	9f 3f       	cpi	r25, 0xFF	; 255
     f40:	79 f0       	breq	.+30     	; 0xf60 <__fp_splitA+0x2a>
     f42:	87 95       	ror	r24
     f44:	08 95       	ret
     f46:	12 16       	cp	r1, r18
     f48:	13 06       	cpc	r1, r19
     f4a:	14 06       	cpc	r1, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	f2 cf       	rjmp	.-28     	; 0xf34 <__fp_split3+0xe>
     f50:	46 95       	lsr	r20
     f52:	f1 df       	rcall	.-30     	; 0xf36 <__fp_splitA>
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <__fp_splitA+0x30>
     f56:	16 16       	cp	r1, r22
     f58:	17 06       	cpc	r1, r23
     f5a:	18 06       	cpc	r1, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <__fp_splitA+0xc>
     f60:	86 95       	lsr	r24
     f62:	71 05       	cpc	r23, r1
     f64:	61 05       	cpc	r22, r1
     f66:	08 94       	sec
     f68:	08 95       	ret

00000f6a <__fp_trunc>:
     f6a:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_splitA>
     f6e:	a0 f0       	brcs	.+40     	; 0xf98 <__fp_trunc+0x2e>
     f70:	be e7       	ldi	r27, 0x7E	; 126
     f72:	b9 17       	cp	r27, r25
     f74:	88 f4       	brcc	.+34     	; 0xf98 <__fp_trunc+0x2e>
     f76:	bb 27       	eor	r27, r27
     f78:	9f 38       	cpi	r25, 0x8F	; 143
     f7a:	60 f4       	brcc	.+24     	; 0xf94 <__fp_trunc+0x2a>
     f7c:	16 16       	cp	r1, r22
     f7e:	b1 1d       	adc	r27, r1
     f80:	67 2f       	mov	r22, r23
     f82:	78 2f       	mov	r23, r24
     f84:	88 27       	eor	r24, r24
     f86:	98 5f       	subi	r25, 0xF8	; 248
     f88:	f7 cf       	rjmp	.-18     	; 0xf78 <__fp_trunc+0xe>
     f8a:	86 95       	lsr	r24
     f8c:	77 95       	ror	r23
     f8e:	67 95       	ror	r22
     f90:	b1 1d       	adc	r27, r1
     f92:	93 95       	inc	r25
     f94:	96 39       	cpi	r25, 0x96	; 150
     f96:	c8 f3       	brcs	.-14     	; 0xf8a <__fp_trunc+0x20>
     f98:	08 95       	ret

00000f9a <__fp_zero>:
     f9a:	e8 94       	clt

00000f9c <__fp_szero>:
     f9c:	bb 27       	eor	r27, r27
     f9e:	66 27       	eor	r22, r22
     fa0:	77 27       	eor	r23, r23
     fa2:	cb 01       	movw	r24, r22
     fa4:	97 f9       	bld	r25, 7
     fa6:	08 95       	ret

00000fa8 <__gesf2>:
     fa8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_cmp>
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <__gesf2+0x8>
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	08 95       	ret

00000fb2 <__mulsf3>:
     fb2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__mulsf3x>
     fb6:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_round>
     fba:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     fbe:	38 f0       	brcs	.+14     	; 0xfce <__mulsf3+0x1c>
     fc0:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     fc4:	20 f0       	brcs	.+8      	; 0xfce <__mulsf3+0x1c>
     fc6:	95 23       	and	r25, r21
     fc8:	11 f0       	breq	.+4      	; 0xfce <__mulsf3+0x1c>
     fca:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
     fce:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>
     fd2:	11 24       	eor	r1, r1
     fd4:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_szero>

00000fd8 <__mulsf3x>:
     fd8:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     fdc:	70 f3       	brcs	.-36     	; 0xfba <__mulsf3+0x8>

00000fde <__mulsf3_pse>:
     fde:	95 9f       	mul	r25, r21
     fe0:	c1 f3       	breq	.-16     	; 0xfd2 <__mulsf3+0x20>
     fe2:	95 0f       	add	r25, r21
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	55 1f       	adc	r21, r21
     fe8:	62 9f       	mul	r22, r18
     fea:	f0 01       	movw	r30, r0
     fec:	72 9f       	mul	r23, r18
     fee:	bb 27       	eor	r27, r27
     ff0:	f0 0d       	add	r31, r0
     ff2:	b1 1d       	adc	r27, r1
     ff4:	63 9f       	mul	r22, r19
     ff6:	aa 27       	eor	r26, r26
     ff8:	f0 0d       	add	r31, r0
     ffa:	b1 1d       	adc	r27, r1
     ffc:	aa 1f       	adc	r26, r26
     ffe:	64 9f       	mul	r22, r20
    1000:	66 27       	eor	r22, r22
    1002:	b0 0d       	add	r27, r0
    1004:	a1 1d       	adc	r26, r1
    1006:	66 1f       	adc	r22, r22
    1008:	82 9f       	mul	r24, r18
    100a:	22 27       	eor	r18, r18
    100c:	b0 0d       	add	r27, r0
    100e:	a1 1d       	adc	r26, r1
    1010:	62 1f       	adc	r22, r18
    1012:	73 9f       	mul	r23, r19
    1014:	b0 0d       	add	r27, r0
    1016:	a1 1d       	adc	r26, r1
    1018:	62 1f       	adc	r22, r18
    101a:	83 9f       	mul	r24, r19
    101c:	a0 0d       	add	r26, r0
    101e:	61 1d       	adc	r22, r1
    1020:	22 1f       	adc	r18, r18
    1022:	74 9f       	mul	r23, r20
    1024:	33 27       	eor	r19, r19
    1026:	a0 0d       	add	r26, r0
    1028:	61 1d       	adc	r22, r1
    102a:	23 1f       	adc	r18, r19
    102c:	84 9f       	mul	r24, r20
    102e:	60 0d       	add	r22, r0
    1030:	21 1d       	adc	r18, r1
    1032:	82 2f       	mov	r24, r18
    1034:	76 2f       	mov	r23, r22
    1036:	6a 2f       	mov	r22, r26
    1038:	11 24       	eor	r1, r1
    103a:	9f 57       	subi	r25, 0x7F	; 127
    103c:	50 40       	sbci	r21, 0x00	; 0
    103e:	9a f0       	brmi	.+38     	; 0x1066 <__mulsf3_pse+0x88>
    1040:	f1 f0       	breq	.+60     	; 0x107e <__mulsf3_pse+0xa0>
    1042:	88 23       	and	r24, r24
    1044:	4a f0       	brmi	.+18     	; 0x1058 <__mulsf3_pse+0x7a>
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	bb 1f       	adc	r27, r27
    104c:	66 1f       	adc	r22, r22
    104e:	77 1f       	adc	r23, r23
    1050:	88 1f       	adc	r24, r24
    1052:	91 50       	subi	r25, 0x01	; 1
    1054:	50 40       	sbci	r21, 0x00	; 0
    1056:	a9 f7       	brne	.-22     	; 0x1042 <__mulsf3_pse+0x64>
    1058:	9e 3f       	cpi	r25, 0xFE	; 254
    105a:	51 05       	cpc	r21, r1
    105c:	80 f0       	brcs	.+32     	; 0x107e <__mulsf3_pse+0xa0>
    105e:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_inf>
    1062:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__fp_szero>
    1066:	5f 3f       	cpi	r21, 0xFF	; 255
    1068:	e4 f3       	brlt	.-8      	; 0x1062 <__mulsf3_pse+0x84>
    106a:	98 3e       	cpi	r25, 0xE8	; 232
    106c:	d4 f3       	brlt	.-12     	; 0x1062 <__mulsf3_pse+0x84>
    106e:	86 95       	lsr	r24
    1070:	77 95       	ror	r23
    1072:	67 95       	ror	r22
    1074:	b7 95       	ror	r27
    1076:	f7 95       	ror	r31
    1078:	e7 95       	ror	r30
    107a:	9f 5f       	subi	r25, 0xFF	; 255
    107c:	c1 f7       	brne	.-16     	; 0x106e <__mulsf3_pse+0x90>
    107e:	fe 2b       	or	r31, r30
    1080:	88 0f       	add	r24, r24
    1082:	91 1d       	adc	r25, r1
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	97 f9       	bld	r25, 7
    108a:	08 95       	ret

0000108c <_exit>:
    108c:	f8 94       	cli

0000108e <__stop_program>:
    108e:	ff cf       	rjmp	.-2      	; 0x108e <__stop_program>
