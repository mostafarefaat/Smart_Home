
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000ae  008000ae  00001160  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001957  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0c  00000000  00000000  00002ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e0  00000000  00000000  000037f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  000049d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000705  00000000  00000000  00004da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000981  00000000  00000000  000054ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005e2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_2>
       c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
      8a:	0c 94 3d 08 	jmp	0x107a	; 0x107a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:


void app_init(void)
{	

	DIO_init(PORT_D,PIN3,IN); /*Makes PIN3 in PORT D input pin for interrupt_1*/
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	63 e0       	ldi	r22, 0x03	; 3
      96:	84 e4       	ldi	r24, 0x44	; 68
      98:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_init>
	DIO_init(PORT_B,PIN2,IN); /*Makes PIN2 in PORT B input pin for interrup_2t*/
      9c:	40 e0       	ldi	r20, 0x00	; 0
      9e:	62 e0       	ldi	r22, 0x02	; 2
      a0:	82 e4       	ldi	r24, 0x42	; 66
      a2:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_init>
	
	LCD_4_bit_init();
      a6:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_4_bit_init>
	KEYPAD_init();
      aa:	0e 94 8f 02 	call	0x51e	; 0x51e <KEYPAD_init>
	Spi_Master_init();
      ae:	0e 94 1d 04 	call	0x83a	; 0x83a <Spi_Master_init>
	ISR_State = ISR_Not_Called;
      b2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <ISR_State>

	/*Enable the interrupts*/
	sei();
      b6:	8f b7       	in	r24, 0x3f	; 63
      b8:	80 68       	ori	r24, 0x80	; 128
      ba:	8f bf       	out	0x3f, r24	; 63
	/*Interrupt 1*/
	SET_BIT(MCUCR,PIN2);
      bc:	85 b7       	in	r24, 0x35	; 53
      be:	84 60       	ori	r24, 0x04	; 4
      c0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,PIN3);
      c2:	85 b7       	in	r24, 0x35	; 53
      c4:	88 60       	ori	r24, 0x08	; 8
      c6:	85 bf       	out	0x35, r24	; 53
	/*Interrupt 2*/
	SET_BIT(MCUCSR,PIN6);
      c8:	84 b7       	in	r24, 0x34	; 52
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	84 bf       	out	0x34, r24	; 52
	/*Interrupt 1 and Interrupt 2*/
	GICR  |= (1<<PIN5) | (1<<PIN7);
      ce:	8b b7       	in	r24, 0x3b	; 59
      d0:	80 6a       	ori	r24, 0xA0	; 160
      d2:	8b bf       	out	0x3b, r24	; 59
      d4:	08 95       	ret

000000d6 <app_start>:

			
}

void app_start(void)
{	
      d6:	08 95       	ret

000000d8 <password_check>:
	}
	
}

void password_check(void)
{
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
	
	LCD_4_bit_sendString(welcome_string);
      dc:	85 ea       	ldi	r24, 0xA5	; 165
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_4_bit_sendString>
	TIMER0_delay(1000,no_prescale);
      e4:	61 e0       	ldi	r22, 0x01	; 1
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	88 ee       	ldi	r24, 0xE8	; 232
      ea:	93 e0       	ldi	r25, 0x03	; 3
      ec:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	LCD_4_bit_sendCommand(0x01);
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	LCD_4_bit_sendString(enter_pass_string);
      f6:	86 e9       	ldi	r24, 0x96	; 150
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_4_bit_sendString>
	TIMER0_delay(1000,no_prescale);
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	88 ee       	ldi	r24, 0xE8	; 232
     104:	93 e0       	ldi	r25, 0x03	; 3
     106:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	LCD_4_bit_sendCommand(0x01);
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	
	while(password_correct == 0)
     110:	9d c0       	rjmp	.+314    	; 0x24c <password_check+0x174>
	{
		KEYPAD_start();
     112:	0e 94 47 03 	call	0x68e	; 0x68e <KEYPAD_start>
		if(x == 'c')
     116:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <x>
     11a:	83 36       	cpi	r24, 0x63	; 99
     11c:	09 f0       	breq	.+2      	; 0x120 <password_check+0x48>
     11e:	96 c0       	rjmp	.+300    	; 0x24c <password_check+0x174>
		{
			string_counter = 0;
     120:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <string_counter>
			if(new_pass == 1)
     124:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <new_pass>
     128:	81 30       	cpi	r24, 0x01	; 1
     12a:	29 f5       	brne	.+74     	; 0x176 <password_check+0x9e>
			{
			   EEPROM_write(0,pass_string[0]);
     12c:	c6 eb       	ldi	r28, 0xB6	; 182
     12e:	d0 e0       	ldi	r29, 0x00	; 0
     130:	68 81       	ld	r22, Y
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_write>
			   EEPROM_write(1,pass_string[1]);
     13a:	69 81       	ldd	r22, Y+1	; 0x01
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_write>
			   EEPROM_write(2,pass_string[2]);
     144:	6a 81       	ldd	r22, Y+2	; 0x02
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_write>
			   EEPROM_write(3,pass_string[3]);
     14e:	6b 81       	ldd	r22, Y+3	; 0x03
     150:	83 e0       	ldi	r24, 0x03	; 3
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <EEPROM_write>
			   LCD_4_bit_sendString(success_string);
     158:	80 e6       	ldi	r24, 0x60	; 96
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_4_bit_sendString>
			   TIMER0_delay(2000,no_prescale);
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	80 ed       	ldi	r24, 0xD0	; 208
     166:	97 e0       	ldi	r25, 0x07	; 7
     168:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
			   LCD_4_bit_sendCommand(0x01);
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
			   new_pass = 0;				
     172:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <new_pass>
			}
			
			 first_number = EEPROM_read(0);
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 87 02 	call	0x50e	; 0x50e <EEPROM_read>
     17e:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <first_number>
			 second_number = EEPROM_read(1);
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 87 02 	call	0x50e	; 0x50e <EEPROM_read>
     18a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <second_number>
			 third_number = EEPROM_read(2);
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 87 02 	call	0x50e	; 0x50e <EEPROM_read>
     196:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <third_number>
			 fourth_number = EEPROM_read(3);
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 87 02 	call	0x50e	; 0x50e <EEPROM_read>
     1a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <fourth_number>
			 
			if(pass_string[0] == first_number && pass_string[1] == second_number && pass_string[2] == third_number && pass_string[3] == fourth_number)
     1a6:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pass_string>
     1aa:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <first_number>
     1ae:	92 13       	cpse	r25, r18
     1b0:	21 c0       	rjmp	.+66     	; 0x1f4 <password_check+0x11c>
     1b2:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <pass_string+0x1>
     1b6:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <second_number>
     1ba:	32 13       	cpse	r19, r18
     1bc:	1b c0       	rjmp	.+54     	; 0x1f4 <password_check+0x11c>
     1be:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <pass_string+0x2>
     1c2:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <third_number>
     1c6:	32 13       	cpse	r19, r18
     1c8:	15 c0       	rjmp	.+42     	; 0x1f4 <password_check+0x11c>
     1ca:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <pass_string+0x3>
     1ce:	82 13       	cpse	r24, r18
     1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <password_check+0x11c>
			{
				LCD_4_bit_sendString(access_string);
     1d2:	87 e8       	ldi	r24, 0x87	; 135
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_4_bit_sendString>
				TIMER0_delay(2000,no_prescale);
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	80 ed       	ldi	r24, 0xD0	; 208
     1e0:	97 e0       	ldi	r25, 0x07	; 7
     1e2:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
				LCD_4_bit_sendCommand(0x01);
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
				password_correct = 1;	
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <password_correct>
     1f2:	2c c0       	rjmp	.+88     	; 0x24c <password_check+0x174>
			}
			else if(pass_string[0] == '0' && pass_string[1] == '0' && pass_string[2] == '0' && pass_string[3] == '0')
     1f4:	90 33       	cpi	r25, 0x30	; 48
     1f6:	e9 f4       	brne	.+58     	; 0x232 <password_check+0x15a>
     1f8:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <pass_string+0x1>
     1fc:	80 33       	cpi	r24, 0x30	; 48
     1fe:	c9 f4       	brne	.+50     	; 0x232 <password_check+0x15a>
     200:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <pass_string+0x2>
     204:	80 33       	cpi	r24, 0x30	; 48
     206:	a9 f4       	brne	.+42     	; 0x232 <password_check+0x15a>
     208:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <pass_string+0x3>
     20c:	80 33       	cpi	r24, 0x30	; 48
     20e:	89 f4       	brne	.+34     	; 0x232 <password_check+0x15a>
			{
				LCD_4_bit_sendString(reset_string);
     210:	88 e7       	ldi	r24, 0x78	; 120
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_4_bit_sendString>
				new_pass = 1;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <new_pass>
				TIMER0_delay(5000,no_prescale);
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	88 e8       	ldi	r24, 0x88	; 136
     224:	93 e1       	ldi	r25, 0x13	; 19
     226:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
				LCD_4_bit_sendCommand(0x01);
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
     230:	0d c0       	rjmp	.+26     	; 0x24c <password_check+0x174>
			}
			else
			{
				LCD_4_bit_sendString(wrong_string);
     232:	8d e6       	ldi	r24, 0x6D	; 109
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_4_bit_sendString>
				TIMER0_delay(2000,no_prescale);
     23a:	61 e0       	ldi	r22, 0x01	; 1
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	80 ed       	ldi	r24, 0xD0	; 208
     240:	97 e0       	ldi	r25, 0x07	; 7
     242:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
				LCD_4_bit_sendCommand(0x01);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x01);
	LCD_4_bit_sendString(enter_pass_string);
	TIMER0_delay(1000,no_prescale);
	LCD_4_bit_sendCommand(0x01);
	
	while(password_correct == 0)
     24c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <password_correct>
     250:	88 23       	and	r24, r24
     252:	09 f4       	brne	.+2      	; 0x256 <password_check+0x17e>
     254:	5e cf       	rjmp	.-324    	; 0x112 <password_check+0x3a>
				LCD_4_bit_sendCommand(0x01);
			}
			
		}
	}	
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <main>:



int main(void)
{
	app_init();
     25c:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	
	password_check();
     260:	0e 94 6c 00 	call	0xd8	; 0xd8 <password_check>
	if(password_correct)
     264:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <password_correct>
     268:	88 23       	and	r24, r24
     26a:	49 f0       	breq	.+18     	; 0x27e <main+0x22>
	{
		Spi_Master_send(Open_Door);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	0e 94 3d 04 	call	0x87a	; 0x87a <Spi_Master_send>
		Spi_Master_send(Turn_On);
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	0e 94 3d 04 	call	0x87a	; 0x87a <Spi_Master_send>
		while(1)
		{
			app_start();
     278:	0e 94 6b 00 	call	0xd6	; 0xd6 <app_start>
     27c:	fd cf       	rjmp	.-6      	; 0x278 <main+0x1c>
		}		
	}
}
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	08 95       	ret

00000284 <__vector_2>:
ISR(EXT_INT_1)
{
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	2f 93       	push	r18
     290:	3f 93       	push	r19
     292:	4f 93       	push	r20
     294:	5f 93       	push	r21
     296:	6f 93       	push	r22
     298:	7f 93       	push	r23
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
     29e:	af 93       	push	r26
     2a0:	bf 93       	push	r27
     2a2:	ef 93       	push	r30
     2a4:	ff 93       	push	r31
	Spi_Master_send(Close_Door);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 3d 04 	call	0x87a	; 0x87a <Spi_Master_send>
}
     2ac:	ff 91       	pop	r31
     2ae:	ef 91       	pop	r30
     2b0:	bf 91       	pop	r27
     2b2:	af 91       	pop	r26
     2b4:	9f 91       	pop	r25
     2b6:	8f 91       	pop	r24
     2b8:	7f 91       	pop	r23
     2ba:	6f 91       	pop	r22
     2bc:	5f 91       	pop	r21
     2be:	4f 91       	pop	r20
     2c0:	3f 91       	pop	r19
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <__vector_3>:
ISR(EXT_INT_2)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	2f 93       	push	r18
     2da:	3f 93       	push	r19
     2dc:	4f 93       	push	r20
     2de:	5f 93       	push	r21
     2e0:	6f 93       	push	r22
     2e2:	7f 93       	push	r23
     2e4:	8f 93       	push	r24
     2e6:	9f 93       	push	r25
     2e8:	af 93       	push	r26
     2ea:	bf 93       	push	r27
     2ec:	ef 93       	push	r30
     2ee:	ff 93       	push	r31
	Spi_Master_send(Turn_Off);
     2f0:	83 e0       	ldi	r24, 0x03	; 3
     2f2:	0e 94 3d 04 	call	0x87a	; 0x87a <Spi_Master_send>
}
     2f6:	ff 91       	pop	r31
     2f8:	ef 91       	pop	r30
     2fa:	bf 91       	pop	r27
     2fc:	af 91       	pop	r26
     2fe:	9f 91       	pop	r25
     300:	8f 91       	pop	r24
     302:	7f 91       	pop	r23
     304:	6f 91       	pop	r22
     306:	5f 91       	pop	r21
     308:	4f 91       	pop	r20
     30a:	3f 91       	pop	r19
     30c:	2f 91       	pop	r18
     30e:	0f 90       	pop	r0
     310:	0f be       	out	0x3f, r0	; 63
     312:	0f 90       	pop	r0
     314:	1f 90       	pop	r1
     316:	18 95       	reti

00000318 <DIO_init>:

// global variables
// functions definitions
void DIO_init(uint8_t port_number, uint8_t pin_number, uint8_t direction)
{
	switch(port_number)
     318:	82 34       	cpi	r24, 0x42	; 66
     31a:	29 f1       	breq	.+74     	; 0x366 <DIO_init+0x4e>
     31c:	18 f4       	brcc	.+6      	; 0x324 <DIO_init+0xc>
     31e:	81 34       	cpi	r24, 0x41	; 65
     320:	39 f0       	breq	.+14     	; 0x330 <DIO_init+0x18>
     322:	08 95       	ret
     324:	83 34       	cpi	r24, 0x43	; 67
     326:	d1 f1       	breq	.+116    	; 0x39c <DIO_init+0x84>
     328:	84 34       	cpi	r24, 0x44	; 68
     32a:	09 f4       	brne	.+2      	; 0x32e <DIO_init+0x16>
     32c:	52 c0       	rjmp	.+164    	; 0x3d2 <DIO_init+0xba>
     32e:	08 95       	ret
	{
		case PORT_A:
		if(direction == OUT)
     330:	41 30       	cpi	r20, 0x01	; 1
     332:	59 f4       	brne	.+22     	; 0x34a <DIO_init+0x32>
		{
			//DDRA |= (1<<pin_number); //output
			SET_BIT(DDRA, pin_number);
     334:	2a b3       	in	r18, 0x1a	; 26
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_init+0x28>
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	6a 95       	dec	r22
     342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_init+0x24>
     344:	82 2b       	or	r24, r18
     346:	8a bb       	out	0x1a, r24	; 26
     348:	08 95       	ret
			
		}
		else if(direction == IN)
     34a:	41 11       	cpse	r20, r1
     34c:	5c c0       	rjmp	.+184    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			//DDRA &= ~(1<<pin_number); // input
			ClEAR_BIT(DDRA, pin_number);
     34e:	2a b3       	in	r18, 0x1a	; 26
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_init+0x42>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	6a 95       	dec	r22
     35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_init+0x3e>
     35e:	80 95       	com	r24
     360:	82 23       	and	r24, r18
     362:	8a bb       	out	0x1a, r24	; 26
     364:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_B:
		if(direction == OUT)
     366:	41 30       	cpi	r20, 0x01	; 1
     368:	59 f4       	brne	.+22     	; 0x380 <DIO_init+0x68>
		{
			//DDRB |= (1<<pin_number);
			SET_BIT(DDRB, pin_number);
     36a:	27 b3       	in	r18, 0x17	; 23
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_init+0x5e>
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	6a 95       	dec	r22
     378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_init+0x5a>
     37a:	82 2b       	or	r24, r18
     37c:	87 bb       	out	0x17, r24	; 23
     37e:	08 95       	ret
		}
		else if(direction == IN)
     380:	41 11       	cpse	r20, r1
     382:	41 c0       	rjmp	.+130    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			//DDRB &= ~(1<<pin_number);
			ClEAR_BIT(DDRB, pin_number);
     384:	27 b3       	in	r18, 0x17	; 23
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_init+0x78>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	6a 95       	dec	r22
     392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_init+0x74>
     394:	80 95       	com	r24
     396:	82 23       	and	r24, r18
     398:	87 bb       	out	0x17, r24	; 23
     39a:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_C:
		if(direction == OUT)
     39c:	41 30       	cpi	r20, 0x01	; 1
     39e:	59 f4       	brne	.+22     	; 0x3b6 <DIO_init+0x9e>
		{
			//DDRC |= (1<<pin_number);
			SET_BIT(DDRC, pin_number);
     3a0:	24 b3       	in	r18, 0x14	; 20
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_init+0x94>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	6a 95       	dec	r22
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_init+0x90>
     3b0:	82 2b       	or	r24, r18
     3b2:	84 bb       	out	0x14, r24	; 20
     3b4:	08 95       	ret
		}
		else if(direction == IN)
     3b6:	41 11       	cpse	r20, r1
     3b8:	26 c0       	rjmp	.+76     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			//DDRC &= ~(1<<pin_number);
			ClEAR_BIT(DDRC, pin_number);
     3ba:	24 b3       	in	r18, 0x14	; 20
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_init+0xae>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	6a 95       	dec	r22
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_init+0xaa>
     3ca:	80 95       	com	r24
     3cc:	82 23       	and	r24, r18
     3ce:	84 bb       	out	0x14, r24	; 20
     3d0:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_D:
		if(direction == OUT)
     3d2:	41 30       	cpi	r20, 0x01	; 1
     3d4:	59 f4       	brne	.+22     	; 0x3ec <DIO_init+0xd4>
		{
			//DDRD |= (1<<pin_number);
			SET_BIT(DDRD, pin_number);
     3d6:	21 b3       	in	r18, 0x11	; 17
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_init+0xca>
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	6a 95       	dec	r22
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_init+0xc6>
     3e6:	82 2b       	or	r24, r18
     3e8:	81 bb       	out	0x11, r24	; 17
     3ea:	08 95       	ret
		}
		else if(direction == IN)
     3ec:	41 11       	cpse	r20, r1
     3ee:	0b c0       	rjmp	.+22     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			//DDRD &= ~(1<<pin_number);
			ClEAR_BIT(DDRD, pin_number);
     3f0:	21 b3       	in	r18, 0x11	; 17
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_init+0xe4>
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	6a 95       	dec	r22
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_init+0xe0>
     400:	80 95       	com	r24
     402:	82 23       	and	r24, r18
     404:	81 bb       	out	0x11, r24	; 17
     406:	08 95       	ret

00000408 <DIO_write>:
	}
}

void DIO_write(uint8_t port_number, uint8_t pin_number, uint8_t value)
{
		switch(port_number)
     408:	82 34       	cpi	r24, 0x42	; 66
     40a:	29 f1       	breq	.+74     	; 0x456 <DIO_write+0x4e>
     40c:	18 f4       	brcc	.+6      	; 0x414 <DIO_write+0xc>
     40e:	81 34       	cpi	r24, 0x41	; 65
     410:	39 f0       	breq	.+14     	; 0x420 <DIO_write+0x18>
     412:	08 95       	ret
     414:	83 34       	cpi	r24, 0x43	; 67
     416:	d1 f1       	breq	.+116    	; 0x48c <DIO_write+0x84>
     418:	84 34       	cpi	r24, 0x44	; 68
     41a:	09 f4       	brne	.+2      	; 0x41e <DIO_write+0x16>
     41c:	52 c0       	rjmp	.+164    	; 0x4c2 <DIO_write+0xba>
     41e:	08 95       	ret
		{
			case PORT_A:
			if(value == HIGH)
     420:	41 30       	cpi	r20, 0x01	; 1
     422:	59 f4       	brne	.+22     	; 0x43a <DIO_write+0x32>
			{
				//PORTA |= (1<<pin_number); //write 1
				SET_BIT(PORTA, pin_number);
     424:	2b b3       	in	r18, 0x1b	; 27
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_write+0x28>
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	6a 95       	dec	r22
     432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_write+0x24>
     434:	82 2b       	or	r24, r18
     436:	8b bb       	out	0x1b, r24	; 27
     438:	08 95       	ret
			}
			else if(value == LOW)
     43a:	41 11       	cpse	r20, r1
     43c:	5c c0       	rjmp	.+184    	; 0x4f6 <DIO_write+0xee>
			{
				//PORTA &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTA, pin_number);
     43e:	2b b3       	in	r18, 0x1b	; 27
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_write+0x42>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	6a 95       	dec	r22
     44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_write+0x3e>
     44e:	80 95       	com	r24
     450:	82 23       	and	r24, r18
     452:	8b bb       	out	0x1b, r24	; 27
     454:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_B:
			if(value == HIGH)
     456:	41 30       	cpi	r20, 0x01	; 1
     458:	59 f4       	brne	.+22     	; 0x470 <DIO_write+0x68>
			{
				//PORTB |= (1<<pin_number); //write 1
				SET_BIT(PORTB, pin_number);
     45a:	28 b3       	in	r18, 0x18	; 24
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_write+0x5e>
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	6a 95       	dec	r22
     468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_write+0x5a>
     46a:	82 2b       	or	r24, r18
     46c:	88 bb       	out	0x18, r24	; 24
     46e:	08 95       	ret
			}
			else if(value == LOW)
     470:	41 11       	cpse	r20, r1
     472:	41 c0       	rjmp	.+130    	; 0x4f6 <DIO_write+0xee>
			{
				//PORTB &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTB, pin_number);
     474:	28 b3       	in	r18, 0x18	; 24
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_write+0x78>
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	6a 95       	dec	r22
     482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_write+0x74>
     484:	80 95       	com	r24
     486:	82 23       	and	r24, r18
     488:	88 bb       	out	0x18, r24	; 24
     48a:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_C:
			if(value == HIGH)
     48c:	41 30       	cpi	r20, 0x01	; 1
     48e:	59 f4       	brne	.+22     	; 0x4a6 <DIO_write+0x9e>
			{
				//PORTC |= (1<<pin_number); //write 1
				SET_BIT(PORTC, pin_number);
     490:	25 b3       	in	r18, 0x15	; 21
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_write+0x94>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	6a 95       	dec	r22
     49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_write+0x90>
     4a0:	82 2b       	or	r24, r18
     4a2:	85 bb       	out	0x15, r24	; 21
     4a4:	08 95       	ret
			}
			else if(value == LOW)
     4a6:	41 11       	cpse	r20, r1
     4a8:	26 c0       	rjmp	.+76     	; 0x4f6 <DIO_write+0xee>
			{
				//PORTC &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTC, pin_number);
     4aa:	25 b3       	in	r18, 0x15	; 21
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_write+0xae>
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	6a 95       	dec	r22
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_write+0xaa>
     4ba:	80 95       	com	r24
     4bc:	82 23       	and	r24, r18
     4be:	85 bb       	out	0x15, r24	; 21
     4c0:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_D:
			if(value == HIGH)
     4c2:	41 30       	cpi	r20, 0x01	; 1
     4c4:	59 f4       	brne	.+22     	; 0x4dc <DIO_write+0xd4>
			{
				//PORTD |= (1<<pin_number); //write 1
				SET_BIT(PORTD, pin_number);
     4c6:	22 b3       	in	r18, 0x12	; 18
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_write+0xca>
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	6a 95       	dec	r22
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_write+0xc6>
     4d6:	82 2b       	or	r24, r18
     4d8:	82 bb       	out	0x12, r24	; 18
     4da:	08 95       	ret
			}
			else if(value == LOW)
     4dc:	41 11       	cpse	r20, r1
     4de:	0b c0       	rjmp	.+22     	; 0x4f6 <DIO_write+0xee>
			{
				//PORTD &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTD, pin_number);
     4e0:	22 b3       	in	r18, 0x12	; 18
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0xe4>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0xe0>
     4f0:	80 95       	com	r24
     4f2:	82 23       	and	r24, r18
     4f4:	82 bb       	out	0x12, r24	; 18
     4f6:	08 95       	ret

000004f8 <EEPROM_write>:
 */ 
#include "eeprom.h"

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	while(EECR & (1<<EEWE));
     4f8:	e1 99       	sbic	0x1c, 1	; 28
     4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <EEPROM_write>
	
	EEARL = uiAddress;
     4fc:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     4fe:	6d bb       	out	0x1d, r22	; 29
	
	EECR |= (1<<EEMWE);
     500:	8c b3       	in	r24, 0x1c	; 28
     502:	84 60       	ori	r24, 0x04	; 4
     504:	8c bb       	out	0x1c, r24	; 28
	
	EECR |= (1<<EEWE);
     506:	8c b3       	in	r24, 0x1c	; 28
     508:	82 60       	ori	r24, 0x02	; 2
     50a:	8c bb       	out	0x1c, r24	; 28
     50c:	08 95       	ret

0000050e <EEPROM_read>:
}
uint8_t EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEWE));
     50e:	e1 99       	sbic	0x1c, 1	; 28
     510:	fe cf       	rjmp	.-4      	; 0x50e <EEPROM_read>
	
	EEARL = uiAddress;
     512:	8e bb       	out	0x1e, r24	; 30
	
	EECR |= (1<<EERE);
     514:	8c b3       	in	r24, 0x1c	; 28
     516:	81 60       	ori	r24, 0x01	; 1
     518:	8c bb       	out	0x1c, r24	; 28
	
	return EEDR;
     51a:	8d b3       	in	r24, 0x1d	; 29
	
	
     51c:	08 95       	ret

0000051e <KEYPAD_init>:
uint8_t key;


void KEYPAD_init(void)
{
	DDRA = 0x0F;
     51e:	8f e0       	ldi	r24, 0x0F	; 15
     520:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     522:	8f ef       	ldi	r24, 0xFF	; 255
     524:	87 bb       	out	0x17, r24	; 23
	PORTA = 0xFF;
     526:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x00;
     528:	18 ba       	out	0x18, r1	; 24
     52a:	08 95       	ret

0000052c <GET_KEY>:
		
}
uint8_t GET_KEY(void)
{
			/*First ROW*/
	if(READ_BIT(PINA,PIN4) == 0)
     52c:	cc 99       	sbic	0x19, 4	; 25
     52e:	06 c0       	rjmp	.+12     	; 0x53c <GET_KEY+0x10>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     530:	cc 9b       	sbis	0x19, 4	; 25
     532:	fe cf       	rjmp	.-4      	; 0x530 <GET_KEY+0x4>
		key = '7';
     534:	87 e3       	ldi	r24, 0x37	; 55
     536:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     53a:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     53c:	cd 99       	sbic	0x19, 5	; 25
     53e:	06 c0       	rjmp	.+12     	; 0x54c <GET_KEY+0x20>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     540:	cd 9b       	sbis	0x19, 5	; 25
     542:	fe cf       	rjmp	.-4      	; 0x540 <GET_KEY+0x14>
		key = '8';
     544:	88 e3       	ldi	r24, 0x38	; 56
     546:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     54a:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     54c:	ce 99       	sbic	0x19, 6	; 25
     54e:	06 c0       	rjmp	.+12     	; 0x55c <GET_KEY+0x30>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     550:	ce 9b       	sbis	0x19, 6	; 25
     552:	fe cf       	rjmp	.-4      	; 0x550 <GET_KEY+0x24>
		key = '9';
     554:	89 e3       	ldi	r24, 0x39	; 57
     556:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     55a:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     55c:	cf 99       	sbic	0x19, 7	; 25
     55e:	06 c0       	rjmp	.+12     	; 0x56c <GET_KEY+0x40>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     560:	cf 9b       	sbis	0x19, 7	; 25
     562:	fe cf       	rjmp	.-4      	; 0x560 <GET_KEY+0x34>
		key = 47; /* / Division */
     564:	8f e2       	ldi	r24, 0x2F	; 47
     566:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     56a:	08 95       	ret
	}

	SET_BIT(PORTA,PIN0);
     56c:	8b b3       	in	r24, 0x1b	; 27
     56e:	81 60       	ori	r24, 0x01	; 1
     570:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8a e0       	ldi	r24, 0x0A	; 10
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
			/*Second ROW*/
	ClEAR_BIT(PORTA,PIN1);
     57e:	8b b3       	in	r24, 0x1b	; 27
     580:	8d 7f       	andi	r24, 0xFD	; 253
     582:	8b bb       	out	0x1b, r24	; 27
	if(READ_BIT(PINA,PIN4) == 0)
     584:	cc 99       	sbic	0x19, 4	; 25
     586:	06 c0       	rjmp	.+12     	; 0x594 <GET_KEY+0x68>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     588:	cc 9b       	sbis	0x19, 4	; 25
     58a:	fe cf       	rjmp	.-4      	; 0x588 <GET_KEY+0x5c>
		key = '4';
     58c:	84 e3       	ldi	r24, 0x34	; 52
     58e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;	
     592:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     594:	cd 99       	sbic	0x19, 5	; 25
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <GET_KEY+0x78>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     598:	cd 9b       	sbis	0x19, 5	; 25
     59a:	fe cf       	rjmp	.-4      	; 0x598 <GET_KEY+0x6c>
		key = '5';
     59c:	85 e3       	ldi	r24, 0x35	; 53
     59e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5a2:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     5a4:	ce 99       	sbic	0x19, 6	; 25
     5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <GET_KEY+0x88>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     5a8:	ce 9b       	sbis	0x19, 6	; 25
     5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <GET_KEY+0x7c>
		key = '6';
     5ac:	86 e3       	ldi	r24, 0x36	; 54
     5ae:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5b2:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     5b4:	cf 99       	sbic	0x19, 7	; 25
     5b6:	06 c0       	rjmp	.+12     	; 0x5c4 <GET_KEY+0x98>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     5b8:	cf 9b       	sbis	0x19, 7	; 25
     5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <GET_KEY+0x8c>
		key = 42;    // * multiply
     5bc:	8a e2       	ldi	r24, 0x2A	; 42
     5be:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5c2:	08 95       	ret
	}
	SET_BIT(PORTA,PIN1);
     5c4:	8b b3       	in	r24, 0x1b	; 27
     5c6:	82 60       	ori	r24, 0x02	; 2
     5c8:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	8a e0       	ldi	r24, 0x0A	; 10
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
			/*Third ROW*/
	ClEAR_BIT(PORTA,PIN2);
     5d6:	8b b3       	in	r24, 0x1b	; 27
     5d8:	8b 7f       	andi	r24, 0xFB	; 251
     5da:	8b bb       	out	0x1b, r24	; 27
	if(READ_BIT(PINA,PIN4) == 0)
     5dc:	cc 99       	sbic	0x19, 4	; 25
     5de:	06 c0       	rjmp	.+12     	; 0x5ec <GET_KEY+0xc0>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     5e0:	cc 9b       	sbis	0x19, 4	; 25
     5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <GET_KEY+0xb4>
		key = '1';
     5e4:	81 e3       	ldi	r24, 0x31	; 49
     5e6:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5ea:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     5ec:	cd 99       	sbic	0x19, 5	; 25
     5ee:	06 c0       	rjmp	.+12     	; 0x5fc <GET_KEY+0xd0>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     5f0:	cd 9b       	sbis	0x19, 5	; 25
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <GET_KEY+0xc4>
		key = '2';
     5f4:	82 e3       	ldi	r24, 0x32	; 50
     5f6:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     5fa:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     5fc:	ce 99       	sbic	0x19, 6	; 25
     5fe:	06 c0       	rjmp	.+12     	; 0x60c <GET_KEY+0xe0>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     600:	ce 9b       	sbis	0x19, 6	; 25
     602:	fe cf       	rjmp	.-4      	; 0x600 <GET_KEY+0xd4>
		key = '3';
     604:	83 e3       	ldi	r24, 0x33	; 51
     606:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     60a:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     60c:	cf 99       	sbic	0x19, 7	; 25
     60e:	06 c0       	rjmp	.+12     	; 0x61c <GET_KEY+0xf0>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     610:	cf 9b       	sbis	0x19, 7	; 25
     612:	fe cf       	rjmp	.-4      	; 0x610 <GET_KEY+0xe4>
		key = 45; // - Subtract
     614:	8d e2       	ldi	r24, 0x2D	; 45
     616:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     61a:	08 95       	ret
	}
	SET_BIT(PORTA,PIN2);
     61c:	8b b3       	in	r24, 0x1b	; 27
     61e:	84 60       	ori	r24, 0x04	; 4
     620:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);
     622:	61 e0       	ldi	r22, 0x01	; 1
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	8a e0       	ldi	r24, 0x0A	; 10
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
			/*Fourth ROW*/
	ClEAR_BIT(PORTA,PIN3);
     62e:	8b b3       	in	r24, 0x1b	; 27
     630:	87 7f       	andi	r24, 0xF7	; 247
     632:	8b bb       	out	0x1b, r24	; 27
	if(READ_BIT(PINA,PIN4) == 0)
     634:	cc 99       	sbic	0x19, 4	; 25
     636:	06 c0       	rjmp	.+12     	; 0x644 <GET_KEY+0x118>
	{
		while(READ_BIT(PINA,PIN4) == 0);
     638:	cc 9b       	sbis	0x19, 4	; 25
     63a:	fe cf       	rjmp	.-4      	; 0x638 <GET_KEY+0x10c>
		key = 'c';
     63c:	83 e6       	ldi	r24, 0x63	; 99
     63e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     642:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN5) == 0)
     644:	cd 99       	sbic	0x19, 5	; 25
     646:	06 c0       	rjmp	.+12     	; 0x654 <GET_KEY+0x128>
	{
		while(READ_BIT(PINA,PIN5) == 0);
     648:	cd 9b       	sbis	0x19, 5	; 25
     64a:	fe cf       	rjmp	.-4      	; 0x648 <GET_KEY+0x11c>
		key = '0';
     64c:	80 e3       	ldi	r24, 0x30	; 48
     64e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     652:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN6) == 0)
     654:	ce 99       	sbic	0x19, 6	; 25
     656:	06 c0       	rjmp	.+12     	; 0x664 <GET_KEY+0x138>
	{
		while(READ_BIT(PINA,PIN6) == 0);
     658:	ce 9b       	sbis	0x19, 6	; 25
     65a:	fe cf       	rjmp	.-4      	; 0x658 <GET_KEY+0x12c>
		key = '=';
     65c:	8d e3       	ldi	r24, 0x3D	; 61
     65e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;
     662:	08 95       	ret
	}
	else if(READ_BIT(PINA,PIN7) == 0)
     664:	cf 99       	sbic	0x19, 7	; 25
     666:	06 c0       	rjmp	.+12     	; 0x674 <GET_KEY+0x148>
	{
		while(READ_BIT(PINA,PIN7) == 0);
     668:	cf 9b       	sbis	0x19, 7	; 25
     66a:	fe cf       	rjmp	.-4      	; 0x668 <GET_KEY+0x13c>
		key = 43;  // + Add
     66c:	8b e2       	ldi	r24, 0x2B	; 43
     66e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
		return key;		
     672:	08 95       	ret
	}
	SET_BIT(PORTA,PIN3);
     674:	8b b3       	in	r24, 0x1b	; 27
     676:	88 60       	ori	r24, 0x08	; 8
     678:	8b bb       	out	0x1b, r24	; 27
	TIMER0_delay(10,no_prescale);	
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	8a e0       	ldi	r24, 0x0A	; 10
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
		
	key = '_';
     686:	8f e5       	ldi	r24, 0x5F	; 95
     688:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <key>
	return key;	
	
}
     68c:	08 95       	ret

0000068e <KEYPAD_start>:
void KEYPAD_start(void)
{
	ClEAR_BIT(PORTA,PIN0);
     68e:	8b b3       	in	r24, 0x1b	; 27
     690:	8e 7f       	andi	r24, 0xFE	; 254
     692:	8b bb       	out	0x1b, r24	; 27
	if(PINA != 0xFF )
     694:	89 b3       	in	r24, 0x19	; 25
     696:	8f 3f       	cpi	r24, 0xFF	; 255
     698:	01 f1       	breq	.+64     	; 0x6da <KEYPAD_start+0x4c>
	{
		x = GET_KEY();
     69a:	0e 94 96 02 	call	0x52c	; 0x52c <GET_KEY>
     69e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <x>
		if(x != '_')
     6a2:	8f 35       	cpi	r24, 0x5F	; 95
     6a4:	a1 f0       	breq	.+40     	; 0x6ce <KEYPAD_start+0x40>
		{
			if(x == 'c') 
     6a6:	83 36       	cpi	r24, 0x63	; 99
     6a8:	21 f4       	brne	.+8      	; 0x6b2 <KEYPAD_start+0x24>
			{
				LCD_4_bit_sendCommand(0x01);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
     6b0:	0e c0       	rjmp	.+28     	; 0x6ce <KEYPAD_start+0x40>
			}
			
			else
			{
				if(string_counter <= 3)
     6b2:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <string_counter>
     6b6:	94 30       	cpi	r25, 0x04	; 4
     6b8:	40 f4       	brcc	.+16     	; 0x6ca <KEYPAD_start+0x3c>
				{
					pass_string[string_counter] = x;
     6ba:	e9 2f       	mov	r30, r25
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	ea 54       	subi	r30, 0x4A	; 74
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	80 83       	st	Z, r24
					string_counter++;
     6c4:	9f 5f       	subi	r25, 0xFF	; 255
     6c6:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <string_counter>
				}
				
				LCD_4_bit_sendChar(x);
     6ca:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_4_bit_sendChar>
			}
			
		}
		TIMER0_delay(100,no_prescale);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	84 e6       	ldi	r24, 0x64	; 100
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
     6da:	08 95       	ret

000006dc <LCD_4_bit_sendCommand>:
	LCD_4_bit_sendCommand(0x01);	//clear Display
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
	
}
void LCD_4_bit_sendCommand(uint8_t command)
{
     6dc:	cf 93       	push	r28
     6de:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command & 0xF0); //Sending upper nibble
     6e0:	85 b3       	in	r24, 0x15	; 21
     6e2:	8f 70       	andi	r24, 0x0F	; 15
     6e4:	9c 2f       	mov	r25, r28
     6e6:	90 7f       	andi	r25, 0xF0	; 240
     6e8:	89 2b       	or	r24, r25
     6ea:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port &= ~(1<<RS); // RS PIN = 0 command register
     6ec:	82 b3       	in	r24, 0x12	; 18
     6ee:	8e 7f       	andi	r24, 0xFE	; 254
     6f0:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
     6f2:	82 b3       	in	r24, 0x12	; 18
     6f4:	8d 7f       	andi	r24, 0xFD	; 253
     6f6:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     6f8:	82 b3       	in	r24, 0x12	; 18
     6fa:	84 60       	ori	r24, 0x04	; 4
     6fc:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     70a:	82 b3       	in	r24, 0x12	; 18
     70c:	8b 7f       	andi	r24, 0xFB	; 251
     70e:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command << 4); //Sending upper nibble
     71c:	25 b3       	in	r18, 0x15	; 21
     71e:	30 e1       	ldi	r19, 0x10	; 16
     720:	c3 9f       	mul	r28, r19
     722:	c0 01       	movw	r24, r0
     724:	11 24       	eor	r1, r1
     726:	92 2f       	mov	r25, r18
     728:	9f 70       	andi	r25, 0x0F	; 15
     72a:	89 2b       	or	r24, r25
     72c:	85 bb       	out	0x15, r24	; 21
		
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     72e:	82 b3       	in	r24, 0x12	; 18
     730:	84 60       	ori	r24, 0x04	; 4
     732:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     740:	82 b3       	in	r24, 0x12	; 18
     742:	8b 7f       	andi	r24, 0xFB	; 251
     744:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
}
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <LCD_4_bit_init>:
	
}

void LCD_4_bit_init(void)
{
	LCD_Command_Port_Dir |= (1<<0) | (1<<1) | (1<<2);  //Make PIN0, PIN1, PIN2 in PORTD outputs
     756:	81 b3       	in	r24, 0x11	; 17
     758:	87 60       	ori	r24, 0x07	; 7
     75a:	81 bb       	out	0x11, r24	; 17
	LCD_Data_PORT_Dir |= (1<<4) | (1<<5) | (1<<6) | (1<<7); //Make PIN4, PIN5, PIN6, PIN7 in PORTC outputs
     75c:	84 b3       	in	r24, 0x14	; 20
     75e:	80 6f       	ori	r24, 0xF0	; 240
     760:	84 bb       	out	0x14, r24	; 20
	TIMER_set(Normal);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 51 04 	call	0x8a2	; 0x8a2 <TIMER_set>
	TIMER0_delay(20, no_prescale);	//LCD power ON delay always >15ms
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	84 e1       	ldi	r24, 0x14	; 20
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	LCD_4_bit_sendCommand(0x02);	//Send for 4 bit initialization of the LCD
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x28);	//initialization of 5x7 LCD in 4 bit mode
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x0C);	//Display ON, Cursor OFF
     780:	8c e0       	ldi	r24, 0x0C	; 12
     782:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x06);	//Auto increment cursor
     786:	86 e0       	ldi	r24, 0x06	; 6
     788:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x01);	//clear Display
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
     792:	80 e8       	ldi	r24, 0x80	; 128
     794:	0e 94 6e 03 	call	0x6dc	; 0x6dc <LCD_4_bit_sendCommand>
     798:	08 95       	ret

0000079a <LCD_4_bit_sendChar>:
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
	
	TIMER0_delay(1,no_prescale);
}
void LCD_4_bit_sendChar(uint8_t character)
{
     79a:	cf 93       	push	r28
     79c:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character & 0xF0); //Sending upper nibble
     79e:	85 b3       	in	r24, 0x15	; 21
     7a0:	8f 70       	andi	r24, 0x0F	; 15
     7a2:	9c 2f       	mov	r25, r28
     7a4:	90 7f       	andi	r25, 0xF0	; 240
     7a6:	89 2b       	or	r24, r25
     7a8:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<RS); // RS PIN = 1 data register
     7aa:	82 b3       	in	r24, 0x12	; 18
     7ac:	81 60       	ori	r24, 0x01	; 1
     7ae:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
     7b0:	82 b3       	in	r24, 0x12	; 18
     7b2:	8d 7f       	andi	r24, 0xFD	; 253
     7b4:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     7b6:	82 b3       	in	r24, 0x12	; 18
     7b8:	84 60       	ori	r24, 0x04	; 4
     7ba:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     7c8:	82 b3       	in	r24, 0x12	; 18
     7ca:	8b 7f       	andi	r24, 0xFB	; 251
     7cc:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character << 4); //Sending upper nibble
     7da:	25 b3       	in	r18, 0x15	; 21
     7dc:	30 e1       	ldi	r19, 0x10	; 16
     7de:	c3 9f       	mul	r28, r19
     7e0:	c0 01       	movw	r24, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	92 2f       	mov	r25, r18
     7e6:	9f 70       	andi	r25, 0x0F	; 15
     7e8:	89 2b       	or	r24, r25
     7ea:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
     7ec:	82 b3       	in	r24, 0x12	; 18
     7ee:	84 60       	ori	r24, 0x04	; 4
     7f0:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
     7fe:	82 b3       	in	r24, 0x12	; 18
     800:	8b 7f       	andi	r24, 0xFB	; 251
     802:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 b3 04 	call	0x966	; 0x966 <TIMER0_delay>
}
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <LCD_4_bit_sendString>:
void LCD_4_bit_sendString(uint8_t *str)
{
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	8c 01       	movw	r16, r24
	uint8_t i;

	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
     81c:	c0 e0       	ldi	r28, 0x00	; 0
     81e:	03 c0       	rjmp	.+6      	; 0x826 <LCD_4_bit_sendString+0x12>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
     820:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_4_bit_sendChar>
}
void LCD_4_bit_sendString(uint8_t *str)
{
	uint8_t i;

	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
     824:	cf 5f       	subi	r28, 0xFF	; 255
     826:	f8 01       	movw	r30, r16
     828:	ec 0f       	add	r30, r28
     82a:	f1 1d       	adc	r31, r1
     82c:	80 81       	ld	r24, Z
     82e:	81 11       	cpse	r24, r1
     830:	f7 cf       	rjmp	.-18     	; 0x820 <LCD_4_bit_sendString+0xc>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
	}
	
}
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	08 95       	ret

0000083a <Spi_Master_init>:
uint8_t flush_buffer = 0;

void Spi_Master_init(void)
{
	//initialize the IN and OUT PINS
	DIO_init(PORT_B,SS,OUT);
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	64 e0       	ldi	r22, 0x04	; 4
     83e:	82 e4       	ldi	r24, 0x42	; 66
     840:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_init>
	DIO_init(PORT_B,SCK,OUT);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	67 e0       	ldi	r22, 0x07	; 7
     848:	82 e4       	ldi	r24, 0x42	; 66
     84a:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_init>
	DIO_init(PORT_B,MOSI,OUT);
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	65 e0       	ldi	r22, 0x05	; 5
     852:	82 e4       	ldi	r24, 0x42	; 66
     854:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_init>
	DIO_init(PORT_B,MISO,IN);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	66 e0       	ldi	r22, 0x06	; 6
     85c:	82 e4       	ldi	r24, 0x42	; 66
     85e:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_init>
	
	//initialize Slave select pin to be high
	DIO_write(PORT_B,SS,HIGH);
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	64 e0       	ldi	r22, 0x04	; 4
     866:	82 e4       	ldi	r24, 0x42	; 66
     868:	0e 94 04 02 	call	0x408	; 0x408 <DIO_write>
	
	//Select Master mode, prescale of /16, enable the SPI
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR1); 
     86c:	8d b1       	in	r24, 0x0d	; 13
     86e:	82 65       	ori	r24, 0x52	; 82
     870:	8d b9       	out	0x0d, r24	; 13
	//disable the double SPI speed bit
	SPSR &= ~ (1<<SPI2X);
     872:	8e b1       	in	r24, 0x0e	; 14
     874:	8e 7f       	andi	r24, 0xFE	; 254
     876:	8e b9       	out	0x0e, r24	; 14
     878:	08 95       	ret

0000087a <Spi_Master_send>:
	
}
void Spi_Master_send(uint8_t request)
{
     87a:	cf 93       	push	r28
     87c:	c8 2f       	mov	r28, r24
	
	DIO_write(PORT_B,SS,LOW);
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	64 e0       	ldi	r22, 0x04	; 4
     882:	82 e4       	ldi	r24, 0x42	; 66
     884:	0e 94 04 02 	call	0x408	; 0x408 <DIO_write>
	
	SPDR = request;
     888:	cf b9       	out	0x0f, r28	; 15
	
	while(READ_BIT(SPSR,SPIF) == 0);
     88a:	77 9b       	sbis	0x0e, 7	; 14
     88c:	fe cf       	rjmp	.-4      	; 0x88a <Spi_Master_send+0x10>
	
	flush_buffer = SPDR;
     88e:	8f b1       	in	r24, 0x0f	; 15
     890:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
	
	DIO_write(PORT_B,SS,HIGH);
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	64 e0       	ldi	r22, 0x04	; 4
     898:	82 e4       	ldi	r24, 0x42	; 66
     89a:	0e 94 04 02 	call	0x408	; 0x408 <DIO_write>
	
}
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <TIMER_set>:

//functions definitions

void TIMER_set(uint8_t Mode)
{
	switch(Mode)
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	69 f0       	breq	.+26     	; 0x8c0 <TIMER_set+0x1e>
     8a6:	28 f0       	brcs	.+10     	; 0x8b2 <TIMER_set+0x10>
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	89 f0       	breq	.+34     	; 0x8ce <TIMER_set+0x2c>
     8ac:	83 30       	cpi	r24, 0x03	; 3
     8ae:	b1 f0       	breq	.+44     	; 0x8dc <TIMER_set+0x3a>
     8b0:	08 95       	ret
	{
		case Normal:
			ClEAR_BIT(TCCR0, PIN3) ;		//Normal Mode
     8b2:	83 b7       	in	r24, 0x33	; 51
     8b4:	87 7f       	andi	r24, 0xF7	; 247
     8b6:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;	
     8b8:	83 b7       	in	r24, 0x33	; 51
     8ba:	8f 7b       	andi	r24, 0xBF	; 191
     8bc:	83 bf       	out	0x33, r24	; 51
		break;
     8be:	08 95       	ret
		
		case PWM_Phase_Correct:
			ClEAR_BIT(TCCR0, PIN3) ;
     8c0:	83 b7       	in	r24, 0x33	; 51
     8c2:	87 7f       	andi	r24, 0xF7	; 247
     8c4:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			//PWM_Phase_Correct Mode
     8c6:	83 b7       	in	r24, 0x33	; 51
     8c8:	80 64       	ori	r24, 0x40	; 64
     8ca:	83 bf       	out	0x33, r24	; 51
		break;	
     8cc:	08 95       	ret
			
		case CTC:
			SET_BIT(TCCR0, PIN3) ;			//CTC Mode
     8ce:	83 b7       	in	r24, 0x33	; 51
     8d0:	88 60       	ori	r24, 0x08	; 8
     8d2:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;			
     8d4:	83 b7       	in	r24, 0x33	; 51
     8d6:	8f 7b       	andi	r24, 0xBF	; 191
     8d8:	83 bf       	out	0x33, r24	; 51
		break;
     8da:	08 95       	ret
		
		case Fast_PWM:
			SET_BIT(TCCR0, PIN3) ;			//Fast_PWM Mode
     8dc:	83 b7       	in	r24, 0x33	; 51
     8de:	88 60       	ori	r24, 0x08	; 8
     8e0:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			
     8e2:	83 b7       	in	r24, 0x33	; 51
     8e4:	80 64       	ori	r24, 0x40	; 64
     8e6:	83 bf       	out	0x33, r24	; 51
     8e8:	08 95       	ret

000008ea <TIMER_start>:
	}
	
}
void TIMER_start(uint16_t prescale)
{
	switch(prescale)
     8ea:	88 30       	cpi	r24, 0x08	; 8
     8ec:	91 05       	cpc	r25, r1
     8ee:	d1 f0       	breq	.+52     	; 0x924 <TIMER_start+0x3a>
     8f0:	48 f4       	brcc	.+18     	; 0x904 <TIMER_start+0x1a>
     8f2:	85 30       	cpi	r24, 0x05	; 5
     8f4:	91 05       	cpc	r25, r1
     8f6:	31 f1       	breq	.+76     	; 0x944 <TIMER_start+0x5a>
     8f8:	86 30       	cpi	r24, 0x06	; 6
     8fa:	91 05       	cpc	r25, r1
     8fc:	39 f1       	breq	.+78     	; 0x94c <TIMER_start+0x62>
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	41 f5       	brne	.+80     	; 0x952 <TIMER_start+0x68>
     902:	0c c0       	rjmp	.+24     	; 0x91c <TIMER_start+0x32>
     904:	81 15       	cp	r24, r1
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	92 07       	cpc	r25, r18
     90a:	a1 f0       	breq	.+40     	; 0x934 <TIMER_start+0x4a>
     90c:	81 15       	cp	r24, r1
     90e:	24 e0       	ldi	r18, 0x04	; 4
     910:	92 07       	cpc	r25, r18
     912:	a1 f0       	breq	.+40     	; 0x93c <TIMER_start+0x52>
     914:	80 34       	cpi	r24, 0x40	; 64
     916:	91 05       	cpc	r25, r1
     918:	e1 f4       	brne	.+56     	; 0x952 <TIMER_start+0x68>
     91a:	08 c0       	rjmp	.+16     	; 0x92c <TIMER_start+0x42>
	{
		case no_prescale:				//No prescaling
			TCCR0 |= 0b00000001;
     91c:	83 b7       	in	r24, 0x33	; 51
     91e:	81 60       	ori	r24, 0x01	; 1
     920:	83 bf       	out	0x33, r24	; 51
		break;
     922:	08 95       	ret
		
		case prescale8:					//8 prescaling
			TCCR0 |= 0b00000010;
     924:	83 b7       	in	r24, 0x33	; 51
     926:	82 60       	ori	r24, 0x02	; 2
     928:	83 bf       	out	0x33, r24	; 51
		break;
     92a:	08 95       	ret

		case prescale64:				//64 prescaling
			TCCR0 |= 0b00000011;
     92c:	83 b7       	in	r24, 0x33	; 51
     92e:	83 60       	ori	r24, 0x03	; 3
     930:	83 bf       	out	0x33, r24	; 51
		break;
     932:	08 95       	ret
		
		case prescale256:				// 256 prescaling
			TCCR0 |= 0b00000100;
     934:	83 b7       	in	r24, 0x33	; 51
     936:	84 60       	ori	r24, 0x04	; 4
     938:	83 bf       	out	0x33, r24	; 51
		break;
     93a:	08 95       	ret
		
		case prescale1024:				//1024 prescaling
			TCCR0 |= 0b00000101;
     93c:	83 b7       	in	r24, 0x33	; 51
     93e:	85 60       	ori	r24, 0x05	; 5
     940:	83 bf       	out	0x33, r24	; 51
		break;
     942:	08 95       	ret
		
		case External_Falling: //External_Falling on T0 pin
			TCCR0 |= 0b00000110;
     944:	83 b7       	in	r24, 0x33	; 51
     946:	86 60       	ori	r24, 0x06	; 6
     948:	83 bf       	out	0x33, r24	; 51
		break;
     94a:	08 95       	ret


		case External_Raising : //External_Raising on T0 pin
			TCCR0 |= 0b00000111;
     94c:	83 b7       	in	r24, 0x33	; 51
     94e:	87 60       	ori	r24, 0x07	; 7
     950:	83 bf       	out	0x33, r24	; 51
     952:	08 95       	ret

00000954 <TIMER_overflow_read>:
	
}
void TIMER_overflow_read(void)
{
	//wait until the overflow flag is set
	while((READ_BIT(TIFR, PIN0) == 0));
     954:	08 b6       	in	r0, 0x38	; 56
     956:	00 fe       	sbrs	r0, 0
     958:	fd cf       	rjmp	.-6      	; 0x954 <TIMER_overflow_read>
	
	//Clear the OverFlow flag
	SET_BIT(TIFR, PIN0);
     95a:	88 b7       	in	r24, 0x38	; 56
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	88 bf       	out	0x38, r24	; 56
     960:	08 95       	ret

00000962 <TIMER_stop>:
}
void TIMER_stop(void)
{
	//Stop the timer
	TCCR0 = 0x00;
     962:	13 be       	out	0x33, r1	; 51
     964:	08 95       	ret

00000966 <TIMER0_delay>:
}

void TIMER0_delay(uint16_t Time_delay, uint16_t prescale)
{
     966:	4f 92       	push	r4
     968:	5f 92       	push	r5
     96a:	6f 92       	push	r6
     96c:	7f 92       	push	r7
     96e:	8f 92       	push	r8
     970:	9f 92       	push	r9
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	00 d0       	rcall	.+0      	; 0x984 <TIMER0_delay+0x1e>
     984:	00 d0       	rcall	.+0      	; 0x986 <TIMER0_delay+0x20>
     986:	00 d0       	rcall	.+0      	; 0x988 <TIMER0_delay+0x22>
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	7e 83       	std	Y+6, r23	; 0x06
     98e:	6d 83       	std	Y+5, r22	; 0x05
	Time_delay_ = Time_delay*0.001;
     990:	bc 01       	movw	r22, r24
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__floatunsisf>
     99a:	69 83       	std	Y+1, r22	; 0x01
     99c:	7a 83       	std	Y+2, r23	; 0x02
     99e:	8b 83       	std	Y+3, r24	; 0x03
     9a0:	9c 83       	std	Y+4, r25	; 0x04
     9a2:	2f e6       	ldi	r18, 0x6F	; 111
     9a4:	32 e1       	ldi	r19, 0x12	; 18
     9a6:	43 e8       	ldi	r20, 0x83	; 131
     9a8:	5a e3       	ldi	r21, 0x3A	; 58
     9aa:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__mulsf3>
     9ae:	4b 01       	movw	r8, r22
     9b0:	5c 01       	movw	r10, r24
     9b2:	60 93 c9 00 	sts	0x00C9, r22	; 0x8000c9 <Time_delay_>
     9b6:	70 93 ca 00 	sts	0x00CA, r23	; 0x8000ca <Time_delay_+0x1>
     9ba:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <Time_delay_+0x2>
     9be:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <Time_delay_+0x3>
	
	Timer_Tick = ( (prescale) / (pow(10.0,6.0)) );
     9c2:	2d 81       	ldd	r18, Y+5	; 0x05
     9c4:	3e 81       	ldd	r19, Y+6	; 0x06
     9c6:	b9 01       	movw	r22, r18
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__floatunsisf>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	34 e2       	ldi	r19, 0x24	; 36
     9d4:	44 e7       	ldi	r20, 0x74	; 116
     9d6:	59 e4       	ldi	r21, 0x49	; 73
     9d8:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divsf3>
     9dc:	2b 01       	movw	r4, r22
     9de:	3c 01       	movw	r6, r24
     9e0:	60 93 d0 00 	sts	0x00D0, r22	; 0x8000d0 <Timer_Tick>
     9e4:	70 93 d1 00 	sts	0x00D1, r23	; 0x8000d1 <Timer_Tick+0x1>
     9e8:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Timer_Tick+0x2>
     9ec:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Timer_Tick+0x3>
	
	Timer_Delay_max = 	(Timer_Tick) * (256.0);
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e8       	ldi	r20, 0x80	; 128
     9f6:	53 e4       	ldi	r21, 0x43	; 67
     9f8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__mulsf3>
     9fc:	6b 01       	movw	r12, r22
     9fe:	7c 01       	movw	r14, r24
     a00:	60 93 c5 00 	sts	0x00C5, r22	; 0x8000c5 <Timer_Delay_max>
     a04:	70 93 c6 00 	sts	0x00C6, r23	; 0x8000c6 <Timer_Delay_max+0x1>
     a08:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <Timer_Delay_max+0x2>
     a0c:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <Timer_Delay_max+0x3>
	
	if(Time_delay < Timer_Delay_max)
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	69 81       	ldd	r22, Y+1	; 0x01
     a16:	7a 81       	ldd	r23, Y+2	; 0x02
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	0e 94 32 06 	call	0xc64	; 0xc64 <__cmpsf2>
     a20:	88 23       	and	r24, r24
     a22:	bc f4       	brge	.+46     	; 0xa52 <TIMER0_delay+0xec>
	{
		Timer_initial_value = ( (Timer_Delay_max - Time_delay ) / (Timer_Tick) );
     a24:	29 81       	ldd	r18, Y+1	; 0x01
     a26:	3a 81       	ldd	r19, Y+2	; 0x02
     a28:	4b 81       	ldd	r20, Y+3	; 0x03
     a2a:	5c 81       	ldd	r21, Y+4	; 0x04
     a2c:	c7 01       	movw	r24, r14
     a2e:	b6 01       	movw	r22, r12
     a30:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__subsf3>
     a34:	a3 01       	movw	r20, r6
     a36:	92 01       	movw	r18, r4
     a38:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divsf3>
     a3c:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fixunssfsi>
     a40:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <Timer_initial_value>
			
		Number_of_overflows_needed = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <Number_of_overflows_needed+0x1>
     a4c:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Number_of_overflows_needed>
     a50:	4c c0       	rjmp	.+152    	; 0xaea <TIMER0_delay+0x184>
	}
	else if(Time_delay == Timer_Delay_max)
     a52:	a7 01       	movw	r20, r14
     a54:	96 01       	movw	r18, r12
     a56:	69 81       	ldd	r22, Y+1	; 0x01
     a58:	7a 81       	ldd	r23, Y+2	; 0x02
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	0e 94 32 06 	call	0xc64	; 0xc64 <__cmpsf2>
     a62:	81 11       	cpse	r24, r1
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <TIMER0_delay+0x112>
	{
		Timer_initial_value = 0x00;
     a66:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <Timer_initial_value>
		Number_of_overflows_needed = 1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <Number_of_overflows_needed+0x1>
     a72:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Number_of_overflows_needed>
     a76:	39 c0       	rjmp	.+114    	; 0xaea <TIMER0_delay+0x184>
	}	
	
	else if(Time_delay_ > Timer_Delay_max)
     a78:	a7 01       	movw	r20, r14
     a7a:	96 01       	movw	r18, r12
     a7c:	c5 01       	movw	r24, r10
     a7e:	b4 01       	movw	r22, r8
     a80:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     a84:	18 16       	cp	r1, r24
     a86:	8c f5       	brge	.+98     	; 0xaea <TIMER0_delay+0x184>
	{
		Number_of_overflows_needed = ceil((Time_delay_/Timer_Delay_max));
     a88:	a7 01       	movw	r20, r14
     a8a:	96 01       	movw	r18, r12
     a8c:	c5 01       	movw	r24, r10
     a8e:	b4 01       	movw	r22, r8
     a90:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divsf3>
     a94:	0e 94 1b 06 	call	0xc36	; 0xc36 <ceil>
     a98:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fixunssfsi>
     a9c:	6b 01       	movw	r12, r22
     a9e:	7c 01       	movw	r14, r24
     aa0:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <Number_of_overflows_needed+0x1>
     aa4:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <Number_of_overflows_needed>
		Timer_initial_value = (ceil((256) - ((Time_delay_/Timer_Tick)/(Number_of_overflows_needed))));
     aa8:	a3 01       	movw	r20, r6
     aaa:	92 01       	movw	r18, r4
     aac:	c5 01       	movw	r24, r10
     aae:	b4 01       	movw	r22, r8
     ab0:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divsf3>
     ab4:	4b 01       	movw	r8, r22
     ab6:	5c 01       	movw	r10, r24
     ab8:	b6 01       	movw	r22, r12
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__floatunsisf>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c5 01       	movw	r24, r10
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 37 06 	call	0xc6e	; 0xc6e <__divsf3>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e8       	ldi	r24, 0x80	; 128
     ad8:	93 e4       	ldi	r25, 0x43	; 67
     ada:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__subsf3>
     ade:	0e 94 1b 06 	call	0xc36	; 0xc36 <ceil>
     ae2:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fixunssfsi>
     ae6:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <Timer_initial_value>
	}
	
	TCNT0 = Timer_initial_value;		// setting initial value
     aea:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Timer_initial_value>
     aee:	82 bf       	out	0x32, r24	; 50
	
	TIMER_start(prescale);
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	0e 94 75 04 	call	0x8ea	; 0x8ea <TIMER_start>

	while(overflows_counter < Number_of_overflows_needed)
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <TIMER0_delay+0x1aa>
	{
		TIMER_overflow_read();
     afa:	0e 94 aa 04 	call	0x954	; 0x954 <TIMER_overflow_read>
		overflows_counter++;
     afe:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <overflows_counter>
     b02:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <overflows_counter+0x1>
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <overflows_counter+0x1>
     b0c:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <overflows_counter>
	
	TCNT0 = Timer_initial_value;		// setting initial value
	
	TIMER_start(prescale);

	while(overflows_counter < Number_of_overflows_needed)
     b10:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <overflows_counter>
     b14:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <overflows_counter+0x1>
     b18:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Number_of_overflows_needed>
     b1c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <Number_of_overflows_needed+0x1>
     b20:	28 17       	cp	r18, r24
     b22:	39 07       	cpc	r19, r25
     b24:	50 f3       	brcs	.-44     	; 0xafa <TIMER0_delay+0x194>
	{
		TIMER_overflow_read();
		overflows_counter++;
	}
	overflows_counter = 0;
     b26:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <overflows_counter+0x1>
     b2a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <overflows_counter>
	
	TIMER_stop();
     b2e:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER_stop>
     b32:	26 96       	adiw	r28, 0x06	; 6
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	7f 90       	pop	r7
     b54:	6f 90       	pop	r6
     b56:	5f 90       	pop	r5
     b58:	4f 90       	pop	r4
     b5a:	08 95       	ret

00000b5c <__subsf3>:
     b5c:	50 58       	subi	r21, 0x80	; 128

00000b5e <__addsf3>:
     b5e:	bb 27       	eor	r27, r27
     b60:	aa 27       	eor	r26, r26
     b62:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__addsf3x>
     b66:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_round>
     b6a:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_pscA>
     b6e:	38 f0       	brcs	.+14     	; 0xb7e <__addsf3+0x20>
     b70:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscB>
     b74:	20 f0       	brcs	.+8      	; 0xb7e <__addsf3+0x20>
     b76:	39 f4       	brne	.+14     	; 0xb86 <__addsf3+0x28>
     b78:	9f 3f       	cpi	r25, 0xFF	; 255
     b7a:	19 f4       	brne	.+6      	; 0xb82 <__addsf3+0x24>
     b7c:	26 f4       	brtc	.+8      	; 0xb86 <__addsf3+0x28>
     b7e:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_nan>
     b82:	0e f4       	brtc	.+2      	; 0xb86 <__addsf3+0x28>
     b84:	e0 95       	com	r30
     b86:	e7 fb       	bst	r30, 7
     b88:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>

00000b8c <__addsf3x>:
     b8c:	e9 2f       	mov	r30, r25
     b8e:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_split3>
     b92:	58 f3       	brcs	.-42     	; 0xb6a <__addsf3+0xc>
     b94:	ba 17       	cp	r27, r26
     b96:	62 07       	cpc	r22, r18
     b98:	73 07       	cpc	r23, r19
     b9a:	84 07       	cpc	r24, r20
     b9c:	95 07       	cpc	r25, r21
     b9e:	20 f0       	brcs	.+8      	; 0xba8 <__addsf3x+0x1c>
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__addsf3x+0x34>
     ba2:	a6 f5       	brtc	.+104    	; 0xc0c <__addsf3x+0x80>
     ba4:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_zero>
     ba8:	0e f4       	brtc	.+2      	; 0xbac <__addsf3x+0x20>
     baa:	e0 95       	com	r30
     bac:	0b 2e       	mov	r0, r27
     bae:	ba 2f       	mov	r27, r26
     bb0:	a0 2d       	mov	r26, r0
     bb2:	0b 01       	movw	r0, r22
     bb4:	b9 01       	movw	r22, r18
     bb6:	90 01       	movw	r18, r0
     bb8:	0c 01       	movw	r0, r24
     bba:	ca 01       	movw	r24, r20
     bbc:	a0 01       	movw	r20, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	ff 27       	eor	r31, r31
     bc2:	59 1b       	sub	r21, r25
     bc4:	99 f0       	breq	.+38     	; 0xbec <__addsf3x+0x60>
     bc6:	59 3f       	cpi	r21, 0xF9	; 249
     bc8:	50 f4       	brcc	.+20     	; 0xbde <__addsf3x+0x52>
     bca:	50 3e       	cpi	r21, 0xE0	; 224
     bcc:	68 f1       	brcs	.+90     	; 0xc28 <__addsf3x+0x9c>
     bce:	1a 16       	cp	r1, r26
     bd0:	f0 40       	sbci	r31, 0x00	; 0
     bd2:	a2 2f       	mov	r26, r18
     bd4:	23 2f       	mov	r18, r19
     bd6:	34 2f       	mov	r19, r20
     bd8:	44 27       	eor	r20, r20
     bda:	58 5f       	subi	r21, 0xF8	; 248
     bdc:	f3 cf       	rjmp	.-26     	; 0xbc4 <__addsf3x+0x38>
     bde:	46 95       	lsr	r20
     be0:	37 95       	ror	r19
     be2:	27 95       	ror	r18
     be4:	a7 95       	ror	r26
     be6:	f0 40       	sbci	r31, 0x00	; 0
     be8:	53 95       	inc	r21
     bea:	c9 f7       	brne	.-14     	; 0xbde <__addsf3x+0x52>
     bec:	7e f4       	brtc	.+30     	; 0xc0c <__addsf3x+0x80>
     bee:	1f 16       	cp	r1, r31
     bf0:	ba 0b       	sbc	r27, r26
     bf2:	62 0b       	sbc	r22, r18
     bf4:	73 0b       	sbc	r23, r19
     bf6:	84 0b       	sbc	r24, r20
     bf8:	ba f0       	brmi	.+46     	; 0xc28 <__addsf3x+0x9c>
     bfa:	91 50       	subi	r25, 0x01	; 1
     bfc:	a1 f0       	breq	.+40     	; 0xc26 <__addsf3x+0x9a>
     bfe:	ff 0f       	add	r31, r31
     c00:	bb 1f       	adc	r27, r27
     c02:	66 1f       	adc	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	88 1f       	adc	r24, r24
     c08:	c2 f7       	brpl	.-16     	; 0xbfa <__addsf3x+0x6e>
     c0a:	0e c0       	rjmp	.+28     	; 0xc28 <__addsf3x+0x9c>
     c0c:	ba 0f       	add	r27, r26
     c0e:	62 1f       	adc	r22, r18
     c10:	73 1f       	adc	r23, r19
     c12:	84 1f       	adc	r24, r20
     c14:	48 f4       	brcc	.+18     	; 0xc28 <__addsf3x+0x9c>
     c16:	87 95       	ror	r24
     c18:	77 95       	ror	r23
     c1a:	67 95       	ror	r22
     c1c:	b7 95       	ror	r27
     c1e:	f7 95       	ror	r31
     c20:	9e 3f       	cpi	r25, 0xFE	; 254
     c22:	08 f0       	brcs	.+2      	; 0xc26 <__addsf3x+0x9a>
     c24:	b0 cf       	rjmp	.-160    	; 0xb86 <__addsf3+0x28>
     c26:	93 95       	inc	r25
     c28:	88 0f       	add	r24, r24
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <__addsf3x+0xa2>
     c2c:	99 27       	eor	r25, r25
     c2e:	ee 0f       	add	r30, r30
     c30:	97 95       	ror	r25
     c32:	87 95       	ror	r24
     c34:	08 95       	ret

00000c36 <ceil>:
     c36:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_trunc>
     c3a:	90 f0       	brcs	.+36     	; 0xc60 <ceil+0x2a>
     c3c:	9f 37       	cpi	r25, 0x7F	; 127
     c3e:	48 f4       	brcc	.+18     	; 0xc52 <ceil+0x1c>
     c40:	91 11       	cpse	r25, r1
     c42:	16 f4       	brtc	.+4      	; 0xc48 <ceil+0x12>
     c44:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_szero>
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	80 e8       	ldi	r24, 0x80	; 128
     c4e:	9f e3       	ldi	r25, 0x3F	; 63
     c50:	08 95       	ret
     c52:	26 f0       	brts	.+8      	; 0xc5c <ceil+0x26>
     c54:	1b 16       	cp	r1, r27
     c56:	61 1d       	adc	r22, r1
     c58:	71 1d       	adc	r23, r1
     c5a:	81 1d       	adc	r24, r1
     c5c:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__fp_mintl>
     c60:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_mpack>

00000c64 <__cmpsf2>:
     c64:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_cmp>
     c68:	08 f4       	brcc	.+2      	; 0xc6c <__cmpsf2+0x8>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret

00000c6e <__divsf3>:
     c6e:	0e 94 4b 06 	call	0xc96	; 0xc96 <__divsf3x>
     c72:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_round>
     c76:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscB>
     c7a:	58 f0       	brcs	.+22     	; 0xc92 <__divsf3+0x24>
     c7c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_pscA>
     c80:	40 f0       	brcs	.+16     	; 0xc92 <__divsf3+0x24>
     c82:	29 f4       	brne	.+10     	; 0xc8e <__divsf3+0x20>
     c84:	5f 3f       	cpi	r21, 0xFF	; 255
     c86:	29 f0       	breq	.+10     	; 0xc92 <__divsf3+0x24>
     c88:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>
     c8c:	51 11       	cpse	r21, r1
     c8e:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_szero>
     c92:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_nan>

00000c96 <__divsf3x>:
     c96:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_split3>
     c9a:	68 f3       	brcs	.-38     	; 0xc76 <__divsf3+0x8>

00000c9c <__divsf3_pse>:
     c9c:	99 23       	and	r25, r25
     c9e:	b1 f3       	breq	.-20     	; 0xc8c <__divsf3+0x1e>
     ca0:	55 23       	and	r21, r21
     ca2:	91 f3       	breq	.-28     	; 0xc88 <__divsf3+0x1a>
     ca4:	95 1b       	sub	r25, r21
     ca6:	55 0b       	sbc	r21, r21
     ca8:	bb 27       	eor	r27, r27
     caa:	aa 27       	eor	r26, r26
     cac:	62 17       	cp	r22, r18
     cae:	73 07       	cpc	r23, r19
     cb0:	84 07       	cpc	r24, r20
     cb2:	38 f0       	brcs	.+14     	; 0xcc2 <__divsf3_pse+0x26>
     cb4:	9f 5f       	subi	r25, 0xFF	; 255
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	44 1f       	adc	r20, r20
     cbe:	aa 1f       	adc	r26, r26
     cc0:	a9 f3       	breq	.-22     	; 0xcac <__divsf3_pse+0x10>
     cc2:	35 d0       	rcall	.+106    	; 0xd2e <__divsf3_pse+0x92>
     cc4:	0e 2e       	mov	r0, r30
     cc6:	3a f0       	brmi	.+14     	; 0xcd6 <__divsf3_pse+0x3a>
     cc8:	e0 e8       	ldi	r30, 0x80	; 128
     cca:	32 d0       	rcall	.+100    	; 0xd30 <__divsf3_pse+0x94>
     ccc:	91 50       	subi	r25, 0x01	; 1
     cce:	50 40       	sbci	r21, 0x00	; 0
     cd0:	e6 95       	lsr	r30
     cd2:	00 1c       	adc	r0, r0
     cd4:	ca f7       	brpl	.-14     	; 0xcc8 <__divsf3_pse+0x2c>
     cd6:	2b d0       	rcall	.+86     	; 0xd2e <__divsf3_pse+0x92>
     cd8:	fe 2f       	mov	r31, r30
     cda:	29 d0       	rcall	.+82     	; 0xd2e <__divsf3_pse+0x92>
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	88 1f       	adc	r24, r24
     ce2:	bb 1f       	adc	r27, r27
     ce4:	26 17       	cp	r18, r22
     ce6:	37 07       	cpc	r19, r23
     ce8:	48 07       	cpc	r20, r24
     cea:	ab 07       	cpc	r26, r27
     cec:	b0 e8       	ldi	r27, 0x80	; 128
     cee:	09 f0       	breq	.+2      	; 0xcf2 <__divsf3_pse+0x56>
     cf0:	bb 0b       	sbc	r27, r27
     cf2:	80 2d       	mov	r24, r0
     cf4:	bf 01       	movw	r22, r30
     cf6:	ff 27       	eor	r31, r31
     cf8:	93 58       	subi	r25, 0x83	; 131
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	3a f0       	brmi	.+14     	; 0xd0c <__divsf3_pse+0x70>
     cfe:	9e 3f       	cpi	r25, 0xFE	; 254
     d00:	51 05       	cpc	r21, r1
     d02:	78 f0       	brcs	.+30     	; 0xd22 <__divsf3_pse+0x86>
     d04:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>
     d08:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_szero>
     d0c:	5f 3f       	cpi	r21, 0xFF	; 255
     d0e:	e4 f3       	brlt	.-8      	; 0xd08 <__divsf3_pse+0x6c>
     d10:	98 3e       	cpi	r25, 0xE8	; 232
     d12:	d4 f3       	brlt	.-12     	; 0xd08 <__divsf3_pse+0x6c>
     d14:	86 95       	lsr	r24
     d16:	77 95       	ror	r23
     d18:	67 95       	ror	r22
     d1a:	b7 95       	ror	r27
     d1c:	f7 95       	ror	r31
     d1e:	9f 5f       	subi	r25, 0xFF	; 255
     d20:	c9 f7       	brne	.-14     	; 0xd14 <__divsf3_pse+0x78>
     d22:	88 0f       	add	r24, r24
     d24:	91 1d       	adc	r25, r1
     d26:	96 95       	lsr	r25
     d28:	87 95       	ror	r24
     d2a:	97 f9       	bld	r25, 7
     d2c:	08 95       	ret
     d2e:	e1 e0       	ldi	r30, 0x01	; 1
     d30:	66 0f       	add	r22, r22
     d32:	77 1f       	adc	r23, r23
     d34:	88 1f       	adc	r24, r24
     d36:	bb 1f       	adc	r27, r27
     d38:	62 17       	cp	r22, r18
     d3a:	73 07       	cpc	r23, r19
     d3c:	84 07       	cpc	r24, r20
     d3e:	ba 07       	cpc	r27, r26
     d40:	20 f0       	brcs	.+8      	; 0xd4a <__divsf3_pse+0xae>
     d42:	62 1b       	sub	r22, r18
     d44:	73 0b       	sbc	r23, r19
     d46:	84 0b       	sbc	r24, r20
     d48:	ba 0b       	sbc	r27, r26
     d4a:	ee 1f       	adc	r30, r30
     d4c:	88 f7       	brcc	.-30     	; 0xd30 <__divsf3_pse+0x94>
     d4e:	e0 95       	com	r30
     d50:	08 95       	ret

00000d52 <__fixunssfsi>:
     d52:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_splitA>
     d56:	88 f0       	brcs	.+34     	; 0xd7a <__fixunssfsi+0x28>
     d58:	9f 57       	subi	r25, 0x7F	; 127
     d5a:	98 f0       	brcs	.+38     	; 0xd82 <__fixunssfsi+0x30>
     d5c:	b9 2f       	mov	r27, r25
     d5e:	99 27       	eor	r25, r25
     d60:	b7 51       	subi	r27, 0x17	; 23
     d62:	b0 f0       	brcs	.+44     	; 0xd90 <__fixunssfsi+0x3e>
     d64:	e1 f0       	breq	.+56     	; 0xd9e <__fixunssfsi+0x4c>
     d66:	66 0f       	add	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	1a f0       	brmi	.+6      	; 0xd76 <__fixunssfsi+0x24>
     d70:	ba 95       	dec	r27
     d72:	c9 f7       	brne	.-14     	; 0xd66 <__fixunssfsi+0x14>
     d74:	14 c0       	rjmp	.+40     	; 0xd9e <__fixunssfsi+0x4c>
     d76:	b1 30       	cpi	r27, 0x01	; 1
     d78:	91 f0       	breq	.+36     	; 0xd9e <__fixunssfsi+0x4c>
     d7a:	0e 94 c4 07 	call	0xf88	; 0xf88 <__fp_zero>
     d7e:	b1 e0       	ldi	r27, 0x01	; 1
     d80:	08 95       	ret
     d82:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__fp_zero>
     d86:	67 2f       	mov	r22, r23
     d88:	78 2f       	mov	r23, r24
     d8a:	88 27       	eor	r24, r24
     d8c:	b8 5f       	subi	r27, 0xF8	; 248
     d8e:	39 f0       	breq	.+14     	; 0xd9e <__fixunssfsi+0x4c>
     d90:	b9 3f       	cpi	r27, 0xF9	; 249
     d92:	cc f3       	brlt	.-14     	; 0xd86 <__fixunssfsi+0x34>
     d94:	86 95       	lsr	r24
     d96:	77 95       	ror	r23
     d98:	67 95       	ror	r22
     d9a:	b3 95       	inc	r27
     d9c:	d9 f7       	brne	.-10     	; 0xd94 <__fixunssfsi+0x42>
     d9e:	3e f4       	brtc	.+14     	; 0xdae <__fixunssfsi+0x5c>
     da0:	90 95       	com	r25
     da2:	80 95       	com	r24
     da4:	70 95       	com	r23
     da6:	61 95       	neg	r22
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	8f 4f       	sbci	r24, 0xFF	; 255
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	08 95       	ret

00000db0 <__floatunsisf>:
     db0:	e8 94       	clt
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <__floatsisf+0x12>

00000db4 <__floatsisf>:
     db4:	97 fb       	bst	r25, 7
     db6:	3e f4       	brtc	.+14     	; 0xdc6 <__floatsisf+0x12>
     db8:	90 95       	com	r25
     dba:	80 95       	com	r24
     dbc:	70 95       	com	r23
     dbe:	61 95       	neg	r22
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	8f 4f       	sbci	r24, 0xFF	; 255
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	99 23       	and	r25, r25
     dc8:	a9 f0       	breq	.+42     	; 0xdf4 <__floatsisf+0x40>
     dca:	f9 2f       	mov	r31, r25
     dcc:	96 e9       	ldi	r25, 0x96	; 150
     dce:	bb 27       	eor	r27, r27
     dd0:	93 95       	inc	r25
     dd2:	f6 95       	lsr	r31
     dd4:	87 95       	ror	r24
     dd6:	77 95       	ror	r23
     dd8:	67 95       	ror	r22
     dda:	b7 95       	ror	r27
     ddc:	f1 11       	cpse	r31, r1
     dde:	f8 cf       	rjmp	.-16     	; 0xdd0 <__floatsisf+0x1c>
     de0:	fa f4       	brpl	.+62     	; 0xe20 <__floatsisf+0x6c>
     de2:	bb 0f       	add	r27, r27
     de4:	11 f4       	brne	.+4      	; 0xdea <__floatsisf+0x36>
     de6:	60 ff       	sbrs	r22, 0
     de8:	1b c0       	rjmp	.+54     	; 0xe20 <__floatsisf+0x6c>
     dea:	6f 5f       	subi	r22, 0xFF	; 255
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	16 c0       	rjmp	.+44     	; 0xe20 <__floatsisf+0x6c>
     df4:	88 23       	and	r24, r24
     df6:	11 f0       	breq	.+4      	; 0xdfc <__floatsisf+0x48>
     df8:	96 e9       	ldi	r25, 0x96	; 150
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <__floatsisf+0x6a>
     dfc:	77 23       	and	r23, r23
     dfe:	21 f0       	breq	.+8      	; 0xe08 <__floatsisf+0x54>
     e00:	9e e8       	ldi	r25, 0x8E	; 142
     e02:	87 2f       	mov	r24, r23
     e04:	76 2f       	mov	r23, r22
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <__floatsisf+0x5e>
     e08:	66 23       	and	r22, r22
     e0a:	71 f0       	breq	.+28     	; 0xe28 <__floatsisf+0x74>
     e0c:	96 e8       	ldi	r25, 0x86	; 134
     e0e:	86 2f       	mov	r24, r22
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	2a f0       	brmi	.+10     	; 0xe20 <__floatsisf+0x6c>
     e16:	9a 95       	dec	r25
     e18:	66 0f       	add	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	88 1f       	adc	r24, r24
     e1e:	da f7       	brpl	.-10     	; 0xe16 <__floatsisf+0x62>
     e20:	88 0f       	add	r24, r24
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	97 f9       	bld	r25, 7
     e28:	08 95       	ret

00000e2a <__fp_cmp>:
     e2a:	99 0f       	add	r25, r25
     e2c:	00 08       	sbc	r0, r0
     e2e:	55 0f       	add	r21, r21
     e30:	aa 0b       	sbc	r26, r26
     e32:	e0 e8       	ldi	r30, 0x80	; 128
     e34:	fe ef       	ldi	r31, 0xFE	; 254
     e36:	16 16       	cp	r1, r22
     e38:	17 06       	cpc	r1, r23
     e3a:	e8 07       	cpc	r30, r24
     e3c:	f9 07       	cpc	r31, r25
     e3e:	c0 f0       	brcs	.+48     	; 0xe70 <__fp_cmp+0x46>
     e40:	12 16       	cp	r1, r18
     e42:	13 06       	cpc	r1, r19
     e44:	e4 07       	cpc	r30, r20
     e46:	f5 07       	cpc	r31, r21
     e48:	98 f0       	brcs	.+38     	; 0xe70 <__fp_cmp+0x46>
     e4a:	62 1b       	sub	r22, r18
     e4c:	73 0b       	sbc	r23, r19
     e4e:	84 0b       	sbc	r24, r20
     e50:	95 0b       	sbc	r25, r21
     e52:	39 f4       	brne	.+14     	; 0xe62 <__fp_cmp+0x38>
     e54:	0a 26       	eor	r0, r26
     e56:	61 f0       	breq	.+24     	; 0xe70 <__fp_cmp+0x46>
     e58:	23 2b       	or	r18, r19
     e5a:	24 2b       	or	r18, r20
     e5c:	25 2b       	or	r18, r21
     e5e:	21 f4       	brne	.+8      	; 0xe68 <__fp_cmp+0x3e>
     e60:	08 95       	ret
     e62:	0a 26       	eor	r0, r26
     e64:	09 f4       	brne	.+2      	; 0xe68 <__fp_cmp+0x3e>
     e66:	a1 40       	sbci	r26, 0x01	; 1
     e68:	a6 95       	lsr	r26
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
     e6c:	81 1d       	adc	r24, r1
     e6e:	81 1d       	adc	r24, r1
     e70:	08 95       	ret

00000e72 <__fp_inf>:
     e72:	97 f9       	bld	r25, 7
     e74:	9f 67       	ori	r25, 0x7F	; 127
     e76:	80 e8       	ldi	r24, 0x80	; 128
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	08 95       	ret

00000e7e <__fp_mintl>:
     e7e:	88 23       	and	r24, r24
     e80:	71 f4       	brne	.+28     	; 0xe9e <__fp_mintl+0x20>
     e82:	77 23       	and	r23, r23
     e84:	21 f0       	breq	.+8      	; 0xe8e <__fp_mintl+0x10>
     e86:	98 50       	subi	r25, 0x08	; 8
     e88:	87 2b       	or	r24, r23
     e8a:	76 2f       	mov	r23, r22
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <__fp_mintl+0x1e>
     e8e:	66 23       	and	r22, r22
     e90:	11 f4       	brne	.+4      	; 0xe96 <__fp_mintl+0x18>
     e92:	99 27       	eor	r25, r25
     e94:	0d c0       	rjmp	.+26     	; 0xeb0 <__fp_mintl+0x32>
     e96:	90 51       	subi	r25, 0x10	; 16
     e98:	86 2b       	or	r24, r22
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	2a f0       	brmi	.+10     	; 0xeaa <__fp_mintl+0x2c>
     ea0:	9a 95       	dec	r25
     ea2:	66 0f       	add	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	da f7       	brpl	.-10     	; 0xea0 <__fp_mintl+0x22>
     eaa:	88 0f       	add	r24, r24
     eac:	96 95       	lsr	r25
     eae:	87 95       	ror	r24
     eb0:	97 f9       	bld	r25, 7
     eb2:	08 95       	ret

00000eb4 <__fp_mpack>:
     eb4:	9f 3f       	cpi	r25, 0xFF	; 255
     eb6:	31 f0       	breq	.+12     	; 0xec4 <__fp_mpack_finite+0xc>

00000eb8 <__fp_mpack_finite>:
     eb8:	91 50       	subi	r25, 0x01	; 1
     eba:	20 f4       	brcc	.+8      	; 0xec4 <__fp_mpack_finite+0xc>
     ebc:	87 95       	ror	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b7 95       	ror	r27
     ec4:	88 0f       	add	r24, r24
     ec6:	91 1d       	adc	r25, r1
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	97 f9       	bld	r25, 7
     ece:	08 95       	ret

00000ed0 <__fp_nan>:
     ed0:	9f ef       	ldi	r25, 0xFF	; 255
     ed2:	80 ec       	ldi	r24, 0xC0	; 192
     ed4:	08 95       	ret

00000ed6 <__fp_pscA>:
     ed6:	00 24       	eor	r0, r0
     ed8:	0a 94       	dec	r0
     eda:	16 16       	cp	r1, r22
     edc:	17 06       	cpc	r1, r23
     ede:	18 06       	cpc	r1, r24
     ee0:	09 06       	cpc	r0, r25
     ee2:	08 95       	ret

00000ee4 <__fp_pscB>:
     ee4:	00 24       	eor	r0, r0
     ee6:	0a 94       	dec	r0
     ee8:	12 16       	cp	r1, r18
     eea:	13 06       	cpc	r1, r19
     eec:	14 06       	cpc	r1, r20
     eee:	05 06       	cpc	r0, r21
     ef0:	08 95       	ret

00000ef2 <__fp_round>:
     ef2:	09 2e       	mov	r0, r25
     ef4:	03 94       	inc	r0
     ef6:	00 0c       	add	r0, r0
     ef8:	11 f4       	brne	.+4      	; 0xefe <__fp_round+0xc>
     efa:	88 23       	and	r24, r24
     efc:	52 f0       	brmi	.+20     	; 0xf12 <__fp_round+0x20>
     efe:	bb 0f       	add	r27, r27
     f00:	40 f4       	brcc	.+16     	; 0xf12 <__fp_round+0x20>
     f02:	bf 2b       	or	r27, r31
     f04:	11 f4       	brne	.+4      	; 0xf0a <__fp_round+0x18>
     f06:	60 ff       	sbrs	r22, 0
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <__fp_round+0x20>
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	8f 4f       	sbci	r24, 0xFF	; 255
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	08 95       	ret

00000f14 <__fp_split3>:
     f14:	57 fd       	sbrc	r21, 7
     f16:	90 58       	subi	r25, 0x80	; 128
     f18:	44 0f       	add	r20, r20
     f1a:	55 1f       	adc	r21, r21
     f1c:	59 f0       	breq	.+22     	; 0xf34 <__fp_splitA+0x10>
     f1e:	5f 3f       	cpi	r21, 0xFF	; 255
     f20:	71 f0       	breq	.+28     	; 0xf3e <__fp_splitA+0x1a>
     f22:	47 95       	ror	r20

00000f24 <__fp_splitA>:
     f24:	88 0f       	add	r24, r24
     f26:	97 fb       	bst	r25, 7
     f28:	99 1f       	adc	r25, r25
     f2a:	61 f0       	breq	.+24     	; 0xf44 <__fp_splitA+0x20>
     f2c:	9f 3f       	cpi	r25, 0xFF	; 255
     f2e:	79 f0       	breq	.+30     	; 0xf4e <__fp_splitA+0x2a>
     f30:	87 95       	ror	r24
     f32:	08 95       	ret
     f34:	12 16       	cp	r1, r18
     f36:	13 06       	cpc	r1, r19
     f38:	14 06       	cpc	r1, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	f2 cf       	rjmp	.-28     	; 0xf22 <__fp_split3+0xe>
     f3e:	46 95       	lsr	r20
     f40:	f1 df       	rcall	.-30     	; 0xf24 <__fp_splitA>
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <__fp_splitA+0x30>
     f44:	16 16       	cp	r1, r22
     f46:	17 06       	cpc	r1, r23
     f48:	18 06       	cpc	r1, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	f1 cf       	rjmp	.-30     	; 0xf30 <__fp_splitA+0xc>
     f4e:	86 95       	lsr	r24
     f50:	71 05       	cpc	r23, r1
     f52:	61 05       	cpc	r22, r1
     f54:	08 94       	sec
     f56:	08 95       	ret

00000f58 <__fp_trunc>:
     f58:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_splitA>
     f5c:	a0 f0       	brcs	.+40     	; 0xf86 <__fp_trunc+0x2e>
     f5e:	be e7       	ldi	r27, 0x7E	; 126
     f60:	b9 17       	cp	r27, r25
     f62:	88 f4       	brcc	.+34     	; 0xf86 <__fp_trunc+0x2e>
     f64:	bb 27       	eor	r27, r27
     f66:	9f 38       	cpi	r25, 0x8F	; 143
     f68:	60 f4       	brcc	.+24     	; 0xf82 <__fp_trunc+0x2a>
     f6a:	16 16       	cp	r1, r22
     f6c:	b1 1d       	adc	r27, r1
     f6e:	67 2f       	mov	r22, r23
     f70:	78 2f       	mov	r23, r24
     f72:	88 27       	eor	r24, r24
     f74:	98 5f       	subi	r25, 0xF8	; 248
     f76:	f7 cf       	rjmp	.-18     	; 0xf66 <__fp_trunc+0xe>
     f78:	86 95       	lsr	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	b1 1d       	adc	r27, r1
     f80:	93 95       	inc	r25
     f82:	96 39       	cpi	r25, 0x96	; 150
     f84:	c8 f3       	brcs	.-14     	; 0xf78 <__fp_trunc+0x20>
     f86:	08 95       	ret

00000f88 <__fp_zero>:
     f88:	e8 94       	clt

00000f8a <__fp_szero>:
     f8a:	bb 27       	eor	r27, r27
     f8c:	66 27       	eor	r22, r22
     f8e:	77 27       	eor	r23, r23
     f90:	cb 01       	movw	r24, r22
     f92:	97 f9       	bld	r25, 7
     f94:	08 95       	ret

00000f96 <__gesf2>:
     f96:	0e 94 15 07 	call	0xe2a	; 0xe2a <__fp_cmp>
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <__gesf2+0x8>
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	08 95       	ret

00000fa0 <__mulsf3>:
     fa0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__mulsf3x>
     fa4:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_round>
     fa8:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_pscA>
     fac:	38 f0       	brcs	.+14     	; 0xfbc <__mulsf3+0x1c>
     fae:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscB>
     fb2:	20 f0       	brcs	.+8      	; 0xfbc <__mulsf3+0x1c>
     fb4:	95 23       	and	r25, r21
     fb6:	11 f0       	breq	.+4      	; 0xfbc <__mulsf3+0x1c>
     fb8:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>
     fbc:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_nan>
     fc0:	11 24       	eor	r1, r1
     fc2:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_szero>

00000fc6 <__mulsf3x>:
     fc6:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_split3>
     fca:	70 f3       	brcs	.-36     	; 0xfa8 <__mulsf3+0x8>

00000fcc <__mulsf3_pse>:
     fcc:	95 9f       	mul	r25, r21
     fce:	c1 f3       	breq	.-16     	; 0xfc0 <__mulsf3+0x20>
     fd0:	95 0f       	add	r25, r21
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	55 1f       	adc	r21, r21
     fd6:	62 9f       	mul	r22, r18
     fd8:	f0 01       	movw	r30, r0
     fda:	72 9f       	mul	r23, r18
     fdc:	bb 27       	eor	r27, r27
     fde:	f0 0d       	add	r31, r0
     fe0:	b1 1d       	adc	r27, r1
     fe2:	63 9f       	mul	r22, r19
     fe4:	aa 27       	eor	r26, r26
     fe6:	f0 0d       	add	r31, r0
     fe8:	b1 1d       	adc	r27, r1
     fea:	aa 1f       	adc	r26, r26
     fec:	64 9f       	mul	r22, r20
     fee:	66 27       	eor	r22, r22
     ff0:	b0 0d       	add	r27, r0
     ff2:	a1 1d       	adc	r26, r1
     ff4:	66 1f       	adc	r22, r22
     ff6:	82 9f       	mul	r24, r18
     ff8:	22 27       	eor	r18, r18
     ffa:	b0 0d       	add	r27, r0
     ffc:	a1 1d       	adc	r26, r1
     ffe:	62 1f       	adc	r22, r18
    1000:	73 9f       	mul	r23, r19
    1002:	b0 0d       	add	r27, r0
    1004:	a1 1d       	adc	r26, r1
    1006:	62 1f       	adc	r22, r18
    1008:	83 9f       	mul	r24, r19
    100a:	a0 0d       	add	r26, r0
    100c:	61 1d       	adc	r22, r1
    100e:	22 1f       	adc	r18, r18
    1010:	74 9f       	mul	r23, r20
    1012:	33 27       	eor	r19, r19
    1014:	a0 0d       	add	r26, r0
    1016:	61 1d       	adc	r22, r1
    1018:	23 1f       	adc	r18, r19
    101a:	84 9f       	mul	r24, r20
    101c:	60 0d       	add	r22, r0
    101e:	21 1d       	adc	r18, r1
    1020:	82 2f       	mov	r24, r18
    1022:	76 2f       	mov	r23, r22
    1024:	6a 2f       	mov	r22, r26
    1026:	11 24       	eor	r1, r1
    1028:	9f 57       	subi	r25, 0x7F	; 127
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	9a f0       	brmi	.+38     	; 0x1054 <__mulsf3_pse+0x88>
    102e:	f1 f0       	breq	.+60     	; 0x106c <__mulsf3_pse+0xa0>
    1030:	88 23       	and	r24, r24
    1032:	4a f0       	brmi	.+18     	; 0x1046 <__mulsf3_pse+0x7a>
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	bb 1f       	adc	r27, r27
    103a:	66 1f       	adc	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	91 50       	subi	r25, 0x01	; 1
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__mulsf3_pse+0x64>
    1046:	9e 3f       	cpi	r25, 0xFE	; 254
    1048:	51 05       	cpc	r21, r1
    104a:	80 f0       	brcs	.+32     	; 0x106c <__mulsf3_pse+0xa0>
    104c:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__fp_inf>
    1050:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_szero>
    1054:	5f 3f       	cpi	r21, 0xFF	; 255
    1056:	e4 f3       	brlt	.-8      	; 0x1050 <__mulsf3_pse+0x84>
    1058:	98 3e       	cpi	r25, 0xE8	; 232
    105a:	d4 f3       	brlt	.-12     	; 0x1050 <__mulsf3_pse+0x84>
    105c:	86 95       	lsr	r24
    105e:	77 95       	ror	r23
    1060:	67 95       	ror	r22
    1062:	b7 95       	ror	r27
    1064:	f7 95       	ror	r31
    1066:	e7 95       	ror	r30
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	c1 f7       	brne	.-16     	; 0x105c <__mulsf3_pse+0x90>
    106c:	fe 2b       	or	r31, r30
    106e:	88 0f       	add	r24, r24
    1070:	91 1d       	adc	r25, r1
    1072:	96 95       	lsr	r25
    1074:	87 95       	ror	r24
    1076:	97 f9       	bld	r25, 7
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
