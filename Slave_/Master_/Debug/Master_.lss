
Master_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000e36  00000eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800078  00800078  00000ee2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001757  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee1  00000000  00000000  000032b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000708  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093b  00000000  00000000  00004ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000054db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8a:	0c 94 19 07 	jmp	0xe32	; 0xe32 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
volatile uint8_t x1=0;

void app_init(void)
{
	
	DIO_init(PORT_D,PIN5,OUT); /*Makes PIN5 in PORT D output pin and initiate it by low*/
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	84 e4       	ldi	r24, 0x44	; 68
  98:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_init>
	DIO_init(PORT_D,PIN6,OUT); /*Makes PIN6 in PORT D output pin and initiate it by low*/
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	66 e0       	ldi	r22, 0x06	; 6
  a0:	84 e4       	ldi	r24, 0x44	; 68
  a2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_init>
	DIO_init(PORT_D,PIN7,OUT); /*Makes PIN7 in PORT D output pin and initiate it by low*/
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	67 e0       	ldi	r22, 0x07	; 7
  aa:	84 e4       	ldi	r24, 0x44	; 68
  ac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_init>
		
	DIO_write(PORT_D,PIN5,LOW);
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	65 e0       	ldi	r22, 0x05	; 5
  b4:	84 e4       	ldi	r24, 0x44	; 68
  b6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
	DIO_write(PORT_D,PIN6,LOW);
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	66 e0       	ldi	r22, 0x06	; 6
  be:	84 e4       	ldi	r24, 0x44	; 68
  c0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
	DIO_write(PORT_D,PIN7,LOW);	
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	67 e0       	ldi	r22, 0x07	; 7
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
	
	Spi_Slave_init();
  ce:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Spi_Slave_init>
	LCD_4_bit_init();
  d2:	0e 94 89 02 	call	0x512	; 0x512 <LCD_4_bit_init>
	ADC_init();	
  d6:	0e 94 44 01 	call	0x288	; 0x288 <ADC_init>

	//ADC initializing
	DDRA &= ~(1<<0);
  da:	8a b3       	in	r24, 0x1a	; 26
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	8a bb       	out	0x1a, r24	; 26
  e0:	08 95       	ret

000000e2 <app_start>:
}

void app_start(void)
{
	data = Spi_Slave_receive();
  e2:	0e 94 18 03 	call	0x630	; 0x630 <Spi_Slave_receive>
  e6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <data>
	PORTA = data;
  ea:	8b bb       	out	0x1b, r24	; 27
	
	switch(data)
  ec:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <data>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	f9 f0       	breq	.+62     	; 0x132 <app_start+0x50>
  f4:	28 f4       	brcc	.+10     	; 0x100 <app_start+0x1e>
  f6:	88 23       	and	r24, r24
  f8:	59 f0       	breq	.+22     	; 0x110 <app_start+0x2e>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	31 f0       	breq	.+12     	; 0x10a <app_start+0x28>
  fe:	2e c0       	rjmp	.+92     	; 0x15c <app_start+0x7a>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	11 f1       	breq	.+68     	; 0x148 <app_start+0x66>
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	39 f0       	breq	.+14     	; 0x116 <app_start+0x34>
 108:	29 c0       	rjmp	.+82     	; 0x15c <app_start+0x7a>
	{
		case Open_Door: servo_move_180_deg(); break;
 10a:	0e 94 25 01 	call	0x24a	; 0x24a <servo_move_180_deg>
 10e:	26 c0       	rjmp	.+76     	; 0x15c <app_start+0x7a>
		
		case Close_Door: servo_move_zero_deg(); break;
 110:	0e 94 0b 01 	call	0x216	; 0x216 <servo_move_zero_deg>
 114:	23 c0       	rjmp	.+70     	; 0x15c <app_start+0x7a>
		
		case Open_Temp_LCD:
		LCD_4_bit_sendString(welcome_string);
 116:	80 e7       	ldi	r24, 0x70	; 112
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_4_bit_sendString>
		TIMER0_delay(3000,no_prescale);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	88 eb       	ldi	r24, 0xB8	; 184
 124:	9b e0       	ldi	r25, 0x0B	; 11
 126:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
		LCD_4_bit_sendCommand(0x01);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
		break;
 130:	15 c0       	rjmp	.+42     	; 0x15c <app_start+0x7a>
		
		case Turn_On: 
			DIO_write(PORT_D,PIN6,HIGH); 
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	66 e0       	ldi	r22, 0x06	; 6
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
			DIO_write(PORT_D,PIN7,HIGH);
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	67 e0       	ldi	r22, 0x07	; 7
 140:	84 e4       	ldi	r24, 0x44	; 68
 142:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
			break; 
 146:	0a c0       	rjmp	.+20     	; 0x15c <app_start+0x7a>
		case Turn_Off:
			DIO_write(PORT_D,PIN6,LOW);
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	66 e0       	ldi	r22, 0x06	; 6
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
			DIO_write(PORT_D,PIN7,LOW);
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	67 e0       	ldi	r22, 0x07	; 7
 156:	84 e4       	ldi	r24, 0x44	; 68
 158:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
			break; 
	}
	
	// Read the value from ADC
	digital_value = ADC_read(ADC_CH_0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 4c 01 	call	0x298	; 0x298 <ADC_read>
 162:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <digital_value+0x1>
 166:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <digital_value>
	decimal = 0; weight = 1; rem = 0;
 16a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <decimal+0x1>
 16e:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <decimal>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 17a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 17e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
	LCD_4_bit_sendCommand(0x01);
 182:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendString(done_string);
 186:	82 e6       	ldi	r24, 0x62	; 98
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_4_bit_sendString>
	TIMER0_delay(3000,no_prescale);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	88 eb       	ldi	r24, 0xB8	; 184
 194:	9b e0       	ldi	r25, 0x0B	; 11
 196:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	LCD_4_bit_sendCommand(0x01);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
	while(digital_value != 0)
 1a0:	33 c0       	rjmp	.+102    	; 0x208 <app_start+0x126>
	{
	LCD_4_bit_sendChar((digital_value % 10) + (0x30));
 1a2:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <digital_value>
 1a6:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <digital_value+0x1>
 1aa:	9a 01       	movw	r18, r20
 1ac:	ad ec       	ldi	r26, 0xCD	; 205
 1ae:	bc ec       	ldi	r27, 0xCC	; 204
 1b0:	0e 94 0a 07 	call	0xe14	; 0xe14 <__umulhisi3>
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	9c 01       	movw	r18, r24
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	9a 01       	movw	r18, r20
 1d8:	28 1b       	sub	r18, r24
 1da:	39 0b       	sbc	r19, r25
 1dc:	c9 01       	movw	r24, r18
 1de:	80 5d       	subi	r24, 0xD0	; 208
 1e0:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_4_bit_sendChar>
	digital_value = digital_value/10;		
 1e4:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <digital_value>
 1e8:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <digital_value+0x1>
 1ec:	ad ec       	ldi	r26, 0xCD	; 205
 1ee:	bc ec       	ldi	r27, 0xCC	; 204
 1f0:	0e 94 0a 07 	call	0xe14	; 0xe14 <__umulhisi3>
 1f4:	96 95       	lsr	r25
 1f6:	87 95       	ror	r24
 1f8:	96 95       	lsr	r25
 1fa:	87 95       	ror	r24
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <digital_value+0x1>
 204:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <digital_value>
	decimal = 0; weight = 1; rem = 0;
	LCD_4_bit_sendCommand(0x01);
	LCD_4_bit_sendString(done_string);
	TIMER0_delay(3000,no_prescale);
	LCD_4_bit_sendCommand(0x01);
	while(digital_value != 0)
 208:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <digital_value>
 20c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <digital_value+0x1>
 210:	89 2b       	or	r24, r25
 212:	39 f6       	brne	.-114    	; 0x1a2 <app_start+0xc0>
	digital_value = ADC_read(ADC_CH_0);
	// Write the value on the PINS
	PORTC = (uint8_t)digital_value;
	PORTD = (uint8_t)(digital_value>>8);*/
	
}
 214:	08 95       	ret

00000216 <servo_move_zero_deg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	65 e0       	ldi	r22, 0x05	; 5
 21a:	84 e4       	ldi	r24, 0x44	; 68
 21c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
 220:	89 ef       	ldi	r24, 0xF9	; 249
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <servo_move_zero_deg+0xe>
 228:	00 c0       	rjmp	.+0      	; 0x22a <servo_move_zero_deg+0x14>
 22a:	00 00       	nop
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	65 e0       	ldi	r22, 0x05	; 5
 230:	84 e4       	ldi	r24, 0x44	; 68
 232:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
 236:	9f e7       	ldi	r25, 0x7F	; 127
 238:	2a e1       	ldi	r18, 0x1A	; 26
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	91 50       	subi	r25, 0x01	; 1
 23e:	20 40       	sbci	r18, 0x00	; 0
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <servo_move_zero_deg+0x26>
 244:	00 c0       	rjmp	.+0      	; 0x246 <servo_move_zero_deg+0x30>
 246:	00 00       	nop
 248:	08 95       	ret

0000024a <servo_move_180_deg>:
	  DIO_write(PORT_D,PIN5,LOW);
	  _delay_ms(2000);	
}
void servo_move_180_deg(void)
{
	  DIO_write(PORT_D,PIN5,HIGH);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	65 e0       	ldi	r22, 0x05	; 5
 24e:	84 e4       	ldi	r24, 0x44	; 68
 250:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
 254:	83 ef       	ldi	r24, 0xF3	; 243
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <servo_move_180_deg+0xe>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <servo_move_180_deg+0x14>
 25e:	00 00       	nop
	  _delay_ms(2);
	  DIO_write(PORT_D,PIN5,LOW);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	65 e0       	ldi	r22, 0x05	; 5
 264:	84 e4       	ldi	r24, 0x44	; 68
 266:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_write>
 26a:	9f e7       	ldi	r25, 0x7F	; 127
 26c:	2a e1       	ldi	r18, 0x1A	; 26
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	91 50       	subi	r25, 0x01	; 1
 272:	20 40       	sbci	r18, 0x00	; 0
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <servo_move_180_deg+0x26>
 278:	00 c0       	rjmp	.+0      	; 0x27a <servo_move_180_deg+0x30>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <main>:
int main(void)
{
    /* Replace with your application code */
	/* initialization */
	/*Declaring and Initialization of variables*/	
	app_init();
 27e:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	
	while(1)
	{
		app_start();
 282:	0e 94 71 00 	call	0xe2	; 0xe2 <app_start>
 286:	fd cf       	rjmp	.-6      	; 0x282 <main+0x4>

00000288 <ADC_init>:
 */ 
#include "adc.h"

void ADC_init(void)
{
	ADMUX |= (1<<REFS0);		// AVCC reference
 288:	87 b1       	in	r24, 0x07	; 7
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0x00 ;			//prescale  /2
 28e:	16 b8       	out	0x06, r1	; 6
	
	ADCSRA |= (1<<ADEN);	// Enable the ADC
 290:	86 b1       	in	r24, 0x06	; 6
 292:	80 68       	ori	r24, 0x80	; 128
 294:	86 b9       	out	0x06, r24	; 6
 296:	08 95       	ret

00000298 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
	ADMUX |= (channel & 0x0F);	//Choose channel to be read
 298:	97 b1       	in	r25, 0x07	; 7
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	98 2b       	or	r25, r24
 29e:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= (1<<ADSC);		//Start Conversion
 2a0:	86 b1       	in	r24, 0x06	; 6
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1<<4)) == 0);	//Wait for conversion Complete flag
 2a6:	34 9b       	sbis	0x06, 4	; 6
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <ADC_read+0xe>

	return ADCL | (ADCH << 8);	//Return the digital value
 2aa:	24 b1       	in	r18, 0x04	; 4
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	98 2f       	mov	r25, r24
 2b2:	88 27       	eor	r24, r24
	
 2b4:	82 2b       	or	r24, r18
 2b6:	08 95       	ret

000002b8 <DIO_init>:

// global variables
// functions definitions
void DIO_init(uint8_t port_number, uint8_t pin_number, uint8_t direction)
{
	switch(port_number)
 2b8:	82 34       	cpi	r24, 0x42	; 66
 2ba:	29 f1       	breq	.+74     	; 0x306 <DIO_init+0x4e>
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <DIO_init+0xc>
 2be:	81 34       	cpi	r24, 0x41	; 65
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <DIO_init+0x18>
 2c2:	08 95       	ret
 2c4:	83 34       	cpi	r24, 0x43	; 67
 2c6:	d1 f1       	breq	.+116    	; 0x33c <DIO_init+0x84>
 2c8:	84 34       	cpi	r24, 0x44	; 68
 2ca:	09 f4       	brne	.+2      	; 0x2ce <DIO_init+0x16>
 2cc:	52 c0       	rjmp	.+164    	; 0x372 <DIO_init+0xba>
 2ce:	08 95       	ret
	{
		case PORT_A:
		if(direction == OUT)
 2d0:	41 30       	cpi	r20, 0x01	; 1
 2d2:	59 f4       	brne	.+22     	; 0x2ea <DIO_init+0x32>
		{
			//DDRA |= (1<<pin_number); //output
			SET_BIT(DDRA, pin_number);
 2d4:	2a b3       	in	r18, 0x1a	; 26
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_init+0x28>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_init+0x24>
 2e4:	82 2b       	or	r24, r18
 2e6:	8a bb       	out	0x1a, r24	; 26
 2e8:	08 95       	ret
			
		}
		else if(direction == IN)
 2ea:	41 11       	cpse	r20, r1
 2ec:	5c c0       	rjmp	.+184    	; 0x3a6 <DIO_init+0xee>
		{
			//DDRA &= ~(1<<pin_number); // input
			ClEAR_BIT(DDRA, pin_number);
 2ee:	2a b3       	in	r18, 0x1a	; 26
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_init+0x42>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_init+0x3e>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	8a bb       	out	0x1a, r24	; 26
 304:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_B:
		if(direction == OUT)
 306:	41 30       	cpi	r20, 0x01	; 1
 308:	59 f4       	brne	.+22     	; 0x320 <DIO_init+0x68>
		{
			//DDRB |= (1<<pin_number);
			SET_BIT(DDRB, pin_number);
 30a:	27 b3       	in	r18, 0x17	; 23
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_init+0x5e>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_init+0x5a>
 31a:	82 2b       	or	r24, r18
 31c:	87 bb       	out	0x17, r24	; 23
 31e:	08 95       	ret
		}
		else if(direction == IN)
 320:	41 11       	cpse	r20, r1
 322:	41 c0       	rjmp	.+130    	; 0x3a6 <DIO_init+0xee>
		{
			//DDRB &= ~(1<<pin_number);
			ClEAR_BIT(DDRB, pin_number);
 324:	27 b3       	in	r18, 0x17	; 23
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_init+0x78>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_init+0x74>
 334:	80 95       	com	r24
 336:	82 23       	and	r24, r18
 338:	87 bb       	out	0x17, r24	; 23
 33a:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_C:
		if(direction == OUT)
 33c:	41 30       	cpi	r20, 0x01	; 1
 33e:	59 f4       	brne	.+22     	; 0x356 <DIO_init+0x9e>
		{
			//DDRC |= (1<<pin_number);
			SET_BIT(DDRC, pin_number);
 340:	24 b3       	in	r18, 0x14	; 20
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_init+0x94>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_init+0x90>
 350:	82 2b       	or	r24, r18
 352:	84 bb       	out	0x14, r24	; 20
 354:	08 95       	ret
		}
		else if(direction == IN)
 356:	41 11       	cpse	r20, r1
 358:	26 c0       	rjmp	.+76     	; 0x3a6 <DIO_init+0xee>
		{
			//DDRC &= ~(1<<pin_number);
			ClEAR_BIT(DDRC, pin_number);
 35a:	24 b3       	in	r18, 0x14	; 20
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_init+0xae>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_init+0xaa>
 36a:	80 95       	com	r24
 36c:	82 23       	and	r24, r18
 36e:	84 bb       	out	0x14, r24	; 20
 370:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_D:
		if(direction == OUT)
 372:	41 30       	cpi	r20, 0x01	; 1
 374:	59 f4       	brne	.+22     	; 0x38c <DIO_init+0xd4>
		{
			//DDRD |= (1<<pin_number);
			SET_BIT(DDRD, pin_number);
 376:	21 b3       	in	r18, 0x11	; 17
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_init+0xca>
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	6a 95       	dec	r22
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_init+0xc6>
 386:	82 2b       	or	r24, r18
 388:	81 bb       	out	0x11, r24	; 17
 38a:	08 95       	ret
		}
		else if(direction == IN)
 38c:	41 11       	cpse	r20, r1
 38e:	0b c0       	rjmp	.+22     	; 0x3a6 <DIO_init+0xee>
		{
			//DDRD &= ~(1<<pin_number);
			ClEAR_BIT(DDRD, pin_number);
 390:	21 b3       	in	r18, 0x11	; 17
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_init+0xe4>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_init+0xe0>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	81 bb       	out	0x11, r24	; 17
 3a6:	08 95       	ret

000003a8 <DIO_write>:
	}
}

void DIO_write(uint8_t port_number, uint8_t pin_number, uint8_t value)
{
		switch(port_number)
 3a8:	82 34       	cpi	r24, 0x42	; 66
 3aa:	29 f1       	breq	.+74     	; 0x3f6 <DIO_write+0x4e>
 3ac:	18 f4       	brcc	.+6      	; 0x3b4 <DIO_write+0xc>
 3ae:	81 34       	cpi	r24, 0x41	; 65
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <DIO_write+0x18>
 3b2:	08 95       	ret
 3b4:	83 34       	cpi	r24, 0x43	; 67
 3b6:	d1 f1       	breq	.+116    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 3b8:	84 34       	cpi	r24, 0x44	; 68
 3ba:	09 f4       	brne	.+2      	; 0x3be <DIO_write+0x16>
 3bc:	52 c0       	rjmp	.+164    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3be:	08 95       	ret
		{
			case PORT_A:
			if(value == HIGH)
 3c0:	41 30       	cpi	r20, 0x01	; 1
 3c2:	59 f4       	brne	.+22     	; 0x3da <DIO_write+0x32>
			{
				//PORTA |= (1<<pin_number); //write 1
				SET_BIT(PORTA, pin_number);
 3c4:	2b b3       	in	r18, 0x1b	; 27
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_write+0x28>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_write+0x24>
 3d4:	82 2b       	or	r24, r18
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	08 95       	ret
			}
			else if(value == LOW)
 3da:	41 11       	cpse	r20, r1
 3dc:	5c c0       	rjmp	.+184    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			{
				//PORTA &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTA, pin_number);
 3de:	2b b3       	in	r18, 0x1b	; 27
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_write+0x42>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_write+0x3e>
 3ee:	80 95       	com	r24
 3f0:	82 23       	and	r24, r18
 3f2:	8b bb       	out	0x1b, r24	; 27
 3f4:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_B:
			if(value == HIGH)
 3f6:	41 30       	cpi	r20, 0x01	; 1
 3f8:	59 f4       	brne	.+22     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			{
				//PORTB |= (1<<pin_number); //write 1
				SET_BIT(PORTB, pin_number);
 3fa:	28 b3       	in	r18, 0x18	; 24
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	82 2b       	or	r24, r18
 40c:	88 bb       	out	0x18, r24	; 24
 40e:	08 95       	ret
			}
			else if(value == LOW)
 410:	41 11       	cpse	r20, r1
 412:	41 c0       	rjmp	.+130    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			{
				//PORTB &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTB, pin_number);
 414:	28 b3       	in	r18, 0x18	; 24
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	80 95       	com	r24
 426:	82 23       	and	r24, r18
 428:	88 bb       	out	0x18, r24	; 24
 42a:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_C:
			if(value == HIGH)
 42c:	41 30       	cpi	r20, 0x01	; 1
 42e:	59 f4       	brne	.+22     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			{
				//PORTC |= (1<<pin_number); //write 1
				SET_BIT(PORTC, pin_number);
 430:	25 b3       	in	r18, 0x15	; 21
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	82 2b       	or	r24, r18
 442:	85 bb       	out	0x15, r24	; 21
 444:	08 95       	ret
			}
			else if(value == LOW)
 446:	41 11       	cpse	r20, r1
 448:	26 c0       	rjmp	.+76     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			{
				//PORTC &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTC, pin_number);
 44a:	25 b3       	in	r18, 0x15	; 21
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	80 95       	com	r24
 45c:	82 23       	and	r24, r18
 45e:	85 bb       	out	0x15, r24	; 21
 460:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_D:
			if(value == HIGH)
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	59 f4       	brne	.+22     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				//PORTD |= (1<<pin_number); //write 1
				SET_BIT(PORTD, pin_number);
 466:	22 b3       	in	r18, 0x12	; 18
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	82 2b       	or	r24, r18
 478:	82 bb       	out	0x12, r24	; 18
 47a:	08 95       	ret
			}
			else if(value == LOW)
 47c:	41 11       	cpse	r20, r1
 47e:	0b c0       	rjmp	.+22     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			{
				//PORTD &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTD, pin_number);
 480:	22 b3       	in	r18, 0x12	; 18
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	80 95       	com	r24
 492:	82 23       	and	r24, r18
 494:	82 bb       	out	0x12, r24	; 18
 496:	08 95       	ret

00000498 <LCD_4_bit_sendCommand>:
	LCD_4_bit_sendCommand(0x01);	//clear Display
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
	
}
void LCD_4_bit_sendCommand(uint8_t command)
{
 498:	cf 93       	push	r28
 49a:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command & 0xF0); //Sending upper nibble
 49c:	85 b3       	in	r24, 0x15	; 21
 49e:	8f 70       	andi	r24, 0x0F	; 15
 4a0:	9c 2f       	mov	r25, r28
 4a2:	90 7f       	andi	r25, 0xF0	; 240
 4a4:	89 2b       	or	r24, r25
 4a6:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port &= ~(1<<RS); // RS PIN = 0 command register
 4a8:	82 b3       	in	r24, 0x12	; 18
 4aa:	8b 7f       	andi	r24, 0xFB	; 251
 4ac:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
 4ae:	82 b3       	in	r24, 0x12	; 18
 4b0:	87 7f       	andi	r24, 0xF7	; 247
 4b2:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 4b4:	82 b3       	in	r24, 0x12	; 18
 4b6:	80 61       	ori	r24, 0x10	; 16
 4b8:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 4c6:	82 b3       	in	r24, 0x12	; 18
 4c8:	8f 7e       	andi	r24, 0xEF	; 239
 4ca:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command << 4); //Sending upper nibble
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	30 e1       	ldi	r19, 0x10	; 16
 4dc:	c3 9f       	mul	r28, r19
 4de:	c0 01       	movw	r24, r0
 4e0:	11 24       	eor	r1, r1
 4e2:	92 2f       	mov	r25, r18
 4e4:	9f 70       	andi	r25, 0x0F	; 15
 4e6:	89 2b       	or	r24, r25
 4e8:	85 bb       	out	0x15, r24	; 21
		
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 4ea:	82 b3       	in	r24, 0x12	; 18
 4ec:	80 61       	ori	r24, 0x10	; 16
 4ee:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 4fc:	82 b3       	in	r24, 0x12	; 18
 4fe:	8f 7e       	andi	r24, 0xEF	; 239
 500:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
}
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <LCD_4_bit_init>:
	
}

void LCD_4_bit_init(void)
{
	LCD_Command_Port_Dir |= (1<<2) | (1<<3) | (1<<4);  //Make PIN0, PIN1, PIN2 in PORTD outputs
 512:	81 b3       	in	r24, 0x11	; 17
 514:	8c 61       	ori	r24, 0x1C	; 28
 516:	81 bb       	out	0x11, r24	; 17
	LCD_Data_PORT_Dir |= (1<<4) | (1<<5) | (1<<6) | (1<<7); //Make PIN4, PIN5, PIN6, PIN7 in PORTC outputs
 518:	84 b3       	in	r24, 0x14	; 20
 51a:	80 6f       	ori	r24, 0xF0	; 240
 51c:	84 bb       	out	0x14, r24	; 20
	TIMER_set(Normal);
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 1e 03 	call	0x63c	; 0x63c <TIMER_set>
	TIMER0_delay(20, no_prescale);	//LCD power ON delay always >15ms
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	84 e1       	ldi	r24, 0x14	; 20
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	LCD_4_bit_sendCommand(0x02);	//Send for 4 bit initialization of the LCD
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x28);	//initialization of 5x7 LCD in 4 bit mode
 536:	88 e2       	ldi	r24, 0x28	; 40
 538:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x0C);	//Display ON, Cursor OFF
 53c:	8c e0       	ldi	r24, 0x0C	; 12
 53e:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x06);	//Auto increment cursor
 542:	86 e0       	ldi	r24, 0x06	; 6
 544:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x01);	//clear Display
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
 54e:	80 e8       	ldi	r24, 0x80	; 128
 550:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_4_bit_sendCommand>
 554:	08 95       	ret

00000556 <LCD_4_bit_sendChar>:
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
	
	TIMER0_delay(1,no_prescale);
}
void LCD_4_bit_sendChar(uint8_t character)
{
 556:	cf 93       	push	r28
 558:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character & 0xF0); //Sending upper nibble
 55a:	85 b3       	in	r24, 0x15	; 21
 55c:	8f 70       	andi	r24, 0x0F	; 15
 55e:	9c 2f       	mov	r25, r28
 560:	90 7f       	andi	r25, 0xF0	; 240
 562:	89 2b       	or	r24, r25
 564:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<RS); // RS PIN = 1 data register
 566:	82 b3       	in	r24, 0x12	; 18
 568:	84 60       	ori	r24, 0x04	; 4
 56a:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
 56c:	82 b3       	in	r24, 0x12	; 18
 56e:	87 7f       	andi	r24, 0xF7	; 247
 570:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 572:	82 b3       	in	r24, 0x12	; 18
 574:	80 61       	ori	r24, 0x10	; 16
 576:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 584:	82 b3       	in	r24, 0x12	; 18
 586:	8f 7e       	andi	r24, 0xEF	; 239
 588:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character << 4); //Sending upper nibble
 596:	25 b3       	in	r18, 0x15	; 21
 598:	30 e1       	ldi	r19, 0x10	; 16
 59a:	c3 9f       	mul	r28, r19
 59c:	c0 01       	movw	r24, r0
 59e:	11 24       	eor	r1, r1
 5a0:	92 2f       	mov	r25, r18
 5a2:	9f 70       	andi	r25, 0x0F	; 15
 5a4:	89 2b       	or	r24, r25
 5a6:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 5a8:	82 b3       	in	r24, 0x12	; 18
 5aa:	80 61       	ori	r24, 0x10	; 16
 5ac:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 5ba:	82 b3       	in	r24, 0x12	; 18
 5bc:	8f 7e       	andi	r24, 0xEF	; 239
 5be:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 80 03 	call	0x700	; 0x700 <TIMER0_delay>
}
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <LCD_4_bit_sendString>:
void LCD_4_bit_sendString(uint8_t *str)
{
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	8c 01       	movw	r16, r24
	uint8_t i;
	
	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
 5d8:	c0 e0       	ldi	r28, 0x00	; 0
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <LCD_4_bit_sendString+0x12>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
 5dc:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_4_bit_sendChar>
}
void LCD_4_bit_sendString(uint8_t *str)
{
	uint8_t i;
	
	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
 5e0:	cf 5f       	subi	r28, 0xFF	; 255
 5e2:	f8 01       	movw	r30, r16
 5e4:	ec 0f       	add	r30, r28
 5e6:	f1 1d       	adc	r31, r1
 5e8:	80 81       	ld	r24, Z
 5ea:	81 11       	cpse	r24, r1
 5ec:	f7 cf       	rjmp	.-18     	; 0x5dc <LCD_4_bit_sendString+0xc>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
	}
	
}
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <Spi_Slave_init>:

}

void Spi_Slave_init(void)
{
	DDRA = 0xFF;
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	8a bb       	out	0x1a, r24	; 26
	//initialize the IN and OUT PINS
	DIO_init(PORT_B,SS,IN);
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	64 e0       	ldi	r22, 0x04	; 4
 5fe:	82 e4       	ldi	r24, 0x42	; 66
 600:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_init>
	DIO_init(PORT_B,SCK,IN);
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	67 e0       	ldi	r22, 0x07	; 7
 608:	82 e4       	ldi	r24, 0x42	; 66
 60a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_init>
	DIO_init(PORT_B,MOSI,IN);
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	65 e0       	ldi	r22, 0x05	; 5
 612:	82 e4       	ldi	r24, 0x42	; 66
 614:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_init>
	DIO_init(PORT_B,MISO,OUT);
 618:	41 e0       	ldi	r20, 0x01	; 1
 61a:	66 e0       	ldi	r22, 0x06	; 6
 61c:	82 e4       	ldi	r24, 0x42	; 66
 61e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <DIO_init>
	//Select Master mode, prescale of /16, enable the SPI
	SPCR |= (1<<SPE) | (1<<SPR1);
 622:	8d b1       	in	r24, 0x0d	; 13
 624:	82 64       	ori	r24, 0x42	; 66
 626:	8d b9       	out	0x0d, r24	; 13
	//disable the double SPI speed bit
	SPSR &= ~ (1<<SPI2X);	
 628:	8e b1       	in	r24, 0x0e	; 14
 62a:	8e 7f       	andi	r24, 0xFE	; 254
 62c:	8e b9       	out	0x0e, r24	; 14
 62e:	08 95       	ret

00000630 <Spi_Slave_receive>:
}
uint8_t Spi_Slave_receive(void)
{
	SPDR = 0xFF;
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	8f b9       	out	0x0f, r24	; 15
	
	while(READ_BIT(SPSR,SPIF) == 0);
 634:	77 9b       	sbis	0x0e, 7	; 14
 636:	fe cf       	rjmp	.-4      	; 0x634 <Spi_Slave_receive+0x4>
	
	return SPDR;	
 638:	8f b1       	in	r24, 0x0f	; 15
 63a:	08 95       	ret

0000063c <TIMER_set>:

//functions definitions

void TIMER_set(uint8_t Mode)
{
	switch(Mode)
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	69 f0       	breq	.+26     	; 0x65a <TIMER_set+0x1e>
 640:	28 f0       	brcs	.+10     	; 0x64c <TIMER_set+0x10>
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	89 f0       	breq	.+34     	; 0x668 <TIMER_set+0x2c>
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	b1 f0       	breq	.+44     	; 0x676 <TIMER_set+0x3a>
 64a:	08 95       	ret
	{
		case Normal:
			ClEAR_BIT(TCCR0, PIN3) ;		//Normal Mode
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	87 7f       	andi	r24, 0xF7	; 247
 650:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;	
 652:	83 b7       	in	r24, 0x33	; 51
 654:	8f 7b       	andi	r24, 0xBF	; 191
 656:	83 bf       	out	0x33, r24	; 51
		break;
 658:	08 95       	ret
		
		case PWM_Phase_Correct:
			ClEAR_BIT(TCCR0, PIN3) ;
 65a:	83 b7       	in	r24, 0x33	; 51
 65c:	87 7f       	andi	r24, 0xF7	; 247
 65e:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			//PWM_Phase_Correct Mode
 660:	83 b7       	in	r24, 0x33	; 51
 662:	80 64       	ori	r24, 0x40	; 64
 664:	83 bf       	out	0x33, r24	; 51
		break;	
 666:	08 95       	ret
			
		case CTC:
			SET_BIT(TCCR0, PIN3) ;			//CTC Mode
 668:	83 b7       	in	r24, 0x33	; 51
 66a:	88 60       	ori	r24, 0x08	; 8
 66c:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;			
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	8f 7b       	andi	r24, 0xBF	; 191
 672:	83 bf       	out	0x33, r24	; 51
		break;
 674:	08 95       	ret
		
		case Fast_PWM:
			SET_BIT(TCCR0, PIN3) ;			//Fast_PWM Mode
 676:	83 b7       	in	r24, 0x33	; 51
 678:	88 60       	ori	r24, 0x08	; 8
 67a:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	80 64       	ori	r24, 0x40	; 64
 680:	83 bf       	out	0x33, r24	; 51
 682:	08 95       	ret

00000684 <TIMER_start>:
	}
	
}
void TIMER_start(uint16_t prescale)
{
	switch(prescale)
 684:	88 30       	cpi	r24, 0x08	; 8
 686:	91 05       	cpc	r25, r1
 688:	d1 f0       	breq	.+52     	; 0x6be <TIMER_start+0x3a>
 68a:	48 f4       	brcc	.+18     	; 0x69e <TIMER_start+0x1a>
 68c:	85 30       	cpi	r24, 0x05	; 5
 68e:	91 05       	cpc	r25, r1
 690:	31 f1       	breq	.+76     	; 0x6de <TIMER_start+0x5a>
 692:	86 30       	cpi	r24, 0x06	; 6
 694:	91 05       	cpc	r25, r1
 696:	39 f1       	breq	.+78     	; 0x6e6 <TIMER_start+0x62>
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	41 f5       	brne	.+80     	; 0x6ec <TIMER_start+0x68>
 69c:	0c c0       	rjmp	.+24     	; 0x6b6 <TIMER_start+0x32>
 69e:	81 15       	cp	r24, r1
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	92 07       	cpc	r25, r18
 6a4:	a1 f0       	breq	.+40     	; 0x6ce <TIMER_start+0x4a>
 6a6:	81 15       	cp	r24, r1
 6a8:	24 e0       	ldi	r18, 0x04	; 4
 6aa:	92 07       	cpc	r25, r18
 6ac:	a1 f0       	breq	.+40     	; 0x6d6 <TIMER_start+0x52>
 6ae:	80 34       	cpi	r24, 0x40	; 64
 6b0:	91 05       	cpc	r25, r1
 6b2:	e1 f4       	brne	.+56     	; 0x6ec <TIMER_start+0x68>
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <TIMER_start+0x42>
	{
		case no_prescale:				//No prescaling
			TCCR0 |= 0b00000001;
 6b6:	83 b7       	in	r24, 0x33	; 51
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	83 bf       	out	0x33, r24	; 51
		break;
 6bc:	08 95       	ret
		
		case prescale8:					//8 prescaling
			TCCR0 |= 0b00000010;
 6be:	83 b7       	in	r24, 0x33	; 51
 6c0:	82 60       	ori	r24, 0x02	; 2
 6c2:	83 bf       	out	0x33, r24	; 51
		break;
 6c4:	08 95       	ret

		case prescale64:				//64 prescaling
			TCCR0 |= 0b00000011;
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	83 60       	ori	r24, 0x03	; 3
 6ca:	83 bf       	out	0x33, r24	; 51
		break;
 6cc:	08 95       	ret
		
		case prescale256:				// 256 prescaling
			TCCR0 |= 0b00000100;
 6ce:	83 b7       	in	r24, 0x33	; 51
 6d0:	84 60       	ori	r24, 0x04	; 4
 6d2:	83 bf       	out	0x33, r24	; 51
		break;
 6d4:	08 95       	ret
		
		case prescale1024:				//1024 prescaling
			TCCR0 |= 0b00000101;
 6d6:	83 b7       	in	r24, 0x33	; 51
 6d8:	85 60       	ori	r24, 0x05	; 5
 6da:	83 bf       	out	0x33, r24	; 51
		break;
 6dc:	08 95       	ret
		
		case External_Falling: //External_Falling on T0 pin
			TCCR0 |= 0b00000110;
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	86 60       	ori	r24, 0x06	; 6
 6e2:	83 bf       	out	0x33, r24	; 51
		break;
 6e4:	08 95       	ret


		case External_Raising : //External_Raising on T0 pin
			TCCR0 |= 0b00000111;
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	87 60       	ori	r24, 0x07	; 7
 6ea:	83 bf       	out	0x33, r24	; 51
 6ec:	08 95       	ret

000006ee <TIMER_overflow_read>:
	
}
void TIMER_overflow_read(void)
{
	//wait until the overflow flag is set
	while((READ_BIT(TIFR, PIN0) == 0));
 6ee:	08 b6       	in	r0, 0x38	; 56
 6f0:	00 fe       	sbrs	r0, 0
 6f2:	fd cf       	rjmp	.-6      	; 0x6ee <TIMER_overflow_read>
	
	//Clear the OverFlow flag
	SET_BIT(TIFR, PIN0);
 6f4:	88 b7       	in	r24, 0x38	; 56
 6f6:	81 60       	ori	r24, 0x01	; 1
 6f8:	88 bf       	out	0x38, r24	; 56
 6fa:	08 95       	ret

000006fc <TIMER_stop>:
}
void TIMER_stop(void)
{
	//Stop the timer
	TCCR0 = 0x00;
 6fc:	13 be       	out	0x33, r1	; 51
 6fe:	08 95       	ret

00000700 <TIMER0_delay>:
}

void TIMER0_delay(uint16_t Time_delay, uint16_t prescale)
{
 700:	4f 92       	push	r4
 702:	5f 92       	push	r5
 704:	6f 92       	push	r6
 706:	7f 92       	push	r7
 708:	8f 92       	push	r8
 70a:	9f 92       	push	r9
 70c:	af 92       	push	r10
 70e:	bf 92       	push	r11
 710:	cf 92       	push	r12
 712:	df 92       	push	r13
 714:	ef 92       	push	r14
 716:	ff 92       	push	r15
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	00 d0       	rcall	.+0      	; 0x71e <TIMER0_delay+0x1e>
 71e:	00 d0       	rcall	.+0      	; 0x720 <TIMER0_delay+0x20>
 720:	00 d0       	rcall	.+0      	; 0x722 <TIMER0_delay+0x22>
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	7e 83       	std	Y+6, r23	; 0x06
 728:	6d 83       	std	Y+5, r22	; 0x05
	Time_delay_ = Time_delay*0.001;
 72a:	bc 01       	movw	r22, r24
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 734:	69 83       	std	Y+1, r22	; 0x01
 736:	7a 83       	std	Y+2, r23	; 0x02
 738:	8b 83       	std	Y+3, r24	; 0x03
 73a:	9c 83       	std	Y+4, r25	; 0x04
 73c:	2f e6       	ldi	r18, 0x6F	; 111
 73e:	32 e1       	ldi	r19, 0x12	; 18
 740:	43 e8       	ldi	r20, 0x83	; 131
 742:	5a e3       	ldi	r21, 0x3A	; 58
 744:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3>
 748:	4b 01       	movw	r8, r22
 74a:	5c 01       	movw	r10, r24
 74c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <Time_delay_>
 750:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <Time_delay_+0x1>
 754:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <Time_delay_+0x2>
 758:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <Time_delay_+0x3>
	
	Timer_Tick = ( (prescale) / (pow(10.0,6.0)) );
 75c:	2d 81       	ldd	r18, Y+5	; 0x05
 75e:	3e 81       	ldd	r19, Y+6	; 0x06
 760:	b9 01       	movw	r22, r18
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 76a:	20 e0       	ldi	r18, 0x00	; 0
 76c:	34 e2       	ldi	r19, 0x24	; 36
 76e:	44 e7       	ldi	r20, 0x74	; 116
 770:	59 e4       	ldi	r21, 0x49	; 73
 772:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 776:	2b 01       	movw	r4, r22
 778:	3c 01       	movw	r6, r24
 77a:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <Timer_Tick>
 77e:	70 93 92 00 	sts	0x0092, r23	; 0x800092 <Timer_Tick+0x1>
 782:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <Timer_Tick+0x2>
 786:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <Timer_Tick+0x3>
	
	Timer_Delay_max = 	(Timer_Tick) * (256.0);
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	40 e8       	ldi	r20, 0x80	; 128
 790:	53 e4       	ldi	r21, 0x43	; 67
 792:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3>
 796:	6b 01       	movw	r12, r22
 798:	7c 01       	movw	r14, r24
 79a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <Timer_Delay_max>
 79e:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <Timer_Delay_max+0x1>
 7a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Timer_Delay_max+0x2>
 7a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <Timer_Delay_max+0x3>
	
	if(Time_delay < Timer_Delay_max)
 7aa:	9b 01       	movw	r18, r22
 7ac:	ac 01       	movw	r20, r24
 7ae:	69 81       	ldd	r22, Y+1	; 0x01
 7b0:	7a 81       	ldd	r23, Y+2	; 0x02
 7b2:	8b 81       	ldd	r24, Y+3	; 0x03
 7b4:	9c 81       	ldd	r25, Y+4	; 0x04
 7b6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 7ba:	88 23       	and	r24, r24
 7bc:	bc f4       	brge	.+46     	; 0x7ec <TIMER0_delay+0xec>
	{
		Timer_initial_value = ( (Timer_Delay_max - Time_delay ) / (Timer_Tick) );
 7be:	29 81       	ldd	r18, Y+1	; 0x01
 7c0:	3a 81       	ldd	r19, Y+2	; 0x02
 7c2:	4b 81       	ldd	r20, Y+3	; 0x03
 7c4:	5c 81       	ldd	r21, Y+4	; 0x04
 7c6:	c7 01       	movw	r24, r14
 7c8:	b6 01       	movw	r22, r12
 7ca:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__subsf3>
 7ce:	a3 01       	movw	r20, r6
 7d0:	92 01       	movw	r18, r4
 7d2:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 7d6:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
 7da:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <Timer_initial_value>
			
		Number_of_overflows_needed = 1;
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <Number_of_overflows_needed+0x1>
 7e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Number_of_overflows_needed>
 7ea:	4c c0       	rjmp	.+152    	; 0x884 <__stack+0x25>
	}
	else if(Time_delay == Timer_Delay_max)
 7ec:	a7 01       	movw	r20, r14
 7ee:	96 01       	movw	r18, r12
 7f0:	69 81       	ldd	r22, Y+1	; 0x01
 7f2:	7a 81       	ldd	r23, Y+2	; 0x02
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	9c 81       	ldd	r25, Y+4	; 0x04
 7f8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 7fc:	81 11       	cpse	r24, r1
 7fe:	09 c0       	rjmp	.+18     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
	{
		Timer_initial_value = 0x00;
 800:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <Timer_initial_value>
		Number_of_overflows_needed = 1;
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <Number_of_overflows_needed+0x1>
 80c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <Number_of_overflows_needed>
 810:	39 c0       	rjmp	.+114    	; 0x884 <__stack+0x25>
	}	
	
	else if(Time_delay_ > Timer_Delay_max)
 812:	a7 01       	movw	r20, r14
 814:	96 01       	movw	r18, r12
 816:	c5 01       	movw	r24, r10
 818:	b4 01       	movw	r22, r8
 81a:	0e 94 98 06 	call	0xd30	; 0xd30 <__gesf2>
 81e:	18 16       	cp	r1, r24
 820:	8c f5       	brge	.+98     	; 0x884 <__stack+0x25>
	{
		Number_of_overflows_needed = ceil((Time_delay_/Timer_Delay_max));
 822:	a7 01       	movw	r20, r14
 824:	96 01       	movw	r18, r12
 826:	c5 01       	movw	r24, r10
 828:	b4 01       	movw	r22, r8
 82a:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 82e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <ceil>
 832:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
 836:	6b 01       	movw	r12, r22
 838:	7c 01       	movw	r14, r24
 83a:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <Number_of_overflows_needed+0x1>
 83e:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Number_of_overflows_needed>
		Timer_initial_value = (ceil((256) - ((Time_delay_/Timer_Tick)/(Number_of_overflows_needed))));
 842:	a3 01       	movw	r20, r6
 844:	92 01       	movw	r18, r4
 846:	c5 01       	movw	r24, r10
 848:	b4 01       	movw	r22, r8
 84a:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 84e:	4b 01       	movw	r8, r22
 850:	5c 01       	movw	r10, r24
 852:	b6 01       	movw	r22, r12
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__floatunsisf>
 85c:	9b 01       	movw	r18, r22
 85e:	ac 01       	movw	r20, r24
 860:	c5 01       	movw	r24, r10
 862:	b4 01       	movw	r22, r8
 864:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
 868:	9b 01       	movw	r18, r22
 86a:	ac 01       	movw	r20, r24
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	80 e8       	ldi	r24, 0x80	; 128
 872:	93 e4       	ldi	r25, 0x43	; 67
 874:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__subsf3>
 878:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <ceil>
 87c:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
 880:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <Timer_initial_value>
	}
	
	TCNT0 = Timer_initial_value;		// setting initial value
 884:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Timer_initial_value>
 888:	82 bf       	out	0x32, r24	; 50
	
	TIMER_start(prescale);
 88a:	8d 81       	ldd	r24, Y+5	; 0x05
 88c:	9e 81       	ldd	r25, Y+6	; 0x06
 88e:	0e 94 42 03 	call	0x684	; 0x684 <TIMER_start>

	while(overflows_counter < Number_of_overflows_needed)
 892:	0b c0       	rjmp	.+22     	; 0x8aa <__stack+0x4b>
	{
		TIMER_overflow_read();
 894:	0e 94 77 03 	call	0x6ee	; 0x6ee <TIMER_overflow_read>
		overflows_counter++;
 898:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <overflows_counter>
 89c:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <overflows_counter+0x1>
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <overflows_counter+0x1>
 8a6:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <overflows_counter>
	
	TCNT0 = Timer_initial_value;		// setting initial value
	
	TIMER_start(prescale);

	while(overflows_counter < Number_of_overflows_needed)
 8aa:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <overflows_counter>
 8ae:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <overflows_counter+0x1>
 8b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Number_of_overflows_needed>
 8b6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Number_of_overflows_needed+0x1>
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	50 f3       	brcs	.-44     	; 0x894 <__stack+0x35>
	{
		TIMER_overflow_read();
		overflows_counter++;
	}
	overflows_counter = 0;
 8c0:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <overflows_counter+0x1>
 8c4:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <overflows_counter>
	
	TIMER_stop();
 8c8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TIMER_stop>
 8cc:	26 96       	adiw	r28, 0x06	; 6
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	ff 90       	pop	r15
 8de:	ef 90       	pop	r14
 8e0:	df 90       	pop	r13
 8e2:	cf 90       	pop	r12
 8e4:	bf 90       	pop	r11
 8e6:	af 90       	pop	r10
 8e8:	9f 90       	pop	r9
 8ea:	8f 90       	pop	r8
 8ec:	7f 90       	pop	r7
 8ee:	6f 90       	pop	r6
 8f0:	5f 90       	pop	r5
 8f2:	4f 90       	pop	r4
 8f4:	08 95       	ret

000008f6 <__subsf3>:
 8f6:	50 58       	subi	r21, 0x80	; 128

000008f8 <__addsf3>:
 8f8:	bb 27       	eor	r27, r27
 8fa:	aa 27       	eor	r26, r26
 8fc:	0e 94 93 04 	call	0x926	; 0x926 <__addsf3x>
 900:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
 904:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscA>
 908:	38 f0       	brcs	.+14     	; 0x918 <__addsf3+0x20>
 90a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_pscB>
 90e:	20 f0       	brcs	.+8      	; 0x918 <__addsf3+0x20>
 910:	39 f4       	brne	.+14     	; 0x920 <__addsf3+0x28>
 912:	9f 3f       	cpi	r25, 0xFF	; 255
 914:	19 f4       	brne	.+6      	; 0x91c <__addsf3+0x24>
 916:	26 f4       	brtc	.+8      	; 0x920 <__addsf3+0x28>
 918:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_nan>
 91c:	0e f4       	brtc	.+2      	; 0x920 <__addsf3+0x28>
 91e:	e0 95       	com	r30
 920:	e7 fb       	bst	r30, 7
 922:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>

00000926 <__addsf3x>:
 926:	e9 2f       	mov	r30, r25
 928:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_split3>
 92c:	58 f3       	brcs	.-42     	; 0x904 <__addsf3+0xc>
 92e:	ba 17       	cp	r27, r26
 930:	62 07       	cpc	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	95 07       	cpc	r25, r21
 938:	20 f0       	brcs	.+8      	; 0x942 <__addsf3x+0x1c>
 93a:	79 f4       	brne	.+30     	; 0x95a <__addsf3x+0x34>
 93c:	a6 f5       	brtc	.+104    	; 0x9a6 <__addsf3x+0x80>
 93e:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_zero>
 942:	0e f4       	brtc	.+2      	; 0x946 <__addsf3x+0x20>
 944:	e0 95       	com	r30
 946:	0b 2e       	mov	r0, r27
 948:	ba 2f       	mov	r27, r26
 94a:	a0 2d       	mov	r26, r0
 94c:	0b 01       	movw	r0, r22
 94e:	b9 01       	movw	r22, r18
 950:	90 01       	movw	r18, r0
 952:	0c 01       	movw	r0, r24
 954:	ca 01       	movw	r24, r20
 956:	a0 01       	movw	r20, r0
 958:	11 24       	eor	r1, r1
 95a:	ff 27       	eor	r31, r31
 95c:	59 1b       	sub	r21, r25
 95e:	99 f0       	breq	.+38     	; 0x986 <__addsf3x+0x60>
 960:	59 3f       	cpi	r21, 0xF9	; 249
 962:	50 f4       	brcc	.+20     	; 0x978 <__addsf3x+0x52>
 964:	50 3e       	cpi	r21, 0xE0	; 224
 966:	68 f1       	brcs	.+90     	; 0x9c2 <__addsf3x+0x9c>
 968:	1a 16       	cp	r1, r26
 96a:	f0 40       	sbci	r31, 0x00	; 0
 96c:	a2 2f       	mov	r26, r18
 96e:	23 2f       	mov	r18, r19
 970:	34 2f       	mov	r19, r20
 972:	44 27       	eor	r20, r20
 974:	58 5f       	subi	r21, 0xF8	; 248
 976:	f3 cf       	rjmp	.-26     	; 0x95e <__addsf3x+0x38>
 978:	46 95       	lsr	r20
 97a:	37 95       	ror	r19
 97c:	27 95       	ror	r18
 97e:	a7 95       	ror	r26
 980:	f0 40       	sbci	r31, 0x00	; 0
 982:	53 95       	inc	r21
 984:	c9 f7       	brne	.-14     	; 0x978 <__addsf3x+0x52>
 986:	7e f4       	brtc	.+30     	; 0x9a6 <__addsf3x+0x80>
 988:	1f 16       	cp	r1, r31
 98a:	ba 0b       	sbc	r27, r26
 98c:	62 0b       	sbc	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	ba f0       	brmi	.+46     	; 0x9c2 <__addsf3x+0x9c>
 994:	91 50       	subi	r25, 0x01	; 1
 996:	a1 f0       	breq	.+40     	; 0x9c0 <__addsf3x+0x9a>
 998:	ff 0f       	add	r31, r31
 99a:	bb 1f       	adc	r27, r27
 99c:	66 1f       	adc	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	c2 f7       	brpl	.-16     	; 0x994 <__addsf3x+0x6e>
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <__addsf3x+0x9c>
 9a6:	ba 0f       	add	r27, r26
 9a8:	62 1f       	adc	r22, r18
 9aa:	73 1f       	adc	r23, r19
 9ac:	84 1f       	adc	r24, r20
 9ae:	48 f4       	brcc	.+18     	; 0x9c2 <__addsf3x+0x9c>
 9b0:	87 95       	ror	r24
 9b2:	77 95       	ror	r23
 9b4:	67 95       	ror	r22
 9b6:	b7 95       	ror	r27
 9b8:	f7 95       	ror	r31
 9ba:	9e 3f       	cpi	r25, 0xFE	; 254
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__addsf3x+0x9a>
 9be:	b0 cf       	rjmp	.-160    	; 0x920 <__addsf3+0x28>
 9c0:	93 95       	inc	r25
 9c2:	88 0f       	add	r24, r24
 9c4:	08 f0       	brcs	.+2      	; 0x9c8 <__addsf3x+0xa2>
 9c6:	99 27       	eor	r25, r25
 9c8:	ee 0f       	add	r30, r30
 9ca:	97 95       	ror	r25
 9cc:	87 95       	ror	r24
 9ce:	08 95       	ret

000009d0 <ceil>:
 9d0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_trunc>
 9d4:	90 f0       	brcs	.+36     	; 0x9fa <ceil+0x2a>
 9d6:	9f 37       	cpi	r25, 0x7F	; 127
 9d8:	48 f4       	brcc	.+18     	; 0x9ec <ceil+0x1c>
 9da:	91 11       	cpse	r25, r1
 9dc:	16 f4       	brtc	.+4      	; 0x9e2 <ceil+0x12>
 9de:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	80 e8       	ldi	r24, 0x80	; 128
 9e8:	9f e3       	ldi	r25, 0x3F	; 63
 9ea:	08 95       	ret
 9ec:	26 f0       	brts	.+8      	; 0x9f6 <ceil+0x26>
 9ee:	1b 16       	cp	r1, r27
 9f0:	61 1d       	adc	r22, r1
 9f2:	71 1d       	adc	r23, r1
 9f4:	81 1d       	adc	r24, r1
 9f6:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__fp_mintl>
 9fa:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_mpack>

000009fe <__cmpsf2>:
 9fe:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_cmp>
 a02:	08 f4       	brcc	.+2      	; 0xa06 <__cmpsf2+0x8>
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	08 95       	ret

00000a08 <__divsf3>:
 a08:	0e 94 18 05 	call	0xa30	; 0xa30 <__divsf3x>
 a0c:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
 a10:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_pscB>
 a14:	58 f0       	brcs	.+22     	; 0xa2c <__divsf3+0x24>
 a16:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscA>
 a1a:	40 f0       	brcs	.+16     	; 0xa2c <__divsf3+0x24>
 a1c:	29 f4       	brne	.+10     	; 0xa28 <__divsf3+0x20>
 a1e:	5f 3f       	cpi	r21, 0xFF	; 255
 a20:	29 f0       	breq	.+10     	; 0xa2c <__divsf3+0x24>
 a22:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>
 a26:	51 11       	cpse	r21, r1
 a28:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
 a2c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_nan>

00000a30 <__divsf3x>:
 a30:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_split3>
 a34:	68 f3       	brcs	.-38     	; 0xa10 <__divsf3+0x8>

00000a36 <__divsf3_pse>:
 a36:	99 23       	and	r25, r25
 a38:	b1 f3       	breq	.-20     	; 0xa26 <__divsf3+0x1e>
 a3a:	55 23       	and	r21, r21
 a3c:	91 f3       	breq	.-28     	; 0xa22 <__divsf3+0x1a>
 a3e:	95 1b       	sub	r25, r21
 a40:	55 0b       	sbc	r21, r21
 a42:	bb 27       	eor	r27, r27
 a44:	aa 27       	eor	r26, r26
 a46:	62 17       	cp	r22, r18
 a48:	73 07       	cpc	r23, r19
 a4a:	84 07       	cpc	r24, r20
 a4c:	38 f0       	brcs	.+14     	; 0xa5c <__divsf3_pse+0x26>
 a4e:	9f 5f       	subi	r25, 0xFF	; 255
 a50:	5f 4f       	sbci	r21, 0xFF	; 255
 a52:	22 0f       	add	r18, r18
 a54:	33 1f       	adc	r19, r19
 a56:	44 1f       	adc	r20, r20
 a58:	aa 1f       	adc	r26, r26
 a5a:	a9 f3       	breq	.-22     	; 0xa46 <__divsf3_pse+0x10>
 a5c:	35 d0       	rcall	.+106    	; 0xac8 <__divsf3_pse+0x92>
 a5e:	0e 2e       	mov	r0, r30
 a60:	3a f0       	brmi	.+14     	; 0xa70 <__divsf3_pse+0x3a>
 a62:	e0 e8       	ldi	r30, 0x80	; 128
 a64:	32 d0       	rcall	.+100    	; 0xaca <__divsf3_pse+0x94>
 a66:	91 50       	subi	r25, 0x01	; 1
 a68:	50 40       	sbci	r21, 0x00	; 0
 a6a:	e6 95       	lsr	r30
 a6c:	00 1c       	adc	r0, r0
 a6e:	ca f7       	brpl	.-14     	; 0xa62 <__divsf3_pse+0x2c>
 a70:	2b d0       	rcall	.+86     	; 0xac8 <__divsf3_pse+0x92>
 a72:	fe 2f       	mov	r31, r30
 a74:	29 d0       	rcall	.+82     	; 0xac8 <__divsf3_pse+0x92>
 a76:	66 0f       	add	r22, r22
 a78:	77 1f       	adc	r23, r23
 a7a:	88 1f       	adc	r24, r24
 a7c:	bb 1f       	adc	r27, r27
 a7e:	26 17       	cp	r18, r22
 a80:	37 07       	cpc	r19, r23
 a82:	48 07       	cpc	r20, r24
 a84:	ab 07       	cpc	r26, r27
 a86:	b0 e8       	ldi	r27, 0x80	; 128
 a88:	09 f0       	breq	.+2      	; 0xa8c <__divsf3_pse+0x56>
 a8a:	bb 0b       	sbc	r27, r27
 a8c:	80 2d       	mov	r24, r0
 a8e:	bf 01       	movw	r22, r30
 a90:	ff 27       	eor	r31, r31
 a92:	93 58       	subi	r25, 0x83	; 131
 a94:	5f 4f       	sbci	r21, 0xFF	; 255
 a96:	3a f0       	brmi	.+14     	; 0xaa6 <__divsf3_pse+0x70>
 a98:	9e 3f       	cpi	r25, 0xFE	; 254
 a9a:	51 05       	cpc	r21, r1
 a9c:	78 f0       	brcs	.+30     	; 0xabc <__divsf3_pse+0x86>
 a9e:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>
 aa2:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
 aa6:	5f 3f       	cpi	r21, 0xFF	; 255
 aa8:	e4 f3       	brlt	.-8      	; 0xaa2 <__divsf3_pse+0x6c>
 aaa:	98 3e       	cpi	r25, 0xE8	; 232
 aac:	d4 f3       	brlt	.-12     	; 0xaa2 <__divsf3_pse+0x6c>
 aae:	86 95       	lsr	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	b7 95       	ror	r27
 ab6:	f7 95       	ror	r31
 ab8:	9f 5f       	subi	r25, 0xFF	; 255
 aba:	c9 f7       	brne	.-14     	; 0xaae <__divsf3_pse+0x78>
 abc:	88 0f       	add	r24, r24
 abe:	91 1d       	adc	r25, r1
 ac0:	96 95       	lsr	r25
 ac2:	87 95       	ror	r24
 ac4:	97 f9       	bld	r25, 7
 ac6:	08 95       	ret
 ac8:	e1 e0       	ldi	r30, 0x01	; 1
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	bb 1f       	adc	r27, r27
 ad2:	62 17       	cp	r22, r18
 ad4:	73 07       	cpc	r23, r19
 ad6:	84 07       	cpc	r24, r20
 ad8:	ba 07       	cpc	r27, r26
 ada:	20 f0       	brcs	.+8      	; 0xae4 <__divsf3_pse+0xae>
 adc:	62 1b       	sub	r22, r18
 ade:	73 0b       	sbc	r23, r19
 ae0:	84 0b       	sbc	r24, r20
 ae2:	ba 0b       	sbc	r27, r26
 ae4:	ee 1f       	adc	r30, r30
 ae6:	88 f7       	brcc	.-30     	; 0xaca <__divsf3_pse+0x94>
 ae8:	e0 95       	com	r30
 aea:	08 95       	ret

00000aec <__fixunssfsi>:
 aec:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_splitA>
 af0:	88 f0       	brcs	.+34     	; 0xb14 <__fixunssfsi+0x28>
 af2:	9f 57       	subi	r25, 0x7F	; 127
 af4:	98 f0       	brcs	.+38     	; 0xb1c <__fixunssfsi+0x30>
 af6:	b9 2f       	mov	r27, r25
 af8:	99 27       	eor	r25, r25
 afa:	b7 51       	subi	r27, 0x17	; 23
 afc:	b0 f0       	brcs	.+44     	; 0xb2a <__fixunssfsi+0x3e>
 afe:	e1 f0       	breq	.+56     	; 0xb38 <__fixunssfsi+0x4c>
 b00:	66 0f       	add	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	1a f0       	brmi	.+6      	; 0xb10 <__fixunssfsi+0x24>
 b0a:	ba 95       	dec	r27
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__fixunssfsi+0x14>
 b0e:	14 c0       	rjmp	.+40     	; 0xb38 <__fixunssfsi+0x4c>
 b10:	b1 30       	cpi	r27, 0x01	; 1
 b12:	91 f0       	breq	.+36     	; 0xb38 <__fixunssfsi+0x4c>
 b14:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_zero>
 b18:	b1 e0       	ldi	r27, 0x01	; 1
 b1a:	08 95       	ret
 b1c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_zero>
 b20:	67 2f       	mov	r22, r23
 b22:	78 2f       	mov	r23, r24
 b24:	88 27       	eor	r24, r24
 b26:	b8 5f       	subi	r27, 0xF8	; 248
 b28:	39 f0       	breq	.+14     	; 0xb38 <__fixunssfsi+0x4c>
 b2a:	b9 3f       	cpi	r27, 0xF9	; 249
 b2c:	cc f3       	brlt	.-14     	; 0xb20 <__fixunssfsi+0x34>
 b2e:	86 95       	lsr	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	b3 95       	inc	r27
 b36:	d9 f7       	brne	.-10     	; 0xb2e <__fixunssfsi+0x42>
 b38:	3e f4       	brtc	.+14     	; 0xb48 <__fixunssfsi+0x5c>
 b3a:	90 95       	com	r25
 b3c:	80 95       	com	r24
 b3e:	70 95       	com	r23
 b40:	61 95       	neg	r22
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	08 95       	ret

00000b4a <__floatunsisf>:
 b4a:	e8 94       	clt
 b4c:	09 c0       	rjmp	.+18     	; 0xb60 <__floatsisf+0x12>

00000b4e <__floatsisf>:
 b4e:	97 fb       	bst	r25, 7
 b50:	3e f4       	brtc	.+14     	; 0xb60 <__floatsisf+0x12>
 b52:	90 95       	com	r25
 b54:	80 95       	com	r24
 b56:	70 95       	com	r23
 b58:	61 95       	neg	r22
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	99 23       	and	r25, r25
 b62:	a9 f0       	breq	.+42     	; 0xb8e <__floatsisf+0x40>
 b64:	f9 2f       	mov	r31, r25
 b66:	96 e9       	ldi	r25, 0x96	; 150
 b68:	bb 27       	eor	r27, r27
 b6a:	93 95       	inc	r25
 b6c:	f6 95       	lsr	r31
 b6e:	87 95       	ror	r24
 b70:	77 95       	ror	r23
 b72:	67 95       	ror	r22
 b74:	b7 95       	ror	r27
 b76:	f1 11       	cpse	r31, r1
 b78:	f8 cf       	rjmp	.-16     	; 0xb6a <__floatsisf+0x1c>
 b7a:	fa f4       	brpl	.+62     	; 0xbba <__floatsisf+0x6c>
 b7c:	bb 0f       	add	r27, r27
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__floatsisf+0x36>
 b80:	60 ff       	sbrs	r22, 0
 b82:	1b c0       	rjmp	.+54     	; 0xbba <__floatsisf+0x6c>
 b84:	6f 5f       	subi	r22, 0xFF	; 255
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	16 c0       	rjmp	.+44     	; 0xbba <__floatsisf+0x6c>
 b8e:	88 23       	and	r24, r24
 b90:	11 f0       	breq	.+4      	; 0xb96 <__floatsisf+0x48>
 b92:	96 e9       	ldi	r25, 0x96	; 150
 b94:	11 c0       	rjmp	.+34     	; 0xbb8 <__floatsisf+0x6a>
 b96:	77 23       	and	r23, r23
 b98:	21 f0       	breq	.+8      	; 0xba2 <__floatsisf+0x54>
 b9a:	9e e8       	ldi	r25, 0x8E	; 142
 b9c:	87 2f       	mov	r24, r23
 b9e:	76 2f       	mov	r23, r22
 ba0:	05 c0       	rjmp	.+10     	; 0xbac <__floatsisf+0x5e>
 ba2:	66 23       	and	r22, r22
 ba4:	71 f0       	breq	.+28     	; 0xbc2 <__floatsisf+0x74>
 ba6:	96 e8       	ldi	r25, 0x86	; 134
 ba8:	86 2f       	mov	r24, r22
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	2a f0       	brmi	.+10     	; 0xbba <__floatsisf+0x6c>
 bb0:	9a 95       	dec	r25
 bb2:	66 0f       	add	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	da f7       	brpl	.-10     	; 0xbb0 <__floatsisf+0x62>
 bba:	88 0f       	add	r24, r24
 bbc:	96 95       	lsr	r25
 bbe:	87 95       	ror	r24
 bc0:	97 f9       	bld	r25, 7
 bc2:	08 95       	ret

00000bc4 <__fp_cmp>:
 bc4:	99 0f       	add	r25, r25
 bc6:	00 08       	sbc	r0, r0
 bc8:	55 0f       	add	r21, r21
 bca:	aa 0b       	sbc	r26, r26
 bcc:	e0 e8       	ldi	r30, 0x80	; 128
 bce:	fe ef       	ldi	r31, 0xFE	; 254
 bd0:	16 16       	cp	r1, r22
 bd2:	17 06       	cpc	r1, r23
 bd4:	e8 07       	cpc	r30, r24
 bd6:	f9 07       	cpc	r31, r25
 bd8:	c0 f0       	brcs	.+48     	; 0xc0a <__fp_cmp+0x46>
 bda:	12 16       	cp	r1, r18
 bdc:	13 06       	cpc	r1, r19
 bde:	e4 07       	cpc	r30, r20
 be0:	f5 07       	cpc	r31, r21
 be2:	98 f0       	brcs	.+38     	; 0xc0a <__fp_cmp+0x46>
 be4:	62 1b       	sub	r22, r18
 be6:	73 0b       	sbc	r23, r19
 be8:	84 0b       	sbc	r24, r20
 bea:	95 0b       	sbc	r25, r21
 bec:	39 f4       	brne	.+14     	; 0xbfc <__fp_cmp+0x38>
 bee:	0a 26       	eor	r0, r26
 bf0:	61 f0       	breq	.+24     	; 0xc0a <__fp_cmp+0x46>
 bf2:	23 2b       	or	r18, r19
 bf4:	24 2b       	or	r18, r20
 bf6:	25 2b       	or	r18, r21
 bf8:	21 f4       	brne	.+8      	; 0xc02 <__fp_cmp+0x3e>
 bfa:	08 95       	ret
 bfc:	0a 26       	eor	r0, r26
 bfe:	09 f4       	brne	.+2      	; 0xc02 <__fp_cmp+0x3e>
 c00:	a1 40       	sbci	r26, 0x01	; 1
 c02:	a6 95       	lsr	r26
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	81 1d       	adc	r24, r1
 c08:	81 1d       	adc	r24, r1
 c0a:	08 95       	ret

00000c0c <__fp_inf>:
 c0c:	97 f9       	bld	r25, 7
 c0e:	9f 67       	ori	r25, 0x7F	; 127
 c10:	80 e8       	ldi	r24, 0x80	; 128
 c12:	70 e0       	ldi	r23, 0x00	; 0
 c14:	60 e0       	ldi	r22, 0x00	; 0
 c16:	08 95       	ret

00000c18 <__fp_mintl>:
 c18:	88 23       	and	r24, r24
 c1a:	71 f4       	brne	.+28     	; 0xc38 <__fp_mintl+0x20>
 c1c:	77 23       	and	r23, r23
 c1e:	21 f0       	breq	.+8      	; 0xc28 <__fp_mintl+0x10>
 c20:	98 50       	subi	r25, 0x08	; 8
 c22:	87 2b       	or	r24, r23
 c24:	76 2f       	mov	r23, r22
 c26:	07 c0       	rjmp	.+14     	; 0xc36 <__fp_mintl+0x1e>
 c28:	66 23       	and	r22, r22
 c2a:	11 f4       	brne	.+4      	; 0xc30 <__fp_mintl+0x18>
 c2c:	99 27       	eor	r25, r25
 c2e:	0d c0       	rjmp	.+26     	; 0xc4a <__fp_mintl+0x32>
 c30:	90 51       	subi	r25, 0x10	; 16
 c32:	86 2b       	or	r24, r22
 c34:	70 e0       	ldi	r23, 0x00	; 0
 c36:	60 e0       	ldi	r22, 0x00	; 0
 c38:	2a f0       	brmi	.+10     	; 0xc44 <__fp_mintl+0x2c>
 c3a:	9a 95       	dec	r25
 c3c:	66 0f       	add	r22, r22
 c3e:	77 1f       	adc	r23, r23
 c40:	88 1f       	adc	r24, r24
 c42:	da f7       	brpl	.-10     	; 0xc3a <__fp_mintl+0x22>
 c44:	88 0f       	add	r24, r24
 c46:	96 95       	lsr	r25
 c48:	87 95       	ror	r24
 c4a:	97 f9       	bld	r25, 7
 c4c:	08 95       	ret

00000c4e <__fp_mpack>:
 c4e:	9f 3f       	cpi	r25, 0xFF	; 255
 c50:	31 f0       	breq	.+12     	; 0xc5e <__fp_mpack_finite+0xc>

00000c52 <__fp_mpack_finite>:
 c52:	91 50       	subi	r25, 0x01	; 1
 c54:	20 f4       	brcc	.+8      	; 0xc5e <__fp_mpack_finite+0xc>
 c56:	87 95       	ror	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	b7 95       	ror	r27
 c5e:	88 0f       	add	r24, r24
 c60:	91 1d       	adc	r25, r1
 c62:	96 95       	lsr	r25
 c64:	87 95       	ror	r24
 c66:	97 f9       	bld	r25, 7
 c68:	08 95       	ret

00000c6a <__fp_nan>:
 c6a:	9f ef       	ldi	r25, 0xFF	; 255
 c6c:	80 ec       	ldi	r24, 0xC0	; 192
 c6e:	08 95       	ret

00000c70 <__fp_pscA>:
 c70:	00 24       	eor	r0, r0
 c72:	0a 94       	dec	r0
 c74:	16 16       	cp	r1, r22
 c76:	17 06       	cpc	r1, r23
 c78:	18 06       	cpc	r1, r24
 c7a:	09 06       	cpc	r0, r25
 c7c:	08 95       	ret

00000c7e <__fp_pscB>:
 c7e:	00 24       	eor	r0, r0
 c80:	0a 94       	dec	r0
 c82:	12 16       	cp	r1, r18
 c84:	13 06       	cpc	r1, r19
 c86:	14 06       	cpc	r1, r20
 c88:	05 06       	cpc	r0, r21
 c8a:	08 95       	ret

00000c8c <__fp_round>:
 c8c:	09 2e       	mov	r0, r25
 c8e:	03 94       	inc	r0
 c90:	00 0c       	add	r0, r0
 c92:	11 f4       	brne	.+4      	; 0xc98 <__fp_round+0xc>
 c94:	88 23       	and	r24, r24
 c96:	52 f0       	brmi	.+20     	; 0xcac <__fp_round+0x20>
 c98:	bb 0f       	add	r27, r27
 c9a:	40 f4       	brcc	.+16     	; 0xcac <__fp_round+0x20>
 c9c:	bf 2b       	or	r27, r31
 c9e:	11 f4       	brne	.+4      	; 0xca4 <__fp_round+0x18>
 ca0:	60 ff       	sbrs	r22, 0
 ca2:	04 c0       	rjmp	.+8      	; 0xcac <__fp_round+0x20>
 ca4:	6f 5f       	subi	r22, 0xFF	; 255
 ca6:	7f 4f       	sbci	r23, 0xFF	; 255
 ca8:	8f 4f       	sbci	r24, 0xFF	; 255
 caa:	9f 4f       	sbci	r25, 0xFF	; 255
 cac:	08 95       	ret

00000cae <__fp_split3>:
 cae:	57 fd       	sbrc	r21, 7
 cb0:	90 58       	subi	r25, 0x80	; 128
 cb2:	44 0f       	add	r20, r20
 cb4:	55 1f       	adc	r21, r21
 cb6:	59 f0       	breq	.+22     	; 0xcce <__fp_splitA+0x10>
 cb8:	5f 3f       	cpi	r21, 0xFF	; 255
 cba:	71 f0       	breq	.+28     	; 0xcd8 <__fp_splitA+0x1a>
 cbc:	47 95       	ror	r20

00000cbe <__fp_splitA>:
 cbe:	88 0f       	add	r24, r24
 cc0:	97 fb       	bst	r25, 7
 cc2:	99 1f       	adc	r25, r25
 cc4:	61 f0       	breq	.+24     	; 0xcde <__fp_splitA+0x20>
 cc6:	9f 3f       	cpi	r25, 0xFF	; 255
 cc8:	79 f0       	breq	.+30     	; 0xce8 <__fp_splitA+0x2a>
 cca:	87 95       	ror	r24
 ccc:	08 95       	ret
 cce:	12 16       	cp	r1, r18
 cd0:	13 06       	cpc	r1, r19
 cd2:	14 06       	cpc	r1, r20
 cd4:	55 1f       	adc	r21, r21
 cd6:	f2 cf       	rjmp	.-28     	; 0xcbc <__fp_split3+0xe>
 cd8:	46 95       	lsr	r20
 cda:	f1 df       	rcall	.-30     	; 0xcbe <__fp_splitA>
 cdc:	08 c0       	rjmp	.+16     	; 0xcee <__fp_splitA+0x30>
 cde:	16 16       	cp	r1, r22
 ce0:	17 06       	cpc	r1, r23
 ce2:	18 06       	cpc	r1, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	f1 cf       	rjmp	.-30     	; 0xcca <__fp_splitA+0xc>
 ce8:	86 95       	lsr	r24
 cea:	71 05       	cpc	r23, r1
 cec:	61 05       	cpc	r22, r1
 cee:	08 94       	sec
 cf0:	08 95       	ret

00000cf2 <__fp_trunc>:
 cf2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_splitA>
 cf6:	a0 f0       	brcs	.+40     	; 0xd20 <__fp_trunc+0x2e>
 cf8:	be e7       	ldi	r27, 0x7E	; 126
 cfa:	b9 17       	cp	r27, r25
 cfc:	88 f4       	brcc	.+34     	; 0xd20 <__fp_trunc+0x2e>
 cfe:	bb 27       	eor	r27, r27
 d00:	9f 38       	cpi	r25, 0x8F	; 143
 d02:	60 f4       	brcc	.+24     	; 0xd1c <__fp_trunc+0x2a>
 d04:	16 16       	cp	r1, r22
 d06:	b1 1d       	adc	r27, r1
 d08:	67 2f       	mov	r22, r23
 d0a:	78 2f       	mov	r23, r24
 d0c:	88 27       	eor	r24, r24
 d0e:	98 5f       	subi	r25, 0xF8	; 248
 d10:	f7 cf       	rjmp	.-18     	; 0xd00 <__fp_trunc+0xe>
 d12:	86 95       	lsr	r24
 d14:	77 95       	ror	r23
 d16:	67 95       	ror	r22
 d18:	b1 1d       	adc	r27, r1
 d1a:	93 95       	inc	r25
 d1c:	96 39       	cpi	r25, 0x96	; 150
 d1e:	c8 f3       	brcs	.-14     	; 0xd12 <__fp_trunc+0x20>
 d20:	08 95       	ret

00000d22 <__fp_zero>:
 d22:	e8 94       	clt

00000d24 <__fp_szero>:
 d24:	bb 27       	eor	r27, r27
 d26:	66 27       	eor	r22, r22
 d28:	77 27       	eor	r23, r23
 d2a:	cb 01       	movw	r24, r22
 d2c:	97 f9       	bld	r25, 7
 d2e:	08 95       	ret

00000d30 <__gesf2>:
 d30:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_cmp>
 d34:	08 f4       	brcc	.+2      	; 0xd38 <__gesf2+0x8>
 d36:	8f ef       	ldi	r24, 0xFF	; 255
 d38:	08 95       	ret

00000d3a <__mulsf3>:
 d3a:	0e 94 b0 06 	call	0xd60	; 0xd60 <__mulsf3x>
 d3e:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
 d42:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_pscA>
 d46:	38 f0       	brcs	.+14     	; 0xd56 <__mulsf3+0x1c>
 d48:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_pscB>
 d4c:	20 f0       	brcs	.+8      	; 0xd56 <__mulsf3+0x1c>
 d4e:	95 23       	and	r25, r21
 d50:	11 f0       	breq	.+4      	; 0xd56 <__mulsf3+0x1c>
 d52:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>
 d56:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_nan>
 d5a:	11 24       	eor	r1, r1
 d5c:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>

00000d60 <__mulsf3x>:
 d60:	0e 94 57 06 	call	0xcae	; 0xcae <__fp_split3>
 d64:	70 f3       	brcs	.-36     	; 0xd42 <__mulsf3+0x8>

00000d66 <__mulsf3_pse>:
 d66:	95 9f       	mul	r25, r21
 d68:	c1 f3       	breq	.-16     	; 0xd5a <__mulsf3+0x20>
 d6a:	95 0f       	add	r25, r21
 d6c:	50 e0       	ldi	r21, 0x00	; 0
 d6e:	55 1f       	adc	r21, r21
 d70:	62 9f       	mul	r22, r18
 d72:	f0 01       	movw	r30, r0
 d74:	72 9f       	mul	r23, r18
 d76:	bb 27       	eor	r27, r27
 d78:	f0 0d       	add	r31, r0
 d7a:	b1 1d       	adc	r27, r1
 d7c:	63 9f       	mul	r22, r19
 d7e:	aa 27       	eor	r26, r26
 d80:	f0 0d       	add	r31, r0
 d82:	b1 1d       	adc	r27, r1
 d84:	aa 1f       	adc	r26, r26
 d86:	64 9f       	mul	r22, r20
 d88:	66 27       	eor	r22, r22
 d8a:	b0 0d       	add	r27, r0
 d8c:	a1 1d       	adc	r26, r1
 d8e:	66 1f       	adc	r22, r22
 d90:	82 9f       	mul	r24, r18
 d92:	22 27       	eor	r18, r18
 d94:	b0 0d       	add	r27, r0
 d96:	a1 1d       	adc	r26, r1
 d98:	62 1f       	adc	r22, r18
 d9a:	73 9f       	mul	r23, r19
 d9c:	b0 0d       	add	r27, r0
 d9e:	a1 1d       	adc	r26, r1
 da0:	62 1f       	adc	r22, r18
 da2:	83 9f       	mul	r24, r19
 da4:	a0 0d       	add	r26, r0
 da6:	61 1d       	adc	r22, r1
 da8:	22 1f       	adc	r18, r18
 daa:	74 9f       	mul	r23, r20
 dac:	33 27       	eor	r19, r19
 dae:	a0 0d       	add	r26, r0
 db0:	61 1d       	adc	r22, r1
 db2:	23 1f       	adc	r18, r19
 db4:	84 9f       	mul	r24, r20
 db6:	60 0d       	add	r22, r0
 db8:	21 1d       	adc	r18, r1
 dba:	82 2f       	mov	r24, r18
 dbc:	76 2f       	mov	r23, r22
 dbe:	6a 2f       	mov	r22, r26
 dc0:	11 24       	eor	r1, r1
 dc2:	9f 57       	subi	r25, 0x7F	; 127
 dc4:	50 40       	sbci	r21, 0x00	; 0
 dc6:	9a f0       	brmi	.+38     	; 0xdee <__mulsf3_pse+0x88>
 dc8:	f1 f0       	breq	.+60     	; 0xe06 <__mulsf3_pse+0xa0>
 dca:	88 23       	and	r24, r24
 dcc:	4a f0       	brmi	.+18     	; 0xde0 <__mulsf3_pse+0x7a>
 dce:	ee 0f       	add	r30, r30
 dd0:	ff 1f       	adc	r31, r31
 dd2:	bb 1f       	adc	r27, r27
 dd4:	66 1f       	adc	r22, r22
 dd6:	77 1f       	adc	r23, r23
 dd8:	88 1f       	adc	r24, r24
 dda:	91 50       	subi	r25, 0x01	; 1
 ddc:	50 40       	sbci	r21, 0x00	; 0
 dde:	a9 f7       	brne	.-22     	; 0xdca <__mulsf3_pse+0x64>
 de0:	9e 3f       	cpi	r25, 0xFE	; 254
 de2:	51 05       	cpc	r21, r1
 de4:	80 f0       	brcs	.+32     	; 0xe06 <__mulsf3_pse+0xa0>
 de6:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__fp_inf>
 dea:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_szero>
 dee:	5f 3f       	cpi	r21, 0xFF	; 255
 df0:	e4 f3       	brlt	.-8      	; 0xdea <__mulsf3_pse+0x84>
 df2:	98 3e       	cpi	r25, 0xE8	; 232
 df4:	d4 f3       	brlt	.-12     	; 0xdea <__mulsf3_pse+0x84>
 df6:	86 95       	lsr	r24
 df8:	77 95       	ror	r23
 dfa:	67 95       	ror	r22
 dfc:	b7 95       	ror	r27
 dfe:	f7 95       	ror	r31
 e00:	e7 95       	ror	r30
 e02:	9f 5f       	subi	r25, 0xFF	; 255
 e04:	c1 f7       	brne	.-16     	; 0xdf6 <__mulsf3_pse+0x90>
 e06:	fe 2b       	or	r31, r30
 e08:	88 0f       	add	r24, r24
 e0a:	91 1d       	adc	r25, r1
 e0c:	96 95       	lsr	r25
 e0e:	87 95       	ror	r24
 e10:	97 f9       	bld	r25, 7
 e12:	08 95       	ret

00000e14 <__umulhisi3>:
 e14:	a2 9f       	mul	r26, r18
 e16:	b0 01       	movw	r22, r0
 e18:	b3 9f       	mul	r27, r19
 e1a:	c0 01       	movw	r24, r0
 e1c:	a3 9f       	mul	r26, r19
 e1e:	70 0d       	add	r23, r0
 e20:	81 1d       	adc	r24, r1
 e22:	11 24       	eor	r1, r1
 e24:	91 1d       	adc	r25, r1
 e26:	b2 9f       	mul	r27, r18
 e28:	70 0d       	add	r23, r0
 e2a:	81 1d       	adc	r24, r1
 e2c:	11 24       	eor	r1, r1
 e2e:	91 1d       	adc	r25, r1
 e30:	08 95       	ret

00000e32 <_exit>:
 e32:	f8 94       	cli

00000e34 <__stop_program>:
 e34:	ff cf       	rjmp	.-2      	; 0xe34 <__stop_program>
