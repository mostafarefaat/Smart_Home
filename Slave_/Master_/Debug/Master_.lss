
Master_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6d  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fc  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082e  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049e  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000422  00000000  00000000  00002a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  74:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:

uint8_t data;
void app_init(void)
{
	
	DIO_init(PORT_D,PIN5,OUT); /*Makes PIN5 in PORT D output pin and initiate it by low*/
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	65 e0       	ldi	r22, 0x05	; 5
  80:	84 e4       	ldi	r24, 0x44	; 68
  82:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
	DIO_init(PORT_D,PIN6,OUT); /*Makes PIN6 in PORT D output pin and initiate it by low*/
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	66 e0       	ldi	r22, 0x06	; 6
  8a:	84 e4       	ldi	r24, 0x44	; 68
  8c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
	DIO_init(PORT_D,PIN7,OUT); /*Makes PIN7 in PORT D output pin and initiate it by low*/
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	67 e0       	ldi	r22, 0x07	; 7
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
	
	DIO_write(PORT_D,PIN5,LOW);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	65 e0       	ldi	r22, 0x05	; 5
  9e:	84 e4       	ldi	r24, 0x44	; 68
  a0:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
	DIO_write(PORT_D,PIN6,LOW);
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	66 e0       	ldi	r22, 0x06	; 6
  a8:	84 e4       	ldi	r24, 0x44	; 68
  aa:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
	DIO_write(PORT_D,PIN7,LOW);	
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	67 e0       	ldi	r22, 0x07	; 7
  b2:	84 e4       	ldi	r24, 0x44	; 68
  b4:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>

	Spi_Slave_init();
  b8:	0e 94 b3 01 	call	0x366	; 0x366 <Spi_Slave_init>
  bc:	08 95       	ret

000000be <app_start>:

}

void app_start(void)
{
	data = Spi_Slave_receive();
  be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Spi_Slave_receive>
  c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <data>
	PORTA = data;
  c6:	8b bb       	out	0x1b, r24	; 27
	
	switch(data)
  c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <data>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	31 f0       	breq	.+12     	; 0xdc <app_start+0x1e>
  d0:	40 f0       	brcs	.+16     	; 0xe2 <app_start+0x24>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	49 f0       	breq	.+18     	; 0xe8 <app_start+0x2a>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	91 f0       	breq	.+36     	; 0xfe <app_start+0x40>
  da:	08 95       	ret
	{
		case Open_Door: servo_move_180_deg(); break;
  dc:	0e 94 a4 00 	call	0x148	; 0x148 <servo_move_180_deg>
  e0:	08 95       	ret
		
		case Close_Door: servo_move_zero_deg(); break;
  e2:	0e 94 8a 00 	call	0x114	; 0x114 <servo_move_zero_deg>
  e6:	08 95       	ret
		
		case Turn_On: 
			DIO_write(PORT_D,PIN6,HIGH); 
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	66 e0       	ldi	r22, 0x06	; 6
  ec:	84 e4       	ldi	r24, 0x44	; 68
  ee:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
			DIO_write(PORT_D,PIN7,HIGH);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	67 e0       	ldi	r22, 0x07	; 7
  f6:	84 e4       	ldi	r24, 0x44	; 68
  f8:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
			break; 
  fc:	08 95       	ret
		case Turn_Off:
			DIO_write(PORT_D,PIN6,LOW);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	66 e0       	ldi	r22, 0x06	; 6
 102:	84 e4       	ldi	r24, 0x44	; 68
 104:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
			DIO_write(PORT_D,PIN7,LOW);
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	67 e0       	ldi	r22, 0x07	; 7
 10c:	84 e4       	ldi	r24, 0x44	; 68
 10e:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
 112:	08 95       	ret

00000114 <servo_move_zero_deg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	65 e0       	ldi	r22, 0x05	; 5
 118:	84 e4       	ldi	r24, 0x44	; 68
 11a:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <servo_move_zero_deg+0xe>
 126:	00 c0       	rjmp	.+0      	; 0x128 <servo_move_zero_deg+0x14>
 128:	00 00       	nop
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	84 e4       	ldi	r24, 0x44	; 68
 130:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
 134:	9f e7       	ldi	r25, 0x7F	; 127
 136:	2a e1       	ldi	r18, 0x1A	; 26
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	20 40       	sbci	r18, 0x00	; 0
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <servo_move_zero_deg+0x26>
 142:	00 c0       	rjmp	.+0      	; 0x144 <servo_move_zero_deg+0x30>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <servo_move_180_deg>:
	  DIO_write(PORT_D,PIN5,LOW);
	  _delay_ms(2000);	
}
void servo_move_180_deg(void)
{
	  DIO_write(PORT_D,PIN5,HIGH);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	65 e0       	ldi	r22, 0x05	; 5
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
 152:	83 ef       	ldi	r24, 0xF3	; 243
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <servo_move_180_deg+0xe>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <servo_move_180_deg+0x14>
 15c:	00 00       	nop
	  _delay_ms(2);
	  DIO_write(PORT_D,PIN5,LOW);
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	65 e0       	ldi	r22, 0x05	; 5
 162:	84 e4       	ldi	r24, 0x44	; 68
 164:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
 168:	9f e7       	ldi	r25, 0x7F	; 127
 16a:	2a e1       	ldi	r18, 0x1A	; 26
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	91 50       	subi	r25, 0x01	; 1
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <servo_move_180_deg+0x26>
 176:	00 c0       	rjmp	.+0      	; 0x178 <servo_move_180_deg+0x30>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <main>:
int main(void)
{
    /* Replace with your application code */
	/* initialization */
	/*Declaring and Initialization of variables*/	
	app_init();
 17c:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	
	while(1)
	{
		app_start();
 180:	0e 94 5f 00 	call	0xbe	; 0xbe <app_start>
 184:	fd cf       	rjmp	.-6      	; 0x180 <main+0x4>

00000186 <DIO_init>:

// global variables
// functions definitions
void DIO_init(uint8_t port_number, uint8_t pin_number, uint8_t direction)
{
	switch(port_number)
 186:	82 34       	cpi	r24, 0x42	; 66
 188:	29 f1       	breq	.+74     	; 0x1d4 <DIO_init+0x4e>
 18a:	18 f4       	brcc	.+6      	; 0x192 <DIO_init+0xc>
 18c:	81 34       	cpi	r24, 0x41	; 65
 18e:	39 f0       	breq	.+14     	; 0x19e <DIO_init+0x18>
 190:	08 95       	ret
 192:	83 34       	cpi	r24, 0x43	; 67
 194:	d1 f1       	breq	.+116    	; 0x20a <DIO_init+0x84>
 196:	84 34       	cpi	r24, 0x44	; 68
 198:	09 f4       	brne	.+2      	; 0x19c <DIO_init+0x16>
 19a:	52 c0       	rjmp	.+164    	; 0x240 <DIO_init+0xba>
 19c:	08 95       	ret
	{
		case PORT_A:
		if(direction == OUT)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_init+0x32>
		{
			//DDRA |= (1<<pin_number); //output
			SET_BIT(DDRA, pin_number);
 1a2:	2a b3       	in	r18, 0x1a	; 26
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_init+0x28>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_init+0x24>
 1b2:	82 2b       	or	r24, r18
 1b4:	8a bb       	out	0x1a, r24	; 26
 1b6:	08 95       	ret
			
		}
		else if(direction == IN)
 1b8:	41 11       	cpse	r20, r1
 1ba:	5c c0       	rjmp	.+184    	; 0x274 <DIO_init+0xee>
		{
			//DDRA &= ~(1<<pin_number); // input
			ClEAR_BIT(DDRA, pin_number);
 1bc:	2a b3       	in	r18, 0x1a	; 26
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_init+0x42>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_init+0x3e>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8a bb       	out	0x1a, r24	; 26
 1d2:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_B:
		if(direction == OUT)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_init+0x68>
		{
			//DDRB |= (1<<pin_number);
			SET_BIT(DDRB, pin_number);
 1d8:	27 b3       	in	r18, 0x17	; 23
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_init+0x5e>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_init+0x5a>
 1e8:	82 2b       	or	r24, r18
 1ea:	87 bb       	out	0x17, r24	; 23
 1ec:	08 95       	ret
		}
		else if(direction == IN)
 1ee:	41 11       	cpse	r20, r1
 1f0:	41 c0       	rjmp	.+130    	; 0x274 <DIO_init+0xee>
		{
			//DDRB &= ~(1<<pin_number);
			ClEAR_BIT(DDRB, pin_number);
 1f2:	27 b3       	in	r18, 0x17	; 23
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_init+0x78>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_init+0x74>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	87 bb       	out	0x17, r24	; 23
 208:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_C:
		if(direction == OUT)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_init+0x9e>
		{
			//DDRC |= (1<<pin_number);
			SET_BIT(DDRC, pin_number);
 20e:	24 b3       	in	r18, 0x14	; 20
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_init+0x94>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_init+0x90>
 21e:	82 2b       	or	r24, r18
 220:	84 bb       	out	0x14, r24	; 20
 222:	08 95       	ret
		}
		else if(direction == IN)
 224:	41 11       	cpse	r20, r1
 226:	26 c0       	rjmp	.+76     	; 0x274 <DIO_init+0xee>
		{
			//DDRC &= ~(1<<pin_number);
			ClEAR_BIT(DDRC, pin_number);
 228:	24 b3       	in	r18, 0x14	; 20
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_init+0xae>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_init+0xaa>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	84 bb       	out	0x14, r24	; 20
 23e:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_D:
		if(direction == OUT)
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	59 f4       	brne	.+22     	; 0x25a <DIO_init+0xd4>
		{
			//DDRD |= (1<<pin_number);
			SET_BIT(DDRD, pin_number);
 244:	21 b3       	in	r18, 0x11	; 17
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_init+0xca>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_init+0xc6>
 254:	82 2b       	or	r24, r18
 256:	81 bb       	out	0x11, r24	; 17
 258:	08 95       	ret
		}
		else if(direction == IN)
 25a:	41 11       	cpse	r20, r1
 25c:	0b c0       	rjmp	.+22     	; 0x274 <DIO_init+0xee>
		{
			//DDRD &= ~(1<<pin_number);
			ClEAR_BIT(DDRD, pin_number);
 25e:	21 b3       	in	r18, 0x11	; 17
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_init+0xe4>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_init+0xe0>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	81 bb       	out	0x11, r24	; 17
 274:	08 95       	ret

00000276 <DIO_write>:
	}
}

void DIO_write(uint8_t port_number, uint8_t pin_number, uint8_t value)
{
		switch(port_number)
 276:	82 34       	cpi	r24, 0x42	; 66
 278:	29 f1       	breq	.+74     	; 0x2c4 <DIO_write+0x4e>
 27a:	18 f4       	brcc	.+6      	; 0x282 <DIO_write+0xc>
 27c:	81 34       	cpi	r24, 0x41	; 65
 27e:	39 f0       	breq	.+14     	; 0x28e <DIO_write+0x18>
 280:	08 95       	ret
 282:	83 34       	cpi	r24, 0x43	; 67
 284:	d1 f1       	breq	.+116    	; 0x2fa <DIO_write+0x84>
 286:	84 34       	cpi	r24, 0x44	; 68
 288:	09 f4       	brne	.+2      	; 0x28c <DIO_write+0x16>
 28a:	52 c0       	rjmp	.+164    	; 0x330 <DIO_write+0xba>
 28c:	08 95       	ret
		{
			case PORT_A:
			if(value == HIGH)
 28e:	41 30       	cpi	r20, 0x01	; 1
 290:	59 f4       	brne	.+22     	; 0x2a8 <DIO_write+0x32>
			{
				//PORTA |= (1<<pin_number); //write 1
				SET_BIT(PORTA, pin_number);
 292:	2b b3       	in	r18, 0x1b	; 27
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_write+0x28>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_write+0x24>
 2a2:	82 2b       	or	r24, r18
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	08 95       	ret
			}
			else if(value == LOW)
 2a8:	41 11       	cpse	r20, r1
 2aa:	5c c0       	rjmp	.+184    	; 0x364 <DIO_write+0xee>
			{
				//PORTA &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTA, pin_number);
 2ac:	2b b3       	in	r18, 0x1b	; 27
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write+0x42>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write+0x3e>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	8b bb       	out	0x1b, r24	; 27
 2c2:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_B:
			if(value == HIGH)
 2c4:	41 30       	cpi	r20, 0x01	; 1
 2c6:	59 f4       	brne	.+22     	; 0x2de <DIO_write+0x68>
			{
				//PORTB |= (1<<pin_number); //write 1
				SET_BIT(PORTB, pin_number);
 2c8:	28 b3       	in	r18, 0x18	; 24
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_write+0x5e>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_write+0x5a>
 2d8:	82 2b       	or	r24, r18
 2da:	88 bb       	out	0x18, r24	; 24
 2dc:	08 95       	ret
			}
			else if(value == LOW)
 2de:	41 11       	cpse	r20, r1
 2e0:	41 c0       	rjmp	.+130    	; 0x364 <DIO_write+0xee>
			{
				//PORTB &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTB, pin_number);
 2e2:	28 b3       	in	r18, 0x18	; 24
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_write+0x78>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_write+0x74>
 2f2:	80 95       	com	r24
 2f4:	82 23       	and	r24, r18
 2f6:	88 bb       	out	0x18, r24	; 24
 2f8:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_C:
			if(value == HIGH)
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	59 f4       	brne	.+22     	; 0x314 <DIO_write+0x9e>
			{
				//PORTC |= (1<<pin_number); //write 1
				SET_BIT(PORTC, pin_number);
 2fe:	25 b3       	in	r18, 0x15	; 21
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_write+0x94>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_write+0x90>
 30e:	82 2b       	or	r24, r18
 310:	85 bb       	out	0x15, r24	; 21
 312:	08 95       	ret
			}
			else if(value == LOW)
 314:	41 11       	cpse	r20, r1
 316:	26 c0       	rjmp	.+76     	; 0x364 <DIO_write+0xee>
			{
				//PORTC &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTC, pin_number);
 318:	25 b3       	in	r18, 0x15	; 21
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_write+0xae>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_write+0xaa>
 328:	80 95       	com	r24
 32a:	82 23       	and	r24, r18
 32c:	85 bb       	out	0x15, r24	; 21
 32e:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_D:
			if(value == HIGH)
 330:	41 30       	cpi	r20, 0x01	; 1
 332:	59 f4       	brne	.+22     	; 0x34a <DIO_write+0xd4>
			{
				//PORTD |= (1<<pin_number); //write 1
				SET_BIT(PORTD, pin_number);
 334:	22 b3       	in	r18, 0x12	; 18
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_write+0xca>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_write+0xc6>
 344:	82 2b       	or	r24, r18
 346:	82 bb       	out	0x12, r24	; 18
 348:	08 95       	ret
			}
			else if(value == LOW)
 34a:	41 11       	cpse	r20, r1
 34c:	0b c0       	rjmp	.+22     	; 0x364 <DIO_write+0xee>
			{
				//PORTD &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTD, pin_number);
 34e:	22 b3       	in	r18, 0x12	; 18
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_write+0xe4>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_write+0xe0>
 35e:	80 95       	com	r24
 360:	82 23       	and	r24, r18
 362:	82 bb       	out	0x12, r24	; 18
 364:	08 95       	ret

00000366 <Spi_Slave_init>:

}

void Spi_Slave_init(void)
{
	DDRA = 0xFF;
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	8a bb       	out	0x1a, r24	; 26
	//initialize the IN and OUT PINS
	DIO_init(PORT_B,SS,IN);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	64 e0       	ldi	r22, 0x04	; 4
 36e:	82 e4       	ldi	r24, 0x42	; 66
 370:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
	DIO_init(PORT_B,SCK,IN);
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	67 e0       	ldi	r22, 0x07	; 7
 378:	82 e4       	ldi	r24, 0x42	; 66
 37a:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
	DIO_init(PORT_B,MOSI,IN);
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	65 e0       	ldi	r22, 0x05	; 5
 382:	82 e4       	ldi	r24, 0x42	; 66
 384:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
	DIO_init(PORT_B,MISO,OUT);
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	66 e0       	ldi	r22, 0x06	; 6
 38c:	82 e4       	ldi	r24, 0x42	; 66
 38e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
	//Select Master mode, prescale of /16, enable the SPI
	SPCR |= (1<<SPE) | (1<<SPR1);
 392:	8d b1       	in	r24, 0x0d	; 13
 394:	82 64       	ori	r24, 0x42	; 66
 396:	8d b9       	out	0x0d, r24	; 13
	//disable the double SPI speed bit
	SPSR &= ~ (1<<SPI2X);	
 398:	8e b1       	in	r24, 0x0e	; 14
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	8e b9       	out	0x0e, r24	; 14
 39e:	08 95       	ret

000003a0 <Spi_Slave_receive>:
}
uint8_t Spi_Slave_receive(void)
{
	SPDR = 0xFF;
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	8f b9       	out	0x0f, r24	; 15
	
	while(READ_BIT(SPSR,SPIF) == 0);
 3a4:	77 9b       	sbis	0x0e, 7	; 14
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <Spi_Slave_receive+0x4>
	
	return SPDR;	
 3a8:	8f b1       	in	r24, 0x0f	; 15
 3aa:	08 95       	ret

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
