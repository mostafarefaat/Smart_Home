
Master_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         00000e7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000e7a  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800078  00800078  00000f26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ae  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad1  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb9  00000000  00000000  000034e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  0000449c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000736  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a61  00000000  00000000  00004f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005993  2**0
=======
  0 .text         00000e6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000e6c  00000f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800078  00800078  00000f18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016d2  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a90  00000000  00000000  00002826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa6  00000000  00000000  000032b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  0000425c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d5  00000000  00000000  000045a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000859  00000000  00000000  00004c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000054d6  2**0
>>>>>>> feature
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
<<<<<<< HEAD
  66:	ea e7       	ldi	r30, 0x7A	; 122
=======
  66:	ec e6       	ldi	r30, 0x6C	; 108
>>>>>>> feature
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 39       	cpi	r26, 0x9B	; 155
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
<<<<<<< HEAD
  86:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  8a:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <_exit>
=======
  86:	0e 94 82 01 	call	0x304	; 0x304 <main>
  8a:	0c 94 34 07 	jmp	0xe68	; 0xe68 <_exit>
>>>>>>> feature

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
volatile uint8_t rem = 0;

void app_init(void)
{
	/*DIO PINS Config*/
	DIO_init(PORT_D,PIN5,OUT); DIO_write(PORT_D,PIN5,LOW); /*Makes PIN5 in PORT D output pin and initiate it by low*/
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	84 e4       	ldi	r24, 0x44	; 68
<<<<<<< HEAD
  98:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	65 e0       	ldi	r22, 0x05	; 5
  a0:	84 e4       	ldi	r24, 0x44	; 68
  a2:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
=======
  98:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	65 e0       	ldi	r22, 0x05	; 5
  a0:	84 e4       	ldi	r24, 0x44	; 68
  a2:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
>>>>>>> feature
	DIO_init(PORT_D,PIN6,OUT); DIO_write(PORT_D,PIN6,LOW); /*Makes PIN6 in PORT D output pin and initiate it by low*/
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	66 e0       	ldi	r22, 0x06	; 6
  aa:	84 e4       	ldi	r24, 0x44	; 68
<<<<<<< HEAD
  ac:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	66 e0       	ldi	r22, 0x06	; 6
  b4:	84 e4       	ldi	r24, 0x44	; 68
  b6:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
=======
  ac:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	66 e0       	ldi	r22, 0x06	; 6
  b4:	84 e4       	ldi	r24, 0x44	; 68
  b6:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
>>>>>>> feature
	DIO_init(PORT_D,PIN7,OUT); DIO_write(PORT_D,PIN7,LOW); /*Makes PIN7 in PORT D output pin and initiate it by low*/
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	67 e0       	ldi	r22, 0x07	; 7
  be:	84 e4       	ldi	r24, 0x44	; 68
<<<<<<< HEAD
  c0:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	67 e0       	ldi	r22, 0x07	; 7
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
=======
  c0:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	67 e0       	ldi	r22, 0x07	; 7
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
>>>>>>> feature
	DIO_init(PORT_B,PIN3,OUT); DIO_write(PORT_B,PIN3,LOW); /*Makes PIN3 in PORT B output pin and initiate it by low*/
  ce:	41 e0       	ldi	r20, 0x01	; 1
  d0:	63 e0       	ldi	r22, 0x03	; 3
  d2:	82 e4       	ldi	r24, 0x42	; 66
<<<<<<< HEAD
  d4:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
	
	/*SPI and LCD initialize*/
	Spi_Slave_init();
  e2:	0e 94 2c 03 	call	0x658	; 0x658 <Spi_Slave_init>
	LCD_4_bit_init();
  e6:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_4_bit_init>
=======
  d4:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
	
	/*SPI and LCD initialize*/
	Spi_Slave_init();
  e2:	0e 94 3e 03 	call	0x67c	; 0x67c <Spi_Slave_init>
	LCD_4_bit_init();
  e6:	0e 94 cc 02 	call	0x598	; 0x598 <LCD_4_bit_init>
>>>>>>> feature
	
	//ADC initializing
	DIO_init(PORT_A,PIN0,IN);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e4       	ldi	r24, 0x41	; 65
<<<<<<< HEAD
  f0:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
	ADC_init();
  f4:	0e 94 75 01 	call	0x2ea	; 0x2ea <ADC_init>
=======
  f0:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
	ADC_init();
  f4:	0e 94 87 01 	call	0x30e	; 0x30e <ADC_init>
>>>>>>> feature
  f8:	08 95       	ret

000000fa <clear_temp_string>:
		TCCR0 = 75;
	}
	
}
void clear_temp_string(uint8_t *str)
{
  fa:	ac 01       	movw	r20, r24
		uint8_t i;
		for(i=0; *(str + i) != 0; i++)	//send each character until str is null
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	03 c0       	rjmp	.+6      	; 0x106 <clear_temp_string+0xc>
		{
			*(str + i) = 0x20; // reset them to white spaces
 100:	20 e2       	ldi	r18, 0x20	; 32
 102:	20 83       	st	Z, r18
	
}
void clear_temp_string(uint8_t *str)
{
		uint8_t i;
		for(i=0; *(str + i) != 0; i++)	//send each character until str is null
 104:	9f 5f       	subi	r25, 0xFF	; 255
 106:	fa 01       	movw	r30, r20
 108:	e9 0f       	add	r30, r25
 10a:	f1 1d       	adc	r31, r1
 10c:	20 81       	ld	r18, Z
 10e:	21 11       	cpse	r18, r1
 110:	f7 cf       	rjmp	.-18     	; 0x100 <clear_temp_string+0x6>
		{
			*(str + i) = 0x20; // reset them to white spaces
		}
}
 112:	08 95       	ret

00000114 <display_Temp_on_LCD>:
void display_Temp_on_LCD(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	LCD_4_bit_sendChar(value[1]);
 118:	c2 e8       	ldi	r28, 0x82	; 130
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	89 81       	ldd	r24, Y+1	; 0x01
<<<<<<< HEAD
 11e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_4_bit_sendChar>
	LCD_4_bit_sendChar(value[0]);	
 122:	88 81       	ld	r24, Y
 124:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_4_bit_sendChar>
=======
 11e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_4_bit_sendChar>
	LCD_4_bit_sendChar(value[0]);	
 122:	88 81       	ld	r24, Y
 124:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_4_bit_sendChar>
>>>>>>> feature
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <Temp_sensor_read>:
void Temp_sensor_read(void)
{
	LCD_4_bit_sendCommand(0x01); //clears the LCD
 12e:	81 e0       	ldi	r24, 0x01	; 1
<<<<<<< HEAD
 130:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
	
	digital_value = ADC_read(ADC_CH_0); // Read the value from ADC
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 7d 01 	call	0x2fa	; 0x2fa <ADC_read>
=======
 130:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
	
	digital_value = ADC_read(ADC_CH_0); // Read the value from ADC
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 8f 01 	call	0x31e	; 0x31e <ADC_read>
>>>>>>> feature
 13a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <digital_value+0x1>
 13e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <digital_value>
	
	Sensor_value = (digital_value * (ADC_STEP)) * 10;
 142:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <digital_value>
 146:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <digital_value+0x1>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< HEAD
 14e:	0e 94 d6 05 	call	0xbac	; 0xbac <__floatunsisf>
=======
 14e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__floatunsisf>
>>>>>>> feature
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 ea       	ldi	r20, 0xA0	; 160
 158:	5b e3       	ldi	r21, 0x3B	; 59
<<<<<<< HEAD
 15a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__mulsf3>
=======
 15a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulsf3>
>>>>>>> feature
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e2       	ldi	r20, 0x20	; 32
 164:	51 e4       	ldi	r21, 0x41	; 65
<<<<<<< HEAD
 166:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__mulsf3>
 16a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__fixunssfsi>
=======
 166:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulsf3>
 16a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixunssfsi>
>>>>>>> feature
 16e:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Sensor_value>
	
	Sensor_value_copy = Sensor_value;
 172:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <Sensor_value_copy>
	
	LCD_4_bit_sendString(done_string); // indicates the conversion finished
 176:	82 e6       	ldi	r24, 0x62	; 98
 178:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< HEAD
 17a:	0e 94 19 03 	call	0x632	; 0x632 <LCD_4_bit_sendString>
=======
 17a:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_4_bit_sendString>
>>>>>>> feature
	
	decimal = 0; weight = 1; rem = 0;
 17e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <decimal+0x1>
 182:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <decimal>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 18e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 192:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
	uint8_t index = 0;
 196:	30 e0       	ldi	r19, 0x00	; 0
	/*Extracts the each number and put it in the value string for display*/
	while(Sensor_value != 0)
 198:	17 c0       	rjmp	.+46     	; 0x1c8 <Temp_sensor_read+0x9a>
	{
		value[index] = (Sensor_value % 10) + (0x30);
 19a:	e3 2f       	mov	r30, r19
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 57       	subi	r30, 0x7E	; 126
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	9d ec       	ldi	r25, 0xCD	; 205
 1a4:	89 9f       	mul	r24, r25
 1a6:	91 2d       	mov	r25, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	96 95       	lsr	r25
 1ac:	96 95       	lsr	r25
 1ae:	96 95       	lsr	r25
 1b0:	49 2f       	mov	r20, r25
 1b2:	44 0f       	add	r20, r20
 1b4:	24 2f       	mov	r18, r20
 1b6:	22 0f       	add	r18, r18
 1b8:	22 0f       	add	r18, r18
 1ba:	24 0f       	add	r18, r20
 1bc:	82 1b       	sub	r24, r18
 1be:	80 5d       	subi	r24, 0xD0	; 208
 1c0:	80 83       	st	Z, r24
		Sensor_value = Sensor_value/10;
 1c2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <Sensor_value>
		index++;
 1c6:	3f 5f       	subi	r19, 0xFF	; 255
	LCD_4_bit_sendString(done_string); // indicates the conversion finished
	
	decimal = 0; weight = 1; rem = 0;
	uint8_t index = 0;
	/*Extracts the each number and put it in the value string for display*/
	while(Sensor_value != 0)
 1c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Sensor_value>
 1cc:	81 11       	cpse	r24, r1
 1ce:	e5 cf       	rjmp	.-54     	; 0x19a <Temp_sensor_read+0x6c>
	{
		value[index] = (Sensor_value % 10) + (0x30);
		Sensor_value = Sensor_value/10;
		index++;
	}
	display_Temp_on_LCD();
 1d0:	0e 94 8a 00 	call	0x114	; 0x114 <display_Temp_on_LCD>
	clear_temp_string(value); // resets the value strings	
 1d4:	82 e8       	ldi	r24, 0x82	; 130
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 7d 00 	call	0xfa	; 0xfa <clear_temp_string>
 1dc:	08 95       	ret

000001de <app_start>:

}

void app_start(void)
{
	data = Spi_Slave_receive();
<<<<<<< HEAD
 1de:	0e 94 49 03 	call	0x692	; 0x692 <Spi_Slave_receive>
=======
 1de:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Spi_Slave_receive>
>>>>>>> feature
 1e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <data>
	PORTA = data;
 1e6:	8b bb       	out	0x1b, r24	; 27
	
	switch(data)
 1e8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <data>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	01 f1       	breq	.+64     	; 0x230 <app_start+0x52>
 1f0:	28 f4       	brcc	.+10     	; 0x1fc <app_start+0x1e>
 1f2:	88 23       	and	r24, r24
 1f4:	61 f0       	breq	.+24     	; 0x20e <app_start+0x30>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	39 f0       	breq	.+14     	; 0x208 <app_start+0x2a>
 1fa:	32 c0       	rjmp	.+100    	; 0x260 <app_start+0x82>
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	51 f0       	breq	.+20     	; 0x214 <app_start+0x36>
 200:	10 f1       	brcs	.+68     	; 0x246 <app_start+0x68>
 202:	85 30       	cpi	r24, 0x05	; 5
 204:	59 f1       	breq	.+86     	; 0x25c <app_start+0x7e>
 206:	2c c0       	rjmp	.+88     	; 0x260 <app_start+0x82>
	{
<<<<<<< HEAD
		case Open_Door: servo_move_180_deg(); break;
 208:	0e 94 56 01 	call	0x2ac	; 0x2ac <servo_move_180_deg>
 20c:	29 c0       	rjmp	.+82     	; 0x260 <app_start+0x82>
		
		case Close_Door: servo_move_zero_deg(); break;
 20e:	0e 94 3c 01 	call	0x278	; 0x278 <servo_move_zero_deg>
=======
		case Open_Door: servo_move_90_deg(); break;
 208:	0e 94 4e 01 	call	0x29c	; 0x29c <servo_move_90_deg>
 20c:	29 c0       	rjmp	.+82     	; 0x260 <app_start+0x82>
		
		case Close_Door: servo_move_negative_90_deg(); break;
 20e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <servo_move_negative_90_deg>
>>>>>>> feature
 212:	26 c0       	rjmp	.+76     	; 0x260 <app_start+0x82>
		
		case Open_Temp_LCD:
		LCD_4_bit_sendString(welcome_string);
 214:	8f e6       	ldi	r24, 0x6F	; 111
 216:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< HEAD
 218:	0e 94 19 03 	call	0x632	; 0x632 <LCD_4_bit_sendString>
=======
 218:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_4_bit_sendString>
>>>>>>> feature
		TIMER0_delay(3000,no_prescale);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	88 eb       	ldi	r24, 0xB8	; 184
 222:	9b e0       	ldi	r25, 0x0B	; 11
<<<<<<< HEAD
 224:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
		LCD_4_bit_sendCommand(0x01);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
=======
 224:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
		LCD_4_bit_sendCommand(0x01);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
>>>>>>> feature
		break;
 22e:	18 c0       	rjmp	.+48     	; 0x260 <app_start+0x82>
		
		case Turn_On: 
			DIO_write(PORT_D,PIN6,HIGH); 
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	66 e0       	ldi	r22, 0x06	; 6
 234:	84 e4       	ldi	r24, 0x44	; 68
<<<<<<< HEAD
 236:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
=======
 236:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
>>>>>>> feature
			DIO_write(PORT_D,PIN7,HIGH);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	67 e0       	ldi	r22, 0x07	; 7
 23e:	84 e4       	ldi	r24, 0x44	; 68
<<<<<<< HEAD
 240:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
=======
 240:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
>>>>>>> feature
			break; 
 244:	0d c0       	rjmp	.+26     	; 0x260 <app_start+0x82>
			
		case Turn_Off:
			DIO_write(PORT_D,PIN6,LOW);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	84 e4       	ldi	r24, 0x44	; 68
<<<<<<< HEAD
 24c:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
=======
 24c:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
>>>>>>> feature
			DIO_write(PORT_D,PIN7,LOW);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	67 e0       	ldi	r22, 0x07	; 7
 254:	84 e4       	ldi	r24, 0x44	; 68
<<<<<<< HEAD
 256:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
=======
 256:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
>>>>>>> feature
			break;
 25a:	02 c0       	rjmp	.+4      	; 0x260 <app_start+0x82>
		case Get_Temp:
			 Temp_sensor_read();
 25c:	0e 94 97 00 	call	0x12e	; 0x12e <Temp_sensor_read>
		default: break;
	}

	if(Sensor_value_copy >= 25)
 260:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <Sensor_value_copy>
 264:	89 31       	cpi	r24, 0x19	; 25
 266:	28 f0       	brcs	.+10     	; 0x272 <app_start+0x94>
	{
		TCCR0 = 0x61;
 268:	81 e6       	ldi	r24, 0x61	; 97
 26a:	83 bf       	out	0x33, r24	; 51
		OCR0 = 100;
 26c:	84 e6       	ldi	r24, 0x64	; 100
 26e:	8c bf       	out	0x3c, r24	; 60
 270:	08 95       	ret
	}
	else
	{
		TCCR0 = 75;
 272:	8b e4       	ldi	r24, 0x4B	; 75
 274:	83 bf       	out	0x33, r24	; 51
 276:	08 95       	ret

<<<<<<< HEAD
00000278 <servo_move_zero_deg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	84 e4       	ldi	r24, 0x44	; 68
 27e:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <servo_move_zero_deg+0xe>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <servo_move_zero_deg+0x14>
 28c:	00 00       	nop
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	65 e0       	ldi	r22, 0x05	; 5
 292:	84 e4       	ldi	r24, 0x44	; 68
 294:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
 298:	9f e7       	ldi	r25, 0x7F	; 127
 29a:	2a e1       	ldi	r18, 0x1A	; 26
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <servo_move_zero_deg+0x26>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <servo_move_zero_deg+0x30>
 2a8:	00 00       	nop
 2aa:	08 95       	ret

000002ac <servo_move_180_deg>:
	  DIO_write(PORT_D,PIN5,LOW);
	  _delay_ms(2000);	
=======
00000276 <Servo_T0Delay_90>:
>>>>>>> feature
}


void Servo_T0Delay_90()
{
	unsigned int i = 0;
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
	
	while(i<10)  /*value of i by testing*/
 27a:	0c c0       	rjmp	.+24     	; 0x294 <Servo_T0Delay_90+0x1e>
	{
		TCNT0 = 0x00;
 27c:	12 be       	out	0x32, r1	; 50
		TCCR0 = 0x01;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	83 bf       	out	0x33, r24	; 51
		while((TIFR & (1<<PIN0)) == 0);
 282:	08 b6       	in	r0, 0x38	; 56
 284:	00 fe       	sbrs	r0, 0
 286:	fd cf       	rjmp	.-6      	; 0x282 <Servo_T0Delay_90+0xc>
		TCCR0 = 0x00;
 288:	13 be       	out	0x33, r1	; 51
		TIFR |= (1<<0);
 28a:	88 b7       	in	r24, 0x38	; 56
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	88 bf       	out	0x38, r24	; 56
		i++;
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255

void Servo_T0Delay_90()
{
	unsigned int i = 0;
	
	while(i<10)  /*value of i by testing*/
 294:	2a 30       	cpi	r18, 0x0A	; 10
 296:	31 05       	cpc	r19, r1
 298:	88 f3       	brcs	.-30     	; 0x27c <Servo_T0Delay_90+0x6>
		TCCR0 = 0x00;
		TIFR |= (1<<0);
		i++;
	}

}
 29a:	08 95       	ret

0000029c <servo_move_90_deg>:
#include "servo.h"


void servo_move_90_deg(void)
{
	  DIO_write(PORT_D,PIN5,HIGH);
<<<<<<< HEAD
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	65 e0       	ldi	r22, 0x05	; 5
 2b0:	84 e4       	ldi	r24, 0x44	; 68
 2b2:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
 2b6:	83 ef       	ldi	r24, 0xF3	; 243
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <servo_move_180_deg+0xe>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <servo_move_180_deg+0x14>
 2c0:	00 00       	nop
	  _delay_ms(2);
	  DIO_write(PORT_D,PIN5,LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	65 e0       	ldi	r22, 0x05	; 5
 2c6:	84 e4       	ldi	r24, 0x44	; 68
 2c8:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_write>
 2cc:	9f e7       	ldi	r25, 0x7F	; 127
 2ce:	2a e1       	ldi	r18, 0x1A	; 26
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	91 50       	subi	r25, 0x01	; 1
 2d4:	20 40       	sbci	r18, 0x00	; 0
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <servo_move_180_deg+0x26>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <servo_move_180_deg+0x30>
 2dc:	00 00       	nop
 2de:	08 95       	ret

000002e0 <main>:
=======
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	65 e0       	ldi	r22, 0x05	; 5
 2a0:	84 e4       	ldi	r24, 0x44	; 68
 2a2:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
	  Servo_T0Delay_90();
 2a6:	0e 94 3b 01 	call	0x276	; 0x276 <Servo_T0Delay_90>
	  DIO_write(PORT_D,PIN5,LOW);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	65 e0       	ldi	r22, 0x05	; 5
 2ae:	84 e4       	ldi	r24, 0x44	; 68
 2b0:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_write>
	  TIMER0_delay(2000,no_prescale);	
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	80 ed       	ldi	r24, 0xD0	; 208
 2ba:	97 e0       	ldi	r25, 0x07	; 7
 2bc:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
 2c0:	08 95       	ret

000002c2 <Servo_T0Delay_negative_90>:

}

void Servo_T0Delay_negative_90()
{
	unsigned int i = 0;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
	
	while(i<2)  /*value of i by testing*/
 2c6:	0b c0       	rjmp	.+22     	; 0x2de <Servo_T0Delay_negative_90+0x1c>
	{
		TCNT0 = 0x00;
 2c8:	12 be       	out	0x32, r1	; 50
		TCCR0 = 0x01;
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	23 bf       	out	0x33, r18	; 51
		while((TIFR & (1<<PIN0)) == 0);
 2ce:	08 b6       	in	r0, 0x38	; 56
 2d0:	00 fe       	sbrs	r0, 0
 2d2:	fd cf       	rjmp	.-6      	; 0x2ce <Servo_T0Delay_negative_90+0xc>
		TCCR0 = 0x00;
 2d4:	13 be       	out	0x33, r1	; 51
		TIFR |= (1<<0);
 2d6:	28 b7       	in	r18, 0x38	; 56
 2d8:	21 60       	ori	r18, 0x01	; 1
 2da:	28 bf       	out	0x38, r18	; 56
		i++;
 2dc:	01 96       	adiw	r24, 0x01	; 1

void Servo_T0Delay_negative_90()
{
	unsigned int i = 0;
	
	while(i<2)  /*value of i by testing*/
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	91 05       	cpc	r25, r1
 2e2:	90 f3       	brcs	.-28     	; 0x2c8 <Servo_T0Delay_negative_90+0x6>
		while((TIFR & (1<<PIN0)) == 0);
		TCCR0 = 0x00;
		TIFR |= (1<<0);
		i++;
	}
}
 2e4:	08 95       	ret

000002e6 <servo_move_negative_90_deg>:
	  DIO_write(PORT_D,PIN5,LOW);
	  TIMER0_delay(2000,no_prescale);	
}
void servo_move_negative_90_deg(void)
{
	  PORTD |= (1<<5);
 2e6:	82 b3       	in	r24, 0x12	; 18
 2e8:	80 62       	ori	r24, 0x20	; 32
 2ea:	82 bb       	out	0x12, r24	; 18
	  Servo_T0Delay_negative_90();
 2ec:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Servo_T0Delay_negative_90>
	  PORTD &= ~(1<<5);
 2f0:	82 b3       	in	r24, 0x12	; 18
 2f2:	8f 7d       	andi	r24, 0xDF	; 223
 2f4:	82 bb       	out	0x12, r24	; 18
	  TIMER0_delay(2000,no_prescale);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 ed       	ldi	r24, 0xD0	; 208
 2fc:	97 e0       	ldi	r25, 0x07	; 7
 2fe:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
 302:	08 95       	ret

00000304 <main>:
>>>>>>> feature
int main(void)
{
    /* Replace with your application code */
	/* initialization */
	/*Declaring and Initialization of variables*/	
	app_init();
<<<<<<< HEAD
 2e0:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
=======
 304:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
>>>>>>> feature
	
	while(1)
	{
		app_start();
<<<<<<< HEAD
 2e4:	0e 94 ef 00 	call	0x1de	; 0x1de <app_start>
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <main+0x4>

000002ea <ADC_init>:
=======
 308:	0e 94 ef 00 	call	0x1de	; 0x1de <app_start>
 30c:	fd cf       	rjmp	.-6      	; 0x308 <main+0x4>

0000030e <ADC_init>:
>>>>>>> feature
 */ 
#include "adc.h"

void ADC_init(void)
{
	ADMUX |= (1<<REFS0);		// AVCC reference
<<<<<<< HEAD
 2ea:	87 b1       	in	r24, 0x07	; 7
 2ec:	80 64       	ori	r24, 0x40	; 64
 2ee:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0x00 ;			//prescale  /2
 2f0:	16 b8       	out	0x06, r1	; 6
	
	ADCSRA |= (1<<ADEN);	// Enable the ADC
 2f2:	86 b1       	in	r24, 0x06	; 6
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	86 b9       	out	0x06, r24	; 6
 2f8:	08 95       	ret

000002fa <ADC_read>:
=======
 30e:	87 b1       	in	r24, 0x07	; 7
 310:	80 64       	ori	r24, 0x40	; 64
 312:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0x00 ;			//prescale  /2
 314:	16 b8       	out	0x06, r1	; 6
	
	ADCSRA |= (1<<ADEN);	// Enable the ADC
 316:	86 b1       	in	r24, 0x06	; 6
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	86 b9       	out	0x06, r24	; 6
 31c:	08 95       	ret

0000031e <ADC_read>:
>>>>>>> feature
}

uint16_t ADC_read(uint8_t channel)
{
	ADMUX |= (channel & 0x0F);	//Choose channel to be read
<<<<<<< HEAD
 2fa:	97 b1       	in	r25, 0x07	; 7
 2fc:	8f 70       	andi	r24, 0x0F	; 15
 2fe:	98 2b       	or	r25, r24
 300:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= (1<<ADSC);		//Start Conversion
 302:	86 b1       	in	r24, 0x06	; 6
 304:	80 64       	ori	r24, 0x40	; 64
 306:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1<<4)) == 0);	//Wait for conversion Complete flag
 308:	34 9b       	sbis	0x06, 4	; 6
 30a:	fe cf       	rjmp	.-4      	; 0x308 <ADC_read+0xe>

	return ADCL | (ADCH << 8);	//Return the digital value
 30c:	24 b1       	in	r18, 0x04	; 4
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	98 2f       	mov	r25, r24
 314:	88 27       	eor	r24, r24
	
 316:	82 2b       	or	r24, r18
 318:	08 95       	ret

0000031a <DIO_init>:
=======
 31e:	97 b1       	in	r25, 0x07	; 7
 320:	8f 70       	andi	r24, 0x0F	; 15
 322:	98 2b       	or	r25, r24
 324:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= (1<<ADSC);		//Start Conversion
 326:	86 b1       	in	r24, 0x06	; 6
 328:	80 64       	ori	r24, 0x40	; 64
 32a:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1<<4)) == 0);	//Wait for conversion Complete flag
 32c:	34 9b       	sbis	0x06, 4	; 6
 32e:	fe cf       	rjmp	.-4      	; 0x32c <ADC_read+0xe>

	return ADCL | (ADCH << 8);	//Return the digital value
 330:	24 b1       	in	r18, 0x04	; 4
 332:	85 b1       	in	r24, 0x05	; 5
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	98 2f       	mov	r25, r24
 338:	88 27       	eor	r24, r24
	
 33a:	82 2b       	or	r24, r18
 33c:	08 95       	ret

0000033e <DIO_init>:
>>>>>>> feature

// global variables
// functions definitions
void DIO_init(uint8_t port_number, uint8_t pin_number, uint8_t direction)
{
	switch(port_number)
<<<<<<< HEAD
 31a:	82 34       	cpi	r24, 0x42	; 66
 31c:	29 f1       	breq	.+74     	; 0x368 <DIO_init+0x4e>
 31e:	18 f4       	brcc	.+6      	; 0x326 <DIO_init+0xc>
 320:	81 34       	cpi	r24, 0x41	; 65
 322:	39 f0       	breq	.+14     	; 0x332 <DIO_init+0x18>
 324:	08 95       	ret
 326:	83 34       	cpi	r24, 0x43	; 67
 328:	d1 f1       	breq	.+116    	; 0x39e <DIO_init+0x84>
 32a:	84 34       	cpi	r24, 0x44	; 68
 32c:	09 f4       	brne	.+2      	; 0x330 <DIO_init+0x16>
 32e:	52 c0       	rjmp	.+164    	; 0x3d4 <DIO_init+0xba>
 330:	08 95       	ret
	{
		case PORT_A:
		if(direction == OUT)
 332:	41 30       	cpi	r20, 0x01	; 1
 334:	59 f4       	brne	.+22     	; 0x34c <DIO_init+0x32>
		{
			//DDRA |= (1<<pin_number); //output
			SET_BIT(DDRA, pin_number);
 336:	2a b3       	in	r18, 0x1a	; 26
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_init+0x28>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_init+0x24>
 346:	82 2b       	or	r24, r18
 348:	8a bb       	out	0x1a, r24	; 26
 34a:	08 95       	ret
			
		}
		else if(direction == IN)
 34c:	41 11       	cpse	r20, r1
 34e:	5c c0       	rjmp	.+184    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			//DDRA &= ~(1<<pin_number); // input
			ClEAR_BIT(DDRA, pin_number);
 350:	2a b3       	in	r18, 0x1a	; 26
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_init+0x42>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_init+0x3e>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	8a bb       	out	0x1a, r24	; 26
 366:	08 95       	ret
=======
 33e:	82 34       	cpi	r24, 0x42	; 66
 340:	29 f1       	breq	.+74     	; 0x38c <DIO_init+0x4e>
 342:	18 f4       	brcc	.+6      	; 0x34a <DIO_init+0xc>
 344:	81 34       	cpi	r24, 0x41	; 65
 346:	39 f0       	breq	.+14     	; 0x356 <DIO_init+0x18>
 348:	08 95       	ret
 34a:	83 34       	cpi	r24, 0x43	; 67
 34c:	d1 f1       	breq	.+116    	; 0x3c2 <DIO_init+0x84>
 34e:	84 34       	cpi	r24, 0x44	; 68
 350:	09 f4       	brne	.+2      	; 0x354 <DIO_init+0x16>
 352:	52 c0       	rjmp	.+164    	; 0x3f8 <DIO_init+0xba>
 354:	08 95       	ret
	{
		case PORT_A:
		if(direction == OUT)
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_init+0x32>
		{
			//DDRA |= (1<<pin_number); //output
			SET_BIT(DDRA, pin_number);
 35a:	2a b3       	in	r18, 0x1a	; 26
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_init+0x28>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_init+0x24>
 36a:	82 2b       	or	r24, r18
 36c:	8a bb       	out	0x1a, r24	; 26
 36e:	08 95       	ret
			
		}
		else if(direction == IN)
 370:	41 11       	cpse	r20, r1
 372:	5c c0       	rjmp	.+184    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			//DDRA &= ~(1<<pin_number); // input
			ClEAR_BIT(DDRA, pin_number);
 374:	2a b3       	in	r18, 0x1a	; 26
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_init+0x42>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_init+0x3e>
 384:	80 95       	com	r24
 386:	82 23       	and	r24, r18
 388:	8a bb       	out	0x1a, r24	; 26
 38a:	08 95       	ret
>>>>>>> feature
			//ERROR handling
		}
		break;
		
		case PORT_B:
		if(direction == OUT)
<<<<<<< HEAD
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	59 f4       	brne	.+22     	; 0x382 <DIO_init+0x68>
		{
			//DDRB |= (1<<pin_number);
			SET_BIT(DDRB, pin_number);
 36c:	27 b3       	in	r18, 0x17	; 23
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_init+0x5e>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_init+0x5a>
 37c:	82 2b       	or	r24, r18
 37e:	87 bb       	out	0x17, r24	; 23
 380:	08 95       	ret
		}
		else if(direction == IN)
 382:	41 11       	cpse	r20, r1
 384:	41 c0       	rjmp	.+130    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			//DDRB &= ~(1<<pin_number);
			ClEAR_BIT(DDRB, pin_number);
 386:	27 b3       	in	r18, 0x17	; 23
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0x78>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0x74>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	87 bb       	out	0x17, r24	; 23
 39c:	08 95       	ret
=======
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	59 f4       	brne	.+22     	; 0x3a6 <DIO_init+0x68>
		{
			//DDRB |= (1<<pin_number);
			SET_BIT(DDRB, pin_number);
 390:	27 b3       	in	r18, 0x17	; 23
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_init+0x5e>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_init+0x5a>
 3a0:	82 2b       	or	r24, r18
 3a2:	87 bb       	out	0x17, r24	; 23
 3a4:	08 95       	ret
		}
		else if(direction == IN)
 3a6:	41 11       	cpse	r20, r1
 3a8:	41 c0       	rjmp	.+130    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			//DDRB &= ~(1<<pin_number);
			ClEAR_BIT(DDRB, pin_number);
 3aa:	27 b3       	in	r18, 0x17	; 23
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_init+0x78>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_init+0x74>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	08 95       	ret
>>>>>>> feature
			//ERROR handling
		}
		break;
		
		case PORT_C:
		if(direction == OUT)
<<<<<<< HEAD
 39e:	41 30       	cpi	r20, 0x01	; 1
 3a0:	59 f4       	brne	.+22     	; 0x3b8 <DIO_init+0x9e>
		{
			//DDRC |= (1<<pin_number);
			SET_BIT(DDRC, pin_number);
 3a2:	24 b3       	in	r18, 0x14	; 20
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_init+0x94>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_init+0x90>
 3b2:	82 2b       	or	r24, r18
 3b4:	84 bb       	out	0x14, r24	; 20
 3b6:	08 95       	ret
		}
		else if(direction == IN)
 3b8:	41 11       	cpse	r20, r1
 3ba:	26 c0       	rjmp	.+76     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			//DDRC &= ~(1<<pin_number);
			ClEAR_BIT(DDRC, pin_number);
 3bc:	24 b3       	in	r18, 0x14	; 20
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_init+0xae>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_init+0xaa>
 3cc:	80 95       	com	r24
 3ce:	82 23       	and	r24, r18
 3d0:	84 bb       	out	0x14, r24	; 20
 3d2:	08 95       	ret
=======
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	59 f4       	brne	.+22     	; 0x3dc <DIO_init+0x9e>
		{
			//DDRC |= (1<<pin_number);
			SET_BIT(DDRC, pin_number);
 3c6:	24 b3       	in	r18, 0x14	; 20
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0x94>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0x90>
 3d6:	82 2b       	or	r24, r18
 3d8:	84 bb       	out	0x14, r24	; 20
 3da:	08 95       	ret
		}
		else if(direction == IN)
 3dc:	41 11       	cpse	r20, r1
 3de:	26 c0       	rjmp	.+76     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			//DDRC &= ~(1<<pin_number);
			ClEAR_BIT(DDRC, pin_number);
 3e0:	24 b3       	in	r18, 0x14	; 20
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_init+0xae>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_init+0xaa>
 3f0:	80 95       	com	r24
 3f2:	82 23       	and	r24, r18
 3f4:	84 bb       	out	0x14, r24	; 20
 3f6:	08 95       	ret
>>>>>>> feature
			//ERROR handling
		}
		break;
		
		case PORT_D:
		if(direction == OUT)
<<<<<<< HEAD
 3d4:	41 30       	cpi	r20, 0x01	; 1
 3d6:	59 f4       	brne	.+22     	; 0x3ee <DIO_init+0xd4>
		{
			//DDRD |= (1<<pin_number);
			SET_BIT(DDRD, pin_number);
 3d8:	21 b3       	in	r18, 0x11	; 17
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_init+0xca>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_init+0xc6>
 3e8:	82 2b       	or	r24, r18
 3ea:	81 bb       	out	0x11, r24	; 17
 3ec:	08 95       	ret
		}
		else if(direction == IN)
 3ee:	41 11       	cpse	r20, r1
 3f0:	0b c0       	rjmp	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		{
			//DDRD &= ~(1<<pin_number);
			ClEAR_BIT(DDRD, pin_number);
 3f2:	21 b3       	in	r18, 0x11	; 17
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_init+0xe4>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_init+0xe0>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	81 bb       	out	0x11, r24	; 17
 408:	08 95       	ret

0000040a <DIO_write>:
=======
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	59 f4       	brne	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			//DDRD |= (1<<pin_number);
			SET_BIT(DDRD, pin_number);
 3fc:	21 b3       	in	r18, 0x11	; 17
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	82 2b       	or	r24, r18
 40e:	81 bb       	out	0x11, r24	; 17
 410:	08 95       	ret
		}
		else if(direction == IN)
 412:	41 11       	cpse	r20, r1
 414:	0b c0       	rjmp	.+22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			//DDRD &= ~(1<<pin_number);
			ClEAR_BIT(DDRD, pin_number);
 416:	21 b3       	in	r18, 0x11	; 17
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	80 95       	com	r24
 428:	82 23       	and	r24, r18
 42a:	81 bb       	out	0x11, r24	; 17
 42c:	08 95       	ret

0000042e <DIO_write>:
>>>>>>> feature
	}
}

void DIO_write(uint8_t port_number, uint8_t pin_number, uint8_t value)
{
		switch(port_number)
<<<<<<< HEAD
 40a:	82 34       	cpi	r24, 0x42	; 66
 40c:	29 f1       	breq	.+74     	; 0x458 <DIO_write+0x4e>
 40e:	18 f4       	brcc	.+6      	; 0x416 <DIO_write+0xc>
 410:	81 34       	cpi	r24, 0x41	; 65
 412:	39 f0       	breq	.+14     	; 0x422 <DIO_write+0x18>
 414:	08 95       	ret
 416:	83 34       	cpi	r24, 0x43	; 67
 418:	d1 f1       	breq	.+116    	; 0x48e <DIO_write+0x84>
 41a:	84 34       	cpi	r24, 0x44	; 68
 41c:	09 f4       	brne	.+2      	; 0x420 <DIO_write+0x16>
 41e:	52 c0       	rjmp	.+164    	; 0x4c4 <DIO_write+0xba>
 420:	08 95       	ret
		{
			case PORT_A:
			if(value == HIGH)
 422:	41 30       	cpi	r20, 0x01	; 1
 424:	59 f4       	brne	.+22     	; 0x43c <DIO_write+0x32>
			{
				//PORTA |= (1<<pin_number); //write 1
				SET_BIT(PORTA, pin_number);
 426:	2b b3       	in	r18, 0x1b	; 27
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_write+0x28>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_write+0x24>
 436:	82 2b       	or	r24, r18
 438:	8b bb       	out	0x1b, r24	; 27
 43a:	08 95       	ret
			}
			else if(value == LOW)
 43c:	41 11       	cpse	r20, r1
 43e:	5c c0       	rjmp	.+184    	; 0x4f8 <DIO_write+0xee>
			{
				//PORTA &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTA, pin_number);
 440:	2b b3       	in	r18, 0x1b	; 27
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_write+0x42>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_write+0x3e>
 450:	80 95       	com	r24
 452:	82 23       	and	r24, r18
 454:	8b bb       	out	0x1b, r24	; 27
 456:	08 95       	ret
=======
 42e:	82 34       	cpi	r24, 0x42	; 66
 430:	29 f1       	breq	.+74     	; 0x47c <DIO_write+0x4e>
 432:	18 f4       	brcc	.+6      	; 0x43a <DIO_write+0xc>
 434:	81 34       	cpi	r24, 0x41	; 65
 436:	39 f0       	breq	.+14     	; 0x446 <DIO_write+0x18>
 438:	08 95       	ret
 43a:	83 34       	cpi	r24, 0x43	; 67
 43c:	d1 f1       	breq	.+116    	; 0x4b2 <DIO_write+0x84>
 43e:	84 34       	cpi	r24, 0x44	; 68
 440:	09 f4       	brne	.+2      	; 0x444 <DIO_write+0x16>
 442:	52 c0       	rjmp	.+164    	; 0x4e8 <DIO_write+0xba>
 444:	08 95       	ret
		{
			case PORT_A:
			if(value == HIGH)
 446:	41 30       	cpi	r20, 0x01	; 1
 448:	59 f4       	brne	.+22     	; 0x460 <DIO_write+0x32>
			{
				//PORTA |= (1<<pin_number); //write 1
				SET_BIT(PORTA, pin_number);
 44a:	2b b3       	in	r18, 0x1b	; 27
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_write+0x28>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	6a 95       	dec	r22
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_write+0x24>
 45a:	82 2b       	or	r24, r18
 45c:	8b bb       	out	0x1b, r24	; 27
 45e:	08 95       	ret
			}
			else if(value == LOW)
 460:	41 11       	cpse	r20, r1
 462:	5c c0       	rjmp	.+184    	; 0x51c <DIO_write+0xee>
			{
				//PORTA &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTA, pin_number);
 464:	2b b3       	in	r18, 0x1b	; 27
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <DIO_write+0x42>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	6a 95       	dec	r22
 472:	e2 f7       	brpl	.-8      	; 0x46c <DIO_write+0x3e>
 474:	80 95       	com	r24
 476:	82 23       	and	r24, r18
 478:	8b bb       	out	0x1b, r24	; 27
 47a:	08 95       	ret
>>>>>>> feature
				//ERROR handling
			}
			break;
			
			case PORT_B:
			if(value == HIGH)
<<<<<<< HEAD
 458:	41 30       	cpi	r20, 0x01	; 1
 45a:	59 f4       	brne	.+22     	; 0x472 <DIO_write+0x68>
			{
				//PORTB |= (1<<pin_number); //write 1
				SET_BIT(PORTB, pin_number);
 45c:	28 b3       	in	r18, 0x18	; 24
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_write+0x5e>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_write+0x5a>
 46c:	82 2b       	or	r24, r18
 46e:	88 bb       	out	0x18, r24	; 24
 470:	08 95       	ret
			}
			else if(value == LOW)
 472:	41 11       	cpse	r20, r1
 474:	41 c0       	rjmp	.+130    	; 0x4f8 <DIO_write+0xee>
			{
				//PORTB &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTB, pin_number);
 476:	28 b3       	in	r18, 0x18	; 24
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_write+0x78>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_write+0x74>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	88 bb       	out	0x18, r24	; 24
 48c:	08 95       	ret
=======
 47c:	41 30       	cpi	r20, 0x01	; 1
 47e:	59 f4       	brne	.+22     	; 0x496 <DIO_write+0x68>
			{
				//PORTB |= (1<<pin_number); //write 1
				SET_BIT(PORTB, pin_number);
 480:	28 b3       	in	r18, 0x18	; 24
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_write+0x5e>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_write+0x5a>
 490:	82 2b       	or	r24, r18
 492:	88 bb       	out	0x18, r24	; 24
 494:	08 95       	ret
			}
			else if(value == LOW)
 496:	41 11       	cpse	r20, r1
 498:	41 c0       	rjmp	.+130    	; 0x51c <DIO_write+0xee>
			{
				//PORTB &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTB, pin_number);
 49a:	28 b3       	in	r18, 0x18	; 24
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_write+0x78>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_write+0x74>
 4aa:	80 95       	com	r24
 4ac:	82 23       	and	r24, r18
 4ae:	88 bb       	out	0x18, r24	; 24
 4b0:	08 95       	ret
>>>>>>> feature
				//ERROR handling
			}
			break;
			
			case PORT_C:
			if(value == HIGH)
<<<<<<< HEAD
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	59 f4       	brne	.+22     	; 0x4a8 <DIO_write+0x9e>
			{
				//PORTC |= (1<<pin_number); //write 1
				SET_BIT(PORTC, pin_number);
 492:	25 b3       	in	r18, 0x15	; 21
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_write+0x94>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_write+0x90>
 4a2:	82 2b       	or	r24, r18
 4a4:	85 bb       	out	0x15, r24	; 21
 4a6:	08 95       	ret
			}
			else if(value == LOW)
 4a8:	41 11       	cpse	r20, r1
 4aa:	26 c0       	rjmp	.+76     	; 0x4f8 <DIO_write+0xee>
			{
				//PORTC &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTC, pin_number);
 4ac:	25 b3       	in	r18, 0x15	; 21
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_write+0xae>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_write+0xaa>
 4bc:	80 95       	com	r24
 4be:	82 23       	and	r24, r18
 4c0:	85 bb       	out	0x15, r24	; 21
 4c2:	08 95       	ret
=======
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	59 f4       	brne	.+22     	; 0x4cc <DIO_write+0x9e>
			{
				//PORTC |= (1<<pin_number); //write 1
				SET_BIT(PORTC, pin_number);
 4b6:	25 b3       	in	r18, 0x15	; 21
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_write+0x94>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_write+0x90>
 4c6:	82 2b       	or	r24, r18
 4c8:	85 bb       	out	0x15, r24	; 21
 4ca:	08 95       	ret
			}
			else if(value == LOW)
 4cc:	41 11       	cpse	r20, r1
 4ce:	26 c0       	rjmp	.+76     	; 0x51c <DIO_write+0xee>
			{
				//PORTC &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTC, pin_number);
 4d0:	25 b3       	in	r18, 0x15	; 21
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_write+0xae>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_write+0xaa>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	85 bb       	out	0x15, r24	; 21
 4e6:	08 95       	ret
>>>>>>> feature
				//ERROR handling
			}
			break;
			
			case PORT_D:
			if(value == HIGH)
<<<<<<< HEAD
 4c4:	41 30       	cpi	r20, 0x01	; 1
 4c6:	59 f4       	brne	.+22     	; 0x4de <DIO_write+0xd4>
			{
				//PORTD |= (1<<pin_number); //write 1
				SET_BIT(PORTD, pin_number);
 4c8:	22 b3       	in	r18, 0x12	; 18
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_write+0xca>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_write+0xc6>
 4d8:	82 2b       	or	r24, r18
 4da:	82 bb       	out	0x12, r24	; 18
 4dc:	08 95       	ret
			}
			else if(value == LOW)
 4de:	41 11       	cpse	r20, r1
 4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <DIO_write+0xee>
			{
				//PORTD &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTD, pin_number);
 4e2:	22 b3       	in	r18, 0x12	; 18
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_write+0xe4>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_write+0xe0>
 4f2:	80 95       	com	r24
 4f4:	82 23       	and	r24, r18
 4f6:	82 bb       	out	0x12, r24	; 18
 4f8:	08 95       	ret

000004fa <LCD_4_bit_sendCommand>:
=======
 4e8:	41 30       	cpi	r20, 0x01	; 1
 4ea:	59 f4       	brne	.+22     	; 0x502 <DIO_write+0xd4>
			{
				//PORTD |= (1<<pin_number); //write 1
				SET_BIT(PORTD, pin_number);
 4ec:	22 b3       	in	r18, 0x12	; 18
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_write+0xca>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_write+0xc6>
 4fc:	82 2b       	or	r24, r18
 4fe:	82 bb       	out	0x12, r24	; 18
 500:	08 95       	ret
			}
			else if(value == LOW)
 502:	41 11       	cpse	r20, r1
 504:	0b c0       	rjmp	.+22     	; 0x51c <DIO_write+0xee>
			{
				//PORTD &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTD, pin_number);
 506:	22 b3       	in	r18, 0x12	; 18
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_write+0xe4>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_write+0xe0>
 516:	80 95       	com	r24
 518:	82 23       	and	r24, r18
 51a:	82 bb       	out	0x12, r24	; 18
 51c:	08 95       	ret

0000051e <LCD_4_bit_sendCommand>:
>>>>>>> feature
	LCD_4_bit_sendCommand(0x01);	//clear Display
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
	
}
void LCD_4_bit_sendCommand(uint8_t command)
{
<<<<<<< HEAD
 4fa:	cf 93       	push	r28
 4fc:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command & 0xF0); //Sending upper nibble
 4fe:	85 b3       	in	r24, 0x15	; 21
 500:	8f 70       	andi	r24, 0x0F	; 15
 502:	9c 2f       	mov	r25, r28
 504:	90 7f       	andi	r25, 0xF0	; 240
 506:	89 2b       	or	r24, r25
 508:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port &= ~(1<<RS); // RS PIN = 0 command register
 50a:	82 b3       	in	r24, 0x12	; 18
 50c:	8b 7f       	andi	r24, 0xFB	; 251
 50e:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
 510:	82 b3       	in	r24, 0x12	; 18
 512:	87 7f       	andi	r24, 0xF7	; 247
 514:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 516:	82 b3       	in	r24, 0x12	; 18
 518:	80 61       	ori	r24, 0x10	; 16
 51a:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 528:	82 b3       	in	r24, 0x12	; 18
 52a:	8f 7e       	andi	r24, 0xEF	; 239
 52c:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command << 4); //Sending upper nibble
 53a:	25 b3       	in	r18, 0x15	; 21
 53c:	30 e1       	ldi	r19, 0x10	; 16
 53e:	c3 9f       	mul	r28, r19
 540:	c0 01       	movw	r24, r0
 542:	11 24       	eor	r1, r1
 544:	92 2f       	mov	r25, r18
 546:	9f 70       	andi	r25, 0x0F	; 15
 548:	89 2b       	or	r24, r25
 54a:	85 bb       	out	0x15, r24	; 21
		
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 54c:	82 b3       	in	r24, 0x12	; 18
 54e:	80 61       	ori	r24, 0x10	; 16
 550:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 55e:	82 b3       	in	r24, 0x12	; 18
 560:	8f 7e       	andi	r24, 0xEF	; 239
 562:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
}
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <LCD_4_bit_init>:
=======
 51e:	cf 93       	push	r28
 520:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command & 0xF0); //Sending upper nibble
 522:	85 b3       	in	r24, 0x15	; 21
 524:	8f 70       	andi	r24, 0x0F	; 15
 526:	9c 2f       	mov	r25, r28
 528:	90 7f       	andi	r25, 0xF0	; 240
 52a:	89 2b       	or	r24, r25
 52c:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port &= ~(1<<RS); // RS PIN = 0 command register
 52e:	82 b3       	in	r24, 0x12	; 18
 530:	8b 7f       	andi	r24, 0xFB	; 251
 532:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
 534:	82 b3       	in	r24, 0x12	; 18
 536:	87 7f       	andi	r24, 0xF7	; 247
 538:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 53a:	82 b3       	in	r24, 0x12	; 18
 53c:	80 61       	ori	r24, 0x10	; 16
 53e:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 54c:	82 b3       	in	r24, 0x12	; 18
 54e:	8f 7e       	andi	r24, 0xEF	; 239
 550:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (command << 4); //Sending upper nibble
 55e:	25 b3       	in	r18, 0x15	; 21
 560:	30 e1       	ldi	r19, 0x10	; 16
 562:	c3 9f       	mul	r28, r19
 564:	c0 01       	movw	r24, r0
 566:	11 24       	eor	r1, r1
 568:	92 2f       	mov	r25, r18
 56a:	9f 70       	andi	r25, 0x0F	; 15
 56c:	89 2b       	or	r24, r25
 56e:	85 bb       	out	0x15, r24	; 21
		
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 570:	82 b3       	in	r24, 0x12	; 18
 572:	80 61       	ori	r24, 0x10	; 16
 574:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 582:	82 b3       	in	r24, 0x12	; 18
 584:	8f 7e       	andi	r24, 0xEF	; 239
 586:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
}
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <LCD_4_bit_init>:
>>>>>>> feature
	
}

void LCD_4_bit_init(void)
{
	LCD_Command_Port_Dir |= (1<<2) | (1<<3) | (1<<4);  //Make PIN0, PIN1, PIN2 in PORTD outputs
<<<<<<< HEAD
 574:	81 b3       	in	r24, 0x11	; 17
 576:	8c 61       	ori	r24, 0x1C	; 28
 578:	81 bb       	out	0x11, r24	; 17
	LCD_Data_PORT_Dir |= (1<<4) | (1<<5) | (1<<6) | (1<<7); //Make PIN4, PIN5, PIN6, PIN7 in PORTC outputs
 57a:	84 b3       	in	r24, 0x14	; 20
 57c:	80 6f       	ori	r24, 0xF0	; 240
 57e:	84 bb       	out	0x14, r24	; 20
	TIMER_set(Normal);
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 4f 03 	call	0x69e	; 0x69e <TIMER_set>
	TIMER0_delay(20, no_prescale);	//LCD power ON delay always >15ms
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	84 e1       	ldi	r24, 0x14	; 20
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
	LCD_4_bit_sendCommand(0x02);	//Send for 4 bit initialization of the LCD
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x28);	//initialization of 5x7 LCD in 4 bit mode
 598:	88 e2       	ldi	r24, 0x28	; 40
 59a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x0C);	//Display ON, Cursor OFF
 59e:	8c e0       	ldi	r24, 0x0C	; 12
 5a0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x06);	//Auto increment cursor
 5a4:	86 e0       	ldi	r24, 0x06	; 6
 5a6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x01);	//clear Display
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
 5b0:	80 e8       	ldi	r24, 0x80	; 128
 5b2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendCommand>
 5b6:	08 95       	ret

000005b8 <LCD_4_bit_sendChar>:
=======
 598:	81 b3       	in	r24, 0x11	; 17
 59a:	8c 61       	ori	r24, 0x1C	; 28
 59c:	81 bb       	out	0x11, r24	; 17
	LCD_Data_PORT_Dir |= (1<<4) | (1<<5) | (1<<6) | (1<<7); //Make PIN4, PIN5, PIN6, PIN7 in PORTC outputs
 59e:	84 b3       	in	r24, 0x14	; 20
 5a0:	80 6f       	ori	r24, 0xF0	; 240
 5a2:	84 bb       	out	0x14, r24	; 20
	TIMER_set(Normal);
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <TIMER_set>
	TIMER0_delay(20, no_prescale);	//LCD power ON delay always >15ms
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	84 e1       	ldi	r24, 0x14	; 20
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
	LCD_4_bit_sendCommand(0x02);	//Send for 4 bit initialization of the LCD
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x28);	//initialization of 5x7 LCD in 4 bit mode
 5bc:	88 e2       	ldi	r24, 0x28	; 40
 5be:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x0C);	//Display ON, Cursor OFF
 5c2:	8c e0       	ldi	r24, 0x0C	; 12
 5c4:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x06);	//Auto increment cursor
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x01);	//clear Display
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
	LCD_4_bit_sendCommand(0x80);	//cursor at home position	
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_4_bit_sendCommand>
 5da:	08 95       	ret

000005dc <LCD_4_bit_sendChar>:
>>>>>>> feature
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
	
	TIMER0_delay(1,no_prescale);
}
void LCD_4_bit_sendChar(uint8_t character)
{
<<<<<<< HEAD
 5b8:	cf 93       	push	r28
 5ba:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character & 0xF0); //Sending upper nibble
 5bc:	85 b3       	in	r24, 0x15	; 21
 5be:	8f 70       	andi	r24, 0x0F	; 15
 5c0:	9c 2f       	mov	r25, r28
 5c2:	90 7f       	andi	r25, 0xF0	; 240
 5c4:	89 2b       	or	r24, r25
 5c6:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<RS); // RS PIN = 1 data register
 5c8:	82 b3       	in	r24, 0x12	; 18
 5ca:	84 60       	ori	r24, 0x04	; 4
 5cc:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
 5ce:	82 b3       	in	r24, 0x12	; 18
 5d0:	87 7f       	andi	r24, 0xF7	; 247
 5d2:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 5d4:	82 b3       	in	r24, 0x12	; 18
 5d6:	80 61       	ori	r24, 0x10	; 16
 5d8:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 5e6:	82 b3       	in	r24, 0x12	; 18
 5e8:	8f 7e       	andi	r24, 0xEF	; 239
 5ea:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character << 4); //Sending upper nibble
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	30 e1       	ldi	r19, 0x10	; 16
 5fc:	c3 9f       	mul	r28, r19
 5fe:	c0 01       	movw	r24, r0
 600:	11 24       	eor	r1, r1
 602:	92 2f       	mov	r25, r18
 604:	9f 70       	andi	r25, 0x0F	; 15
 606:	89 2b       	or	r24, r25
 608:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 60a:	82 b3       	in	r24, 0x12	; 18
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 61c:	82 b3       	in	r24, 0x12	; 18
 61e:	8f 7e       	andi	r24, 0xEF	; 239
 620:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 622:	61 e0       	ldi	r22, 0x01	; 1
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 b1 03 	call	0x762	; 0x762 <TIMER0_delay>
}
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <LCD_4_bit_sendString>:
void LCD_4_bit_sendString(uint8_t *str)
{
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	8c 01       	movw	r16, r24
	uint8_t i;
	
	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
 63a:	c0 e0       	ldi	r28, 0x00	; 0
 63c:	03 c0       	rjmp	.+6      	; 0x644 <LCD_4_bit_sendString+0x12>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
 63e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_4_bit_sendChar>
=======
 5dc:	cf 93       	push	r28
 5de:	c8 2f       	mov	r28, r24
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character & 0xF0); //Sending upper nibble
 5e0:	85 b3       	in	r24, 0x15	; 21
 5e2:	8f 70       	andi	r24, 0x0F	; 15
 5e4:	9c 2f       	mov	r25, r28
 5e6:	90 7f       	andi	r25, 0xF0	; 240
 5e8:	89 2b       	or	r24, r25
 5ea:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<RS); // RS PIN = 1 data register
 5ec:	82 b3       	in	r24, 0x12	; 18
 5ee:	84 60       	ori	r24, 0x04	; 4
 5f0:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port &= ~(1<<RW); // RW PIN = 0 write operation
 5f2:	82 b3       	in	r24, 0x12	; 18
 5f4:	87 7f       	andi	r24, 0xF7	; 247
 5f6:	82 bb       	out	0x12, r24	; 18
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 5f8:	82 b3       	in	r24, 0x12	; 18
 5fa:	80 61       	ori	r24, 0x10	; 16
 5fc:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 60a:	82 b3       	in	r24, 0x12	; 18
 60c:	8f 7e       	andi	r24, 0xEF	; 239
 60e:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
	
	LCD_Data_PORT = (LCD_Data_PORT &0x0F) | (character << 4); //Sending upper nibble
 61c:	25 b3       	in	r18, 0x15	; 21
 61e:	30 e1       	ldi	r19, 0x10	; 16
 620:	c3 9f       	mul	r28, r19
 622:	c0 01       	movw	r24, r0
 624:	11 24       	eor	r1, r1
 626:	92 2f       	mov	r25, r18
 628:	9f 70       	andi	r25, 0x0F	; 15
 62a:	89 2b       	or	r24, r25
 62c:	85 bb       	out	0x15, r24	; 21
	
	LCD_Command_Port |= (1<<EN); // EN PIN = 1 Enable pulse high
 62e:	82 b3       	in	r24, 0x12	; 18
 630:	80 61       	ori	r24, 0x10	; 16
 632:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
	
	LCD_Command_Port &= ~(1<<EN); // EN PIN = 0 Enable pulse low
 640:	82 b3       	in	r24, 0x12	; 18
 642:	8f 7e       	andi	r24, 0xEF	; 239
 644:	82 bb       	out	0x12, r24	; 18
	
	TIMER0_delay(1,no_prescale);
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 c3 03 	call	0x786	; 0x786 <TIMER0_delay>
}
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <LCD_4_bit_sendString>:
void LCD_4_bit_sendString(uint8_t *str)
{
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	8c 01       	movw	r16, r24
	uint8_t i;
	
	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
 65e:	c0 e0       	ldi	r28, 0x00	; 0
 660:	03 c0       	rjmp	.+6      	; 0x668 <LCD_4_bit_sendString+0x12>
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
 662:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_4_bit_sendChar>
>>>>>>> feature
}
void LCD_4_bit_sendString(uint8_t *str)
{
	uint8_t i;
	
	for(i=0; *(str + i) != 0; i++)	//send each character until str is null
<<<<<<< HEAD
 642:	cf 5f       	subi	r28, 0xFF	; 255
 644:	f8 01       	movw	r30, r16
 646:	ec 0f       	add	r30, r28
 648:	f1 1d       	adc	r31, r1
 64a:	80 81       	ld	r24, Z
 64c:	81 11       	cpse	r24, r1
 64e:	f7 cf       	rjmp	.-18     	; 0x63e <LCD_4_bit_sendString+0xc>
=======
 666:	cf 5f       	subi	r28, 0xFF	; 255
 668:	f8 01       	movw	r30, r16
 66a:	ec 0f       	add	r30, r28
 66c:	f1 1d       	adc	r31, r1
 66e:	80 81       	ld	r24, Z
 670:	81 11       	cpse	r24, r1
 672:	f7 cf       	rjmp	.-18     	; 0x662 <LCD_4_bit_sendString+0xc>
>>>>>>> feature
	{
		
		LCD_4_bit_sendChar(*(str + i)); // call the LCD_sendChar function each time
	}
	
}
<<<<<<< HEAD
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <Spi_Slave_init>:
=======
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	0f 91       	pop	r16
 67a:	08 95       	ret

0000067c <Spi_Slave_init>:
>>>>>>> feature

}

void Spi_Slave_init(void)
{
	DDRA = 0xFF;
<<<<<<< HEAD
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	8a bb       	out	0x1a, r24	; 26
	//initialize the IN and OUT PINS
	DIO_init(PORT_B,SS,IN);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	64 e0       	ldi	r22, 0x04	; 4
 660:	82 e4       	ldi	r24, 0x42	; 66
 662:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
	DIO_init(PORT_B,SCK,IN);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	67 e0       	ldi	r22, 0x07	; 7
 66a:	82 e4       	ldi	r24, 0x42	; 66
 66c:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
	DIO_init(PORT_B,MOSI,IN);
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	65 e0       	ldi	r22, 0x05	; 5
 674:	82 e4       	ldi	r24, 0x42	; 66
 676:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
	DIO_init(PORT_B,MISO,OUT);
 67a:	41 e0       	ldi	r20, 0x01	; 1
 67c:	66 e0       	ldi	r22, 0x06	; 6
 67e:	82 e4       	ldi	r24, 0x42	; 66
 680:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_init>
	//Select Master mode, prescale of /16, enable the SPI
	SPCR |= (1<<SPE) | (1<<SPR1);
 684:	8d b1       	in	r24, 0x0d	; 13
 686:	82 64       	ori	r24, 0x42	; 66
 688:	8d b9       	out	0x0d, r24	; 13
	//disable the double SPI speed bit
	SPSR &= ~ (1<<SPI2X);	
 68a:	8e b1       	in	r24, 0x0e	; 14
 68c:	8e 7f       	andi	r24, 0xFE	; 254
 68e:	8e b9       	out	0x0e, r24	; 14
 690:	08 95       	ret

00000692 <Spi_Slave_receive>:
=======
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	8a bb       	out	0x1a, r24	; 26
	//initialize the IN and OUT PINS
	DIO_init(PORT_B,SS,IN);
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	64 e0       	ldi	r22, 0x04	; 4
 684:	82 e4       	ldi	r24, 0x42	; 66
 686:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
	DIO_init(PORT_B,SCK,IN);
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	67 e0       	ldi	r22, 0x07	; 7
 68e:	82 e4       	ldi	r24, 0x42	; 66
 690:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
	DIO_init(PORT_B,MOSI,IN);
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	65 e0       	ldi	r22, 0x05	; 5
 698:	82 e4       	ldi	r24, 0x42	; 66
 69a:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
	DIO_init(PORT_B,MISO,OUT);
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	66 e0       	ldi	r22, 0x06	; 6
 6a2:	82 e4       	ldi	r24, 0x42	; 66
 6a4:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_init>
	//Select Master mode, prescale of /16, enable the SPI
	SPCR |= (1<<SPE) | (1<<SPR1);
 6a8:	8d b1       	in	r24, 0x0d	; 13
 6aa:	82 64       	ori	r24, 0x42	; 66
 6ac:	8d b9       	out	0x0d, r24	; 13
	//disable the double SPI speed bit
	SPSR &= ~ (1<<SPI2X);	
 6ae:	8e b1       	in	r24, 0x0e	; 14
 6b0:	8e 7f       	andi	r24, 0xFE	; 254
 6b2:	8e b9       	out	0x0e, r24	; 14
 6b4:	08 95       	ret

000006b6 <Spi_Slave_receive>:
>>>>>>> feature
}
uint8_t Spi_Slave_receive(void)
{
	SPDR = 0xFF;
<<<<<<< HEAD
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	8f b9       	out	0x0f, r24	; 15
	
	while(READ_BIT(SPSR,SPIF) == 0);
 696:	77 9b       	sbis	0x0e, 7	; 14
 698:	fe cf       	rjmp	.-4      	; 0x696 <Spi_Slave_receive+0x4>
	
	return SPDR;	
 69a:	8f b1       	in	r24, 0x0f	; 15
 69c:	08 95       	ret

0000069e <TIMER_set>:
=======
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	8f b9       	out	0x0f, r24	; 15
	
	while(READ_BIT(SPSR,SPIF) == 0);
 6ba:	77 9b       	sbis	0x0e, 7	; 14
 6bc:	fe cf       	rjmp	.-4      	; 0x6ba <Spi_Slave_receive+0x4>
	
	return SPDR;	
 6be:	8f b1       	in	r24, 0x0f	; 15
 6c0:	08 95       	ret

000006c2 <TIMER_set>:
>>>>>>> feature

//functions definitions

void TIMER_set(uint8_t Mode)
{
	switch(Mode)
<<<<<<< HEAD
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	69 f0       	breq	.+26     	; 0x6bc <TIMER_set+0x1e>
 6a2:	28 f0       	brcs	.+10     	; 0x6ae <TIMER_set+0x10>
 6a4:	82 30       	cpi	r24, 0x02	; 2
 6a6:	89 f0       	breq	.+34     	; 0x6ca <TIMER_set+0x2c>
 6a8:	83 30       	cpi	r24, 0x03	; 3
 6aa:	b1 f0       	breq	.+44     	; 0x6d8 <TIMER_set+0x3a>
 6ac:	08 95       	ret
	{
		case Normal:
			ClEAR_BIT(TCCR0, PIN3) ;		//Normal Mode
 6ae:	83 b7       	in	r24, 0x33	; 51
 6b0:	87 7f       	andi	r24, 0xF7	; 247
 6b2:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;	
 6b4:	83 b7       	in	r24, 0x33	; 51
 6b6:	8f 7b       	andi	r24, 0xBF	; 191
 6b8:	83 bf       	out	0x33, r24	; 51
		break;
 6ba:	08 95       	ret
		
		case PWM_Phase_Correct:
			ClEAR_BIT(TCCR0, PIN3) ;
 6bc:	83 b7       	in	r24, 0x33	; 51
 6be:	87 7f       	andi	r24, 0xF7	; 247
 6c0:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			//PWM_Phase_Correct Mode
 6c2:	83 b7       	in	r24, 0x33	; 51
 6c4:	80 64       	ori	r24, 0x40	; 64
 6c6:	83 bf       	out	0x33, r24	; 51
		break;	
 6c8:	08 95       	ret
			
		case CTC:
			SET_BIT(TCCR0, PIN3) ;			//CTC Mode
 6ca:	83 b7       	in	r24, 0x33	; 51
 6cc:	88 60       	ori	r24, 0x08	; 8
 6ce:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;			
 6d0:	83 b7       	in	r24, 0x33	; 51
 6d2:	8f 7b       	andi	r24, 0xBF	; 191
 6d4:	83 bf       	out	0x33, r24	; 51
		break;
 6d6:	08 95       	ret
		
		case Fast_PWM:
			SET_BIT(TCCR0, PIN3) ;			//Fast_PWM Mode
 6d8:	83 b7       	in	r24, 0x33	; 51
 6da:	88 60       	ori	r24, 0x08	; 8
 6dc:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	80 64       	ori	r24, 0x40	; 64
 6e2:	83 bf       	out	0x33, r24	; 51
 6e4:	08 95       	ret

000006e6 <TIMER_start>:
=======
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	69 f0       	breq	.+26     	; 0x6e0 <TIMER_set+0x1e>
 6c6:	28 f0       	brcs	.+10     	; 0x6d2 <TIMER_set+0x10>
 6c8:	82 30       	cpi	r24, 0x02	; 2
 6ca:	89 f0       	breq	.+34     	; 0x6ee <TIMER_set+0x2c>
 6cc:	83 30       	cpi	r24, 0x03	; 3
 6ce:	b1 f0       	breq	.+44     	; 0x6fc <TIMER_set+0x3a>
 6d0:	08 95       	ret
	{
		case Normal:
			ClEAR_BIT(TCCR0, PIN3) ;		//Normal Mode
 6d2:	83 b7       	in	r24, 0x33	; 51
 6d4:	87 7f       	andi	r24, 0xF7	; 247
 6d6:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;	
 6d8:	83 b7       	in	r24, 0x33	; 51
 6da:	8f 7b       	andi	r24, 0xBF	; 191
 6dc:	83 bf       	out	0x33, r24	; 51
		break;
 6de:	08 95       	ret
		
		case PWM_Phase_Correct:
			ClEAR_BIT(TCCR0, PIN3) ;
 6e0:	83 b7       	in	r24, 0x33	; 51
 6e2:	87 7f       	andi	r24, 0xF7	; 247
 6e4:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			//PWM_Phase_Correct Mode
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	80 64       	ori	r24, 0x40	; 64
 6ea:	83 bf       	out	0x33, r24	; 51
		break;	
 6ec:	08 95       	ret
			
		case CTC:
			SET_BIT(TCCR0, PIN3) ;			//CTC Mode
 6ee:	83 b7       	in	r24, 0x33	; 51
 6f0:	88 60       	ori	r24, 0x08	; 8
 6f2:	83 bf       	out	0x33, r24	; 51
			ClEAR_BIT(TCCR0, PIN6) ;			
 6f4:	83 b7       	in	r24, 0x33	; 51
 6f6:	8f 7b       	andi	r24, 0xBF	; 191
 6f8:	83 bf       	out	0x33, r24	; 51
		break;
 6fa:	08 95       	ret
		
		case Fast_PWM:
			SET_BIT(TCCR0, PIN3) ;			//Fast_PWM Mode
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	88 60       	ori	r24, 0x08	; 8
 700:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0, PIN6) ;			
 702:	83 b7       	in	r24, 0x33	; 51
 704:	80 64       	ori	r24, 0x40	; 64
 706:	83 bf       	out	0x33, r24	; 51
 708:	08 95       	ret

0000070a <TIMER_start>:
>>>>>>> feature
	}
	
}
void TIMER_start(uint16_t prescale)
{
	switch(prescale)
<<<<<<< HEAD
 6e6:	88 30       	cpi	r24, 0x08	; 8
 6e8:	91 05       	cpc	r25, r1
 6ea:	d1 f0       	breq	.+52     	; 0x720 <TIMER_start+0x3a>
 6ec:	48 f4       	brcc	.+18     	; 0x700 <TIMER_start+0x1a>
 6ee:	85 30       	cpi	r24, 0x05	; 5
 6f0:	91 05       	cpc	r25, r1
 6f2:	31 f1       	breq	.+76     	; 0x740 <TIMER_start+0x5a>
 6f4:	86 30       	cpi	r24, 0x06	; 6
 6f6:	91 05       	cpc	r25, r1
 6f8:	39 f1       	breq	.+78     	; 0x748 <TIMER_start+0x62>
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	41 f5       	brne	.+80     	; 0x74e <TIMER_start+0x68>
 6fe:	0c c0       	rjmp	.+24     	; 0x718 <TIMER_start+0x32>
 700:	81 15       	cp	r24, r1
 702:	21 e0       	ldi	r18, 0x01	; 1
 704:	92 07       	cpc	r25, r18
 706:	a1 f0       	breq	.+40     	; 0x730 <TIMER_start+0x4a>
 708:	81 15       	cp	r24, r1
 70a:	24 e0       	ldi	r18, 0x04	; 4
 70c:	92 07       	cpc	r25, r18
 70e:	a1 f0       	breq	.+40     	; 0x738 <TIMER_start+0x52>
 710:	80 34       	cpi	r24, 0x40	; 64
 712:	91 05       	cpc	r25, r1
 714:	e1 f4       	brne	.+56     	; 0x74e <TIMER_start+0x68>
 716:	08 c0       	rjmp	.+16     	; 0x728 <TIMER_start+0x42>
	{
		case no_prescale:				//No prescaling
			TCCR0 |= 0b00000001;
 718:	83 b7       	in	r24, 0x33	; 51
 71a:	81 60       	ori	r24, 0x01	; 1
 71c:	83 bf       	out	0x33, r24	; 51
		break;
 71e:	08 95       	ret
		
		case prescale8:					//8 prescaling
			TCCR0 |= 0b00000010;
 720:	83 b7       	in	r24, 0x33	; 51
 722:	82 60       	ori	r24, 0x02	; 2
 724:	83 bf       	out	0x33, r24	; 51
		break;
 726:	08 95       	ret

		case prescale64:				//64 prescaling
			TCCR0 |= 0b00000011;
 728:	83 b7       	in	r24, 0x33	; 51
 72a:	83 60       	ori	r24, 0x03	; 3
 72c:	83 bf       	out	0x33, r24	; 51
		break;
 72e:	08 95       	ret
		
		case prescale256:				// 256 prescaling
			TCCR0 |= 0b00000100;
 730:	83 b7       	in	r24, 0x33	; 51
 732:	84 60       	ori	r24, 0x04	; 4
 734:	83 bf       	out	0x33, r24	; 51
		break;
 736:	08 95       	ret
		
		case prescale1024:				//1024 prescaling
			TCCR0 |= 0b00000101;
 738:	83 b7       	in	r24, 0x33	; 51
 73a:	85 60       	ori	r24, 0x05	; 5
 73c:	83 bf       	out	0x33, r24	; 51
		break;
 73e:	08 95       	ret
		
		case External_Falling: //External_Falling on T0 pin
			TCCR0 |= 0b00000110;
 740:	83 b7       	in	r24, 0x33	; 51
 742:	86 60       	ori	r24, 0x06	; 6
 744:	83 bf       	out	0x33, r24	; 51
		break;
 746:	08 95       	ret
=======
 70a:	88 30       	cpi	r24, 0x08	; 8
 70c:	91 05       	cpc	r25, r1
 70e:	d1 f0       	breq	.+52     	; 0x744 <TIMER_start+0x3a>
 710:	48 f4       	brcc	.+18     	; 0x724 <TIMER_start+0x1a>
 712:	85 30       	cpi	r24, 0x05	; 5
 714:	91 05       	cpc	r25, r1
 716:	31 f1       	breq	.+76     	; 0x764 <TIMER_start+0x5a>
 718:	86 30       	cpi	r24, 0x06	; 6
 71a:	91 05       	cpc	r25, r1
 71c:	39 f1       	breq	.+78     	; 0x76c <TIMER_start+0x62>
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	41 f5       	brne	.+80     	; 0x772 <TIMER_start+0x68>
 722:	0c c0       	rjmp	.+24     	; 0x73c <TIMER_start+0x32>
 724:	81 15       	cp	r24, r1
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	92 07       	cpc	r25, r18
 72a:	a1 f0       	breq	.+40     	; 0x754 <TIMER_start+0x4a>
 72c:	81 15       	cp	r24, r1
 72e:	24 e0       	ldi	r18, 0x04	; 4
 730:	92 07       	cpc	r25, r18
 732:	a1 f0       	breq	.+40     	; 0x75c <TIMER_start+0x52>
 734:	80 34       	cpi	r24, 0x40	; 64
 736:	91 05       	cpc	r25, r1
 738:	e1 f4       	brne	.+56     	; 0x772 <TIMER_start+0x68>
 73a:	08 c0       	rjmp	.+16     	; 0x74c <TIMER_start+0x42>
	{
		case no_prescale:				//No prescaling
			TCCR0 |= 0b00000001;
 73c:	83 b7       	in	r24, 0x33	; 51
 73e:	81 60       	ori	r24, 0x01	; 1
 740:	83 bf       	out	0x33, r24	; 51
		break;
 742:	08 95       	ret
		
		case prescale8:					//8 prescaling
			TCCR0 |= 0b00000010;
 744:	83 b7       	in	r24, 0x33	; 51
 746:	82 60       	ori	r24, 0x02	; 2
 748:	83 bf       	out	0x33, r24	; 51
		break;
 74a:	08 95       	ret

		case prescale64:				//64 prescaling
			TCCR0 |= 0b00000011;
 74c:	83 b7       	in	r24, 0x33	; 51
 74e:	83 60       	ori	r24, 0x03	; 3
 750:	83 bf       	out	0x33, r24	; 51
		break;
 752:	08 95       	ret
		
		case prescale256:				// 256 prescaling
			TCCR0 |= 0b00000100;
 754:	83 b7       	in	r24, 0x33	; 51
 756:	84 60       	ori	r24, 0x04	; 4
 758:	83 bf       	out	0x33, r24	; 51
		break;
 75a:	08 95       	ret
		
		case prescale1024:				//1024 prescaling
			TCCR0 |= 0b00000101;
 75c:	83 b7       	in	r24, 0x33	; 51
 75e:	85 60       	ori	r24, 0x05	; 5
 760:	83 bf       	out	0x33, r24	; 51
		break;
 762:	08 95       	ret
		
		case External_Falling: //External_Falling on T0 pin
			TCCR0 |= 0b00000110;
 764:	83 b7       	in	r24, 0x33	; 51
 766:	86 60       	ori	r24, 0x06	; 6
 768:	83 bf       	out	0x33, r24	; 51
		break;
 76a:	08 95       	ret
>>>>>>> feature


		case External_Raising : //External_Raising on T0 pin
			TCCR0 |= 0b00000111;
<<<<<<< HEAD
 748:	83 b7       	in	r24, 0x33	; 51
 74a:	87 60       	ori	r24, 0x07	; 7
 74c:	83 bf       	out	0x33, r24	; 51
 74e:	08 95       	ret

00000750 <TIMER_overflow_read>:
=======
 76c:	83 b7       	in	r24, 0x33	; 51
 76e:	87 60       	ori	r24, 0x07	; 7
 770:	83 bf       	out	0x33, r24	; 51
 772:	08 95       	ret

00000774 <TIMER_overflow_read>:
>>>>>>> feature
	
}
void TIMER_overflow_read(void)
{
	//wait until the overflow flag is set
	while((READ_BIT(TIFR, PIN0) == 0));
<<<<<<< HEAD
 750:	08 b6       	in	r0, 0x38	; 56
 752:	00 fe       	sbrs	r0, 0
 754:	fd cf       	rjmp	.-6      	; 0x750 <TIMER_overflow_read>
	
	//Clear the OverFlow flag
	SET_BIT(TIFR, PIN0);
 756:	88 b7       	in	r24, 0x38	; 56
 758:	81 60       	ori	r24, 0x01	; 1
 75a:	88 bf       	out	0x38, r24	; 56
 75c:	08 95       	ret

0000075e <TIMER_stop>:
=======
 774:	08 b6       	in	r0, 0x38	; 56
 776:	00 fe       	sbrs	r0, 0
 778:	fd cf       	rjmp	.-6      	; 0x774 <TIMER_overflow_read>
	
	//Clear the OverFlow flag
	SET_BIT(TIFR, PIN0);
 77a:	88 b7       	in	r24, 0x38	; 56
 77c:	81 60       	ori	r24, 0x01	; 1
 77e:	88 bf       	out	0x38, r24	; 56
 780:	08 95       	ret

00000782 <TIMER_stop>:
>>>>>>> feature
}
void TIMER_stop(void)
{
	//Stop the timer
	TCCR0 = 0x00;
<<<<<<< HEAD
 75e:	13 be       	out	0x33, r1	; 51
 760:	08 95       	ret

00000762 <TIMER0_delay>:
=======
 782:	13 be       	out	0x33, r1	; 51
 784:	08 95       	ret

00000786 <TIMER0_delay>:
>>>>>>> feature
}

void TIMER0_delay(uint16_t Time_delay, uint16_t prescale)
{
<<<<<<< HEAD
 762:	4f 92       	push	r4
 764:	5f 92       	push	r5
 766:	6f 92       	push	r6
 768:	7f 92       	push	r7
 76a:	8f 92       	push	r8
 76c:	9f 92       	push	r9
 76e:	af 92       	push	r10
 770:	bf 92       	push	r11
 772:	cf 92       	push	r12
 774:	df 92       	push	r13
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	00 d0       	rcall	.+0      	; 0x780 <TIMER0_delay+0x1e>
 780:	00 d0       	rcall	.+0      	; 0x782 <TIMER0_delay+0x20>
 782:	00 d0       	rcall	.+0      	; 0x784 <TIMER0_delay+0x22>
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	7e 83       	std	Y+6, r23	; 0x06
 78a:	6d 83       	std	Y+5, r22	; 0x05
	Time_delay_ = Time_delay*0.001;
 78c:	bc 01       	movw	r22, r24
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 d6 05 	call	0xbac	; 0xbac <__floatunsisf>
 796:	69 83       	std	Y+1, r22	; 0x01
 798:	7a 83       	std	Y+2, r23	; 0x02
 79a:	8b 83       	std	Y+3, r24	; 0x03
 79c:	9c 83       	std	Y+4, r25	; 0x04
 79e:	2f e6       	ldi	r18, 0x6F	; 111
 7a0:	32 e1       	ldi	r19, 0x12	; 18
 7a2:	43 e8       	ldi	r20, 0x83	; 131
 7a4:	5a e3       	ldi	r21, 0x3A	; 58
 7a6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__mulsf3>
 7aa:	4b 01       	movw	r8, r22
 7ac:	5c 01       	movw	r10, r24
 7ae:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <Time_delay_>
 7b2:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <Time_delay_+0x1>
 7b6:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Time_delay_+0x2>
 7ba:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <Time_delay_+0x3>
	
	Timer_Tick = ( (prescale) / (pow(10.0,6.0)) );
 7be:	2d 81       	ldd	r18, Y+5	; 0x05
 7c0:	3e 81       	ldd	r19, Y+6	; 0x06
 7c2:	b9 01       	movw	r22, r18
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 d6 05 	call	0xbac	; 0xbac <__floatunsisf>
 7cc:	20 e0       	ldi	r18, 0x00	; 0
 7ce:	34 e2       	ldi	r19, 0x24	; 36
 7d0:	44 e7       	ldi	r20, 0x74	; 116
 7d2:	59 e4       	ldi	r21, 0x49	; 73
 7d4:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divsf3>
 7d8:	2b 01       	movw	r4, r22
 7da:	3c 01       	movw	r6, r24
 7dc:	60 93 97 00 	sts	0x0097, r22	; 0x800097 <Timer_Tick>
 7e0:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <Timer_Tick+0x1>
 7e4:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Timer_Tick+0x2>
 7e8:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <Timer_Tick+0x3>
	
	Timer_Delay_max = 	(Timer_Tick) * (256.0);
 7ec:	20 e0       	ldi	r18, 0x00	; 0
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	40 e8       	ldi	r20, 0x80	; 128
 7f2:	53 e4       	ldi	r21, 0x43	; 67
 7f4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__mulsf3>
 7f8:	6b 01       	movw	r12, r22
 7fa:	7c 01       	movw	r14, r24
 7fc:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <Timer_Delay_max>
 800:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <Timer_Delay_max+0x1>
 804:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Timer_Delay_max+0x2>
 808:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Timer_Delay_max+0x3>
	
	if(Time_delay < Timer_Delay_max)
 80c:	9b 01       	movw	r18, r22
 80e:	ac 01       	movw	r20, r24
 810:	69 81       	ldd	r22, Y+1	; 0x01
 812:	7a 81       	ldd	r23, Y+2	; 0x02
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	9c 81       	ldd	r25, Y+4	; 0x04
 818:	0e 94 30 05 	call	0xa60	; 0xa60 <__cmpsf2>
 81c:	88 23       	and	r24, r24
 81e:	bc f4       	brge	.+46     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
	{
		Timer_initial_value = ( (Timer_Delay_max - Time_delay ) / (Timer_Tick) );
 820:	29 81       	ldd	r18, Y+1	; 0x01
 822:	3a 81       	ldd	r19, Y+2	; 0x02
 824:	4b 81       	ldd	r20, Y+3	; 0x03
 826:	5c 81       	ldd	r21, Y+4	; 0x04
 828:	c7 01       	movw	r24, r14
 82a:	b6 01       	movw	r22, r12
 82c:	0e 94 ac 04 	call	0x958	; 0x958 <__subsf3>
 830:	a3 01       	movw	r20, r6
 832:	92 01       	movw	r18, r4
 834:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divsf3>
 838:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__fixunssfsi>
 83c:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <Timer_initial_value>
			
		Number_of_overflows_needed = 1;
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <Number_of_overflows_needed+0x1>
 848:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Number_of_overflows_needed>
 84c:	4c c0       	rjmp	.+152    	; 0x8e6 <__stack+0x87>
	}
	else if(Time_delay == Timer_Delay_max)
 84e:	a7 01       	movw	r20, r14
 850:	96 01       	movw	r18, r12
 852:	69 81       	ldd	r22, Y+1	; 0x01
 854:	7a 81       	ldd	r23, Y+2	; 0x02
 856:	8b 81       	ldd	r24, Y+3	; 0x03
 858:	9c 81       	ldd	r25, Y+4	; 0x04
 85a:	0e 94 30 05 	call	0xa60	; 0xa60 <__cmpsf2>
=======
 786:	4f 92       	push	r4
 788:	5f 92       	push	r5
 78a:	6f 92       	push	r6
 78c:	7f 92       	push	r7
 78e:	8f 92       	push	r8
 790:	9f 92       	push	r9
 792:	af 92       	push	r10
 794:	bf 92       	push	r11
 796:	cf 92       	push	r12
 798:	df 92       	push	r13
 79a:	ef 92       	push	r14
 79c:	ff 92       	push	r15
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	eb 01       	movw	r28, r22
	Time_delay_ = Time_delay*0.001;
 7a4:	bc 01       	movw	r22, r24
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__floatunsisf>
 7ae:	2f e6       	ldi	r18, 0x6F	; 111
 7b0:	32 e1       	ldi	r19, 0x12	; 18
 7b2:	43 e8       	ldi	r20, 0x83	; 131
 7b4:	5a e3       	ldi	r21, 0x3A	; 58
 7b6:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulsf3>
 7ba:	6b 01       	movw	r12, r22
 7bc:	7c 01       	movw	r14, r24
 7be:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <Time_delay_>
 7c2:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <Time_delay_+0x1>
 7c6:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Time_delay_+0x2>
 7ca:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <Time_delay_+0x3>
	
	Timer_Tick = ( (prescale) / (CPU_Frequency) );
 7ce:	be 01       	movw	r22, r28
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__floatunsisf>
 7d8:	20 e0       	ldi	r18, 0x00	; 0
 7da:	34 e2       	ldi	r19, 0x24	; 36
 7dc:	44 e7       	ldi	r20, 0x74	; 116
 7de:	59 e4       	ldi	r21, 0x49	; 73
 7e0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
 7e4:	2b 01       	movw	r4, r22
 7e6:	3c 01       	movw	r6, r24
 7e8:	60 93 97 00 	sts	0x0097, r22	; 0x800097 <Timer_Tick>
 7ec:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <Timer_Tick+0x1>
 7f0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <Timer_Tick+0x2>
 7f4:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <Timer_Tick+0x3>
	
	Timer_Delay_max = 	(Timer_Tick) * (256.0);
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	40 e8       	ldi	r20, 0x80	; 128
 7fe:	53 e4       	ldi	r21, 0x43	; 67
 800:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulsf3>
 804:	4b 01       	movw	r8, r22
 806:	5c 01       	movw	r10, r24
 808:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <Timer_Delay_max>
 80c:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <Timer_Delay_max+0x1>
 810:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <Timer_Delay_max+0x2>
 814:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <Timer_Delay_max+0x3>
	
	if(Time_delay_ < Timer_Delay_max)
 818:	9b 01       	movw	r18, r22
 81a:	ac 01       	movw	r20, r24
 81c:	c7 01       	movw	r24, r14
 81e:	b6 01       	movw	r22, r12
 820:	0e 94 29 05 	call	0xa52	; 0xa52 <__cmpsf2>
 824:	88 23       	and	r24, r24
 826:	ac f4       	brge	.+42     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	{
		Timer_initial_value = ( (Timer_Delay_max - Time_delay_ ) / (Timer_Tick) );
 828:	a7 01       	movw	r20, r14
 82a:	96 01       	movw	r18, r12
 82c:	c5 01       	movw	r24, r10
 82e:	b4 01       	movw	r22, r8
 830:	0e 94 a5 04 	call	0x94a	; 0x94a <__subsf3>
 834:	a3 01       	movw	r20, r6
 836:	92 01       	movw	r18, r4
 838:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
 83c:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixunssfsi>
 840:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <Timer_initial_value>
			
		Number_of_overflows_needed = 1;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <Number_of_overflows_needed+0x1>
 84c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Number_of_overflows_needed>
 850:	4a c0       	rjmp	.+148    	; 0x8e6 <__stack+0x87>
	}
	else if(Time_delay_ == Timer_Delay_max)
 852:	a5 01       	movw	r20, r10
 854:	94 01       	movw	r18, r8
 856:	c7 01       	movw	r24, r14
 858:	b6 01       	movw	r22, r12
 85a:	0e 94 29 05 	call	0xa52	; 0xa52 <__cmpsf2>
>>>>>>> feature
 85e:	81 11       	cpse	r24, r1
 860:	09 c0       	rjmp	.+18     	; 0x874 <__stack+0x15>
	{
		Timer_initial_value = 0x00;
 862:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <Timer_initial_value>
		Number_of_overflows_needed = 1;
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <Number_of_overflows_needed+0x1>
 86e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <Number_of_overflows_needed>
 872:	39 c0       	rjmp	.+114    	; 0x8e6 <__stack+0x87>
	}	
	
	else if(Time_delay_ > Timer_Delay_max)
<<<<<<< HEAD
 874:	a7 01       	movw	r20, r14
 876:	96 01       	movw	r18, r12
 878:	c5 01       	movw	r24, r10
 87a:	b4 01       	movw	r22, r8
 87c:	0e 94 c9 06 	call	0xd92	; 0xd92 <__gesf2>
=======
 874:	a5 01       	movw	r20, r10
 876:	94 01       	movw	r18, r8
 878:	c7 01       	movw	r24, r14
 87a:	b6 01       	movw	r22, r12
 87c:	0e 94 c2 06 	call	0xd84	; 0xd84 <__gesf2>
>>>>>>> feature
 880:	18 16       	cp	r1, r24
 882:	8c f5       	brge	.+98     	; 0x8e6 <__stack+0x87>
	{
		Number_of_overflows_needed = ceil((Time_delay_/Timer_Delay_max));
<<<<<<< HEAD
 884:	a7 01       	movw	r20, r14
 886:	96 01       	movw	r18, r12
 888:	c5 01       	movw	r24, r10
 88a:	b4 01       	movw	r22, r8
 88c:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divsf3>
 890:	0e 94 19 05 	call	0xa32	; 0xa32 <ceil>
 894:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__fixunssfsi>
 898:	6b 01       	movw	r12, r22
 89a:	7c 01       	movw	r14, r24
=======
 884:	a5 01       	movw	r20, r10
 886:	94 01       	movw	r18, r8
 888:	c7 01       	movw	r24, r14
 88a:	b6 01       	movw	r22, r12
 88c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
 890:	0e 94 12 05 	call	0xa24	; 0xa24 <ceil>
 894:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixunssfsi>
 898:	4b 01       	movw	r8, r22
 89a:	5c 01       	movw	r10, r24
>>>>>>> feature
 89c:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <Number_of_overflows_needed+0x1>
 8a0:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <Number_of_overflows_needed>
		Timer_initial_value = (ceil((256) - ((Time_delay_/Timer_Tick)/(Number_of_overflows_needed))));
 8a4:	a3 01       	movw	r20, r6
 8a6:	92 01       	movw	r18, r4
<<<<<<< HEAD
 8a8:	c5 01       	movw	r24, r10
 8aa:	b4 01       	movw	r22, r8
 8ac:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divsf3>
 8b0:	4b 01       	movw	r8, r22
 8b2:	5c 01       	movw	r10, r24
 8b4:	b6 01       	movw	r22, r12
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 d6 05 	call	0xbac	; 0xbac <__floatunsisf>
 8be:	9b 01       	movw	r18, r22
 8c0:	ac 01       	movw	r20, r24
 8c2:	c5 01       	movw	r24, r10
 8c4:	b4 01       	movw	r22, r8
 8c6:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divsf3>
=======
 8a8:	c7 01       	movw	r24, r14
 8aa:	b6 01       	movw	r22, r12
 8ac:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
 8b0:	6b 01       	movw	r12, r22
 8b2:	7c 01       	movw	r14, r24
 8b4:	b4 01       	movw	r22, r8
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__floatunsisf>
 8be:	9b 01       	movw	r18, r22
 8c0:	ac 01       	movw	r20, r24
 8c2:	c7 01       	movw	r24, r14
 8c4:	b6 01       	movw	r22, r12
 8c6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__divsf3>
>>>>>>> feature
 8ca:	9b 01       	movw	r18, r22
 8cc:	ac 01       	movw	r20, r24
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	80 e8       	ldi	r24, 0x80	; 128
 8d4:	93 e4       	ldi	r25, 0x43	; 67
<<<<<<< HEAD
 8d6:	0e 94 ac 04 	call	0x958	; 0x958 <__subsf3>
 8da:	0e 94 19 05 	call	0xa32	; 0xa32 <ceil>
 8de:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__fixunssfsi>
=======
 8d6:	0e 94 a5 04 	call	0x94a	; 0x94a <__subsf3>
 8da:	0e 94 12 05 	call	0xa24	; 0xa24 <ceil>
 8de:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fixunssfsi>
>>>>>>> feature
 8e2:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <Timer_initial_value>
	}
	
	TCNT0 = Timer_initial_value;		// setting initial value
 8e6:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Timer_initial_value>
 8ea:	82 bf       	out	0x32, r24	; 50
	
	TIMER_start(prescale);
<<<<<<< HEAD
 8ec:	8d 81       	ldd	r24, Y+5	; 0x05
 8ee:	9e 81       	ldd	r25, Y+6	; 0x06
 8f0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <TIMER_start>
=======
 8ec:	ce 01       	movw	r24, r28
 8ee:	0e 94 85 03 	call	0x70a	; 0x70a <TIMER_start>
>>>>>>> feature

	while(overflows_counter < Number_of_overflows_needed)
 8f4:	0b c0       	rjmp	.+22     	; 0x90c <__stack+0xad>
	{
		TIMER_overflow_read();
<<<<<<< HEAD
 8f6:	0e 94 a8 03 	call	0x750	; 0x750 <TIMER_overflow_read>
=======
 8f4:	0e 94 ba 03 	call	0x774	; 0x774 <TIMER_overflow_read>
>>>>>>> feature
		overflows_counter++;
 8fa:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <overflows_counter>
 8fe:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <overflows_counter+0x1>
 902:	01 96       	adiw	r24, 0x01	; 1
 904:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <overflows_counter+0x1>
 908:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <overflows_counter>
	
	TCNT0 = Timer_initial_value;		// setting initial value
	
	TIMER_start(prescale);

	while(overflows_counter < Number_of_overflows_needed)
 90c:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <overflows_counter>
 910:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <overflows_counter+0x1>
 914:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <Number_of_overflows_needed>
 918:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <Number_of_overflows_needed+0x1>
 91c:	28 17       	cp	r18, r24
 91e:	39 07       	cpc	r19, r25
 920:	50 f3       	brcs	.-44     	; 0x8f6 <__stack+0x97>
	{
		TIMER_overflow_read();
		overflows_counter++;
	}
	overflows_counter = 0;
 922:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <overflows_counter+0x1>
 926:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <overflows_counter>
	
	TIMER_stop();
<<<<<<< HEAD
 92a:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER_stop>
 92e:	26 96       	adiw	r28, 0x06	; 6
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	f8 94       	cli
 934:	de bf       	out	0x3e, r29	; 62
 936:	0f be       	out	0x3f, r0	; 63
 938:	cd bf       	out	0x3d, r28	; 61
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	ff 90       	pop	r15
 940:	ef 90       	pop	r14
 942:	df 90       	pop	r13
 944:	cf 90       	pop	r12
 946:	bf 90       	pop	r11
 948:	af 90       	pop	r10
 94a:	9f 90       	pop	r9
 94c:	8f 90       	pop	r8
 94e:	7f 90       	pop	r7
 950:	6f 90       	pop	r6
 952:	5f 90       	pop	r5
 954:	4f 90       	pop	r4
 956:	08 95       	ret

00000958 <__subsf3>:
 958:	50 58       	subi	r21, 0x80	; 128

0000095a <__addsf3>:
 95a:	bb 27       	eor	r27, r27
 95c:	aa 27       	eor	r26, r26
 95e:	0e 94 c4 04 	call	0x988	; 0x988 <__addsf3x>
 962:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_round>
 966:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscA>
 96a:	38 f0       	brcs	.+14     	; 0x97a <__addsf3+0x20>
 96c:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_pscB>
 970:	20 f0       	brcs	.+8      	; 0x97a <__addsf3+0x20>
 972:	39 f4       	brne	.+14     	; 0x982 <__addsf3+0x28>
 974:	9f 3f       	cpi	r25, 0xFF	; 255
 976:	19 f4       	brne	.+6      	; 0x97e <__addsf3+0x24>
 978:	26 f4       	brtc	.+8      	; 0x982 <__addsf3+0x28>
 97a:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_nan>
 97e:	0e f4       	brtc	.+2      	; 0x982 <__addsf3+0x28>
 980:	e0 95       	com	r30
 982:	e7 fb       	bst	r30, 7
 984:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_inf>

00000988 <__addsf3x>:
 988:	e9 2f       	mov	r30, r25
 98a:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_split3>
 98e:	58 f3       	brcs	.-42     	; 0x966 <__addsf3+0xc>
 990:	ba 17       	cp	r27, r26
 992:	62 07       	cpc	r22, r18
 994:	73 07       	cpc	r23, r19
 996:	84 07       	cpc	r24, r20
 998:	95 07       	cpc	r25, r21
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__addsf3x+0x1c>
 99c:	79 f4       	brne	.+30     	; 0x9bc <__addsf3x+0x34>
 99e:	a6 f5       	brtc	.+104    	; 0xa08 <__addsf3x+0x80>
 9a0:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_zero>
 9a4:	0e f4       	brtc	.+2      	; 0x9a8 <__addsf3x+0x20>
 9a6:	e0 95       	com	r30
 9a8:	0b 2e       	mov	r0, r27
 9aa:	ba 2f       	mov	r27, r26
 9ac:	a0 2d       	mov	r26, r0
 9ae:	0b 01       	movw	r0, r22
 9b0:	b9 01       	movw	r22, r18
 9b2:	90 01       	movw	r18, r0
 9b4:	0c 01       	movw	r0, r24
 9b6:	ca 01       	movw	r24, r20
 9b8:	a0 01       	movw	r20, r0
 9ba:	11 24       	eor	r1, r1
 9bc:	ff 27       	eor	r31, r31
 9be:	59 1b       	sub	r21, r25
 9c0:	99 f0       	breq	.+38     	; 0x9e8 <__addsf3x+0x60>
 9c2:	59 3f       	cpi	r21, 0xF9	; 249
 9c4:	50 f4       	brcc	.+20     	; 0x9da <__addsf3x+0x52>
 9c6:	50 3e       	cpi	r21, 0xE0	; 224
 9c8:	68 f1       	brcs	.+90     	; 0xa24 <__addsf3x+0x9c>
 9ca:	1a 16       	cp	r1, r26
 9cc:	f0 40       	sbci	r31, 0x00	; 0
 9ce:	a2 2f       	mov	r26, r18
 9d0:	23 2f       	mov	r18, r19
 9d2:	34 2f       	mov	r19, r20
 9d4:	44 27       	eor	r20, r20
 9d6:	58 5f       	subi	r21, 0xF8	; 248
 9d8:	f3 cf       	rjmp	.-26     	; 0x9c0 <__addsf3x+0x38>
 9da:	46 95       	lsr	r20
 9dc:	37 95       	ror	r19
 9de:	27 95       	ror	r18
 9e0:	a7 95       	ror	r26
 9e2:	f0 40       	sbci	r31, 0x00	; 0
 9e4:	53 95       	inc	r21
 9e6:	c9 f7       	brne	.-14     	; 0x9da <__addsf3x+0x52>
 9e8:	7e f4       	brtc	.+30     	; 0xa08 <__addsf3x+0x80>
 9ea:	1f 16       	cp	r1, r31
 9ec:	ba 0b       	sbc	r27, r26
 9ee:	62 0b       	sbc	r22, r18
 9f0:	73 0b       	sbc	r23, r19
 9f2:	84 0b       	sbc	r24, r20
 9f4:	ba f0       	brmi	.+46     	; 0xa24 <__addsf3x+0x9c>
 9f6:	91 50       	subi	r25, 0x01	; 1
 9f8:	a1 f0       	breq	.+40     	; 0xa22 <__addsf3x+0x9a>
 9fa:	ff 0f       	add	r31, r31
 9fc:	bb 1f       	adc	r27, r27
 9fe:	66 1f       	adc	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	c2 f7       	brpl	.-16     	; 0x9f6 <__addsf3x+0x6e>
 a06:	0e c0       	rjmp	.+28     	; 0xa24 <__addsf3x+0x9c>
 a08:	ba 0f       	add	r27, r26
 a0a:	62 1f       	adc	r22, r18
 a0c:	73 1f       	adc	r23, r19
 a0e:	84 1f       	adc	r24, r20
 a10:	48 f4       	brcc	.+18     	; 0xa24 <__addsf3x+0x9c>
 a12:	87 95       	ror	r24
 a14:	77 95       	ror	r23
 a16:	67 95       	ror	r22
 a18:	b7 95       	ror	r27
 a1a:	f7 95       	ror	r31
 a1c:	9e 3f       	cpi	r25, 0xFE	; 254
 a1e:	08 f0       	brcs	.+2      	; 0xa22 <__addsf3x+0x9a>
 a20:	b0 cf       	rjmp	.-160    	; 0x982 <__addsf3+0x28>
 a22:	93 95       	inc	r25
 a24:	88 0f       	add	r24, r24
 a26:	08 f0       	brcs	.+2      	; 0xa2a <__addsf3x+0xa2>
 a28:	99 27       	eor	r25, r25
 a2a:	ee 0f       	add	r30, r30
 a2c:	97 95       	ror	r25
 a2e:	87 95       	ror	r24
 a30:	08 95       	ret

00000a32 <ceil>:
 a32:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_trunc>
 a36:	90 f0       	brcs	.+36     	; 0xa5c <ceil+0x2a>
 a38:	9f 37       	cpi	r25, 0x7F	; 127
 a3a:	48 f4       	brcc	.+18     	; 0xa4e <ceil+0x1c>
 a3c:	91 11       	cpse	r25, r1
 a3e:	16 f4       	brtc	.+4      	; 0xa44 <ceil+0x12>
 a40:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_szero>
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	70 e0       	ldi	r23, 0x00	; 0
 a48:	80 e8       	ldi	r24, 0x80	; 128
 a4a:	9f e3       	ldi	r25, 0x3F	; 63
 a4c:	08 95       	ret
 a4e:	26 f0       	brts	.+8      	; 0xa58 <ceil+0x26>
 a50:	1b 16       	cp	r1, r27
 a52:	61 1d       	adc	r22, r1
 a54:	71 1d       	adc	r23, r1
 a56:	81 1d       	adc	r24, r1
 a58:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__fp_mintl>
 a5c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__fp_mpack>

00000a60 <__cmpsf2>:
 a60:	0e 94 13 06 	call	0xc26	; 0xc26 <__fp_cmp>
 a64:	08 f4       	brcc	.+2      	; 0xa68 <__cmpsf2+0x8>
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	08 95       	ret

00000a6a <__divsf3>:
 a6a:	0e 94 49 05 	call	0xa92	; 0xa92 <__divsf3x>
 a6e:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_round>
 a72:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_pscB>
 a76:	58 f0       	brcs	.+22     	; 0xa8e <__divsf3+0x24>
 a78:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscA>
 a7c:	40 f0       	brcs	.+16     	; 0xa8e <__divsf3+0x24>
 a7e:	29 f4       	brne	.+10     	; 0xa8a <__divsf3+0x20>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	29 f0       	breq	.+10     	; 0xa8e <__divsf3+0x24>
 a84:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_inf>
 a88:	51 11       	cpse	r21, r1
 a8a:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_szero>
 a8e:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_nan>

00000a92 <__divsf3x>:
 a92:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_split3>
 a96:	68 f3       	brcs	.-38     	; 0xa72 <__divsf3+0x8>

00000a98 <__divsf3_pse>:
 a98:	99 23       	and	r25, r25
 a9a:	b1 f3       	breq	.-20     	; 0xa88 <__divsf3+0x1e>
 a9c:	55 23       	and	r21, r21
 a9e:	91 f3       	breq	.-28     	; 0xa84 <__divsf3+0x1a>
 aa0:	95 1b       	sub	r25, r21
 aa2:	55 0b       	sbc	r21, r21
 aa4:	bb 27       	eor	r27, r27
 aa6:	aa 27       	eor	r26, r26
 aa8:	62 17       	cp	r22, r18
 aaa:	73 07       	cpc	r23, r19
 aac:	84 07       	cpc	r24, r20
 aae:	38 f0       	brcs	.+14     	; 0xabe <__divsf3_pse+0x26>
 ab0:	9f 5f       	subi	r25, 0xFF	; 255
 ab2:	5f 4f       	sbci	r21, 0xFF	; 255
 ab4:	22 0f       	add	r18, r18
 ab6:	33 1f       	adc	r19, r19
 ab8:	44 1f       	adc	r20, r20
 aba:	aa 1f       	adc	r26, r26
 abc:	a9 f3       	breq	.-22     	; 0xaa8 <__divsf3_pse+0x10>
 abe:	35 d0       	rcall	.+106    	; 0xb2a <__divsf3_pse+0x92>
 ac0:	0e 2e       	mov	r0, r30
 ac2:	3a f0       	brmi	.+14     	; 0xad2 <__divsf3_pse+0x3a>
 ac4:	e0 e8       	ldi	r30, 0x80	; 128
 ac6:	32 d0       	rcall	.+100    	; 0xb2c <__divsf3_pse+0x94>
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	50 40       	sbci	r21, 0x00	; 0
 acc:	e6 95       	lsr	r30
 ace:	00 1c       	adc	r0, r0
 ad0:	ca f7       	brpl	.-14     	; 0xac4 <__divsf3_pse+0x2c>
 ad2:	2b d0       	rcall	.+86     	; 0xb2a <__divsf3_pse+0x92>
 ad4:	fe 2f       	mov	r31, r30
 ad6:	29 d0       	rcall	.+82     	; 0xb2a <__divsf3_pse+0x92>
 ad8:	66 0f       	add	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	bb 1f       	adc	r27, r27
 ae0:	26 17       	cp	r18, r22
 ae2:	37 07       	cpc	r19, r23
 ae4:	48 07       	cpc	r20, r24
 ae6:	ab 07       	cpc	r26, r27
 ae8:	b0 e8       	ldi	r27, 0x80	; 128
 aea:	09 f0       	breq	.+2      	; 0xaee <__divsf3_pse+0x56>
 aec:	bb 0b       	sbc	r27, r27
 aee:	80 2d       	mov	r24, r0
 af0:	bf 01       	movw	r22, r30
 af2:	ff 27       	eor	r31, r31
 af4:	93 58       	subi	r25, 0x83	; 131
 af6:	5f 4f       	sbci	r21, 0xFF	; 255
 af8:	3a f0       	brmi	.+14     	; 0xb08 <__divsf3_pse+0x70>
 afa:	9e 3f       	cpi	r25, 0xFE	; 254
 afc:	51 05       	cpc	r21, r1
 afe:	78 f0       	brcs	.+30     	; 0xb1e <__divsf3_pse+0x86>
 b00:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_inf>
 b04:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_szero>
 b08:	5f 3f       	cpi	r21, 0xFF	; 255
 b0a:	e4 f3       	brlt	.-8      	; 0xb04 <__divsf3_pse+0x6c>
 b0c:	98 3e       	cpi	r25, 0xE8	; 232
 b0e:	d4 f3       	brlt	.-12     	; 0xb04 <__divsf3_pse+0x6c>
 b10:	86 95       	lsr	r24
 b12:	77 95       	ror	r23
 b14:	67 95       	ror	r22
 b16:	b7 95       	ror	r27
 b18:	f7 95       	ror	r31
 b1a:	9f 5f       	subi	r25, 0xFF	; 255
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <__divsf3_pse+0x78>
 b1e:	88 0f       	add	r24, r24
 b20:	91 1d       	adc	r25, r1
 b22:	96 95       	lsr	r25
 b24:	87 95       	ror	r24
 b26:	97 f9       	bld	r25, 7
 b28:	08 95       	ret
 b2a:	e1 e0       	ldi	r30, 0x01	; 1
 b2c:	66 0f       	add	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	bb 1f       	adc	r27, r27
 b34:	62 17       	cp	r22, r18
 b36:	73 07       	cpc	r23, r19
 b38:	84 07       	cpc	r24, r20
 b3a:	ba 07       	cpc	r27, r26
 b3c:	20 f0       	brcs	.+8      	; 0xb46 <__divsf3_pse+0xae>
 b3e:	62 1b       	sub	r22, r18
 b40:	73 0b       	sbc	r23, r19
 b42:	84 0b       	sbc	r24, r20
 b44:	ba 0b       	sbc	r27, r26
 b46:	ee 1f       	adc	r30, r30
 b48:	88 f7       	brcc	.-30     	; 0xb2c <__divsf3_pse+0x94>
 b4a:	e0 95       	com	r30
 b4c:	08 95       	ret

00000b4e <__fixunssfsi>:
 b4e:	0e 94 90 06 	call	0xd20	; 0xd20 <__fp_splitA>
 b52:	88 f0       	brcs	.+34     	; 0xb76 <__fixunssfsi+0x28>
 b54:	9f 57       	subi	r25, 0x7F	; 127
 b56:	98 f0       	brcs	.+38     	; 0xb7e <__fixunssfsi+0x30>
 b58:	b9 2f       	mov	r27, r25
 b5a:	99 27       	eor	r25, r25
 b5c:	b7 51       	subi	r27, 0x17	; 23
 b5e:	b0 f0       	brcs	.+44     	; 0xb8c <__fixunssfsi+0x3e>
 b60:	e1 f0       	breq	.+56     	; 0xb9a <__fixunssfsi+0x4c>
 b62:	66 0f       	add	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	99 1f       	adc	r25, r25
 b6a:	1a f0       	brmi	.+6      	; 0xb72 <__fixunssfsi+0x24>
 b6c:	ba 95       	dec	r27
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__fixunssfsi+0x14>
 b70:	14 c0       	rjmp	.+40     	; 0xb9a <__fixunssfsi+0x4c>
 b72:	b1 30       	cpi	r27, 0x01	; 1
 b74:	91 f0       	breq	.+36     	; 0xb9a <__fixunssfsi+0x4c>
 b76:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fp_zero>
 b7a:	b1 e0       	ldi	r27, 0x01	; 1
 b7c:	08 95       	ret
 b7e:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_zero>
 b82:	67 2f       	mov	r22, r23
 b84:	78 2f       	mov	r23, r24
 b86:	88 27       	eor	r24, r24
 b88:	b8 5f       	subi	r27, 0xF8	; 248
 b8a:	39 f0       	breq	.+14     	; 0xb9a <__fixunssfsi+0x4c>
 b8c:	b9 3f       	cpi	r27, 0xF9	; 249
 b8e:	cc f3       	brlt	.-14     	; 0xb82 <__fixunssfsi+0x34>
 b90:	86 95       	lsr	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	b3 95       	inc	r27
 b98:	d9 f7       	brne	.-10     	; 0xb90 <__fixunssfsi+0x42>
 b9a:	3e f4       	brtc	.+14     	; 0xbaa <__fixunssfsi+0x5c>
 b9c:	90 95       	com	r25
 b9e:	80 95       	com	r24
 ba0:	70 95       	com	r23
 ba2:	61 95       	neg	r22
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__floatunsisf>:
 bac:	e8 94       	clt
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <__floatsisf+0x12>

00000bb0 <__floatsisf>:
 bb0:	97 fb       	bst	r25, 7
 bb2:	3e f4       	brtc	.+14     	; 0xbc2 <__floatsisf+0x12>
 bb4:	90 95       	com	r25
 bb6:	80 95       	com	r24
 bb8:	70 95       	com	r23
 bba:	61 95       	neg	r22
 bbc:	7f 4f       	sbci	r23, 0xFF	; 255
 bbe:	8f 4f       	sbci	r24, 0xFF	; 255
 bc0:	9f 4f       	sbci	r25, 0xFF	; 255
 bc2:	99 23       	and	r25, r25
 bc4:	a9 f0       	breq	.+42     	; 0xbf0 <__floatsisf+0x40>
 bc6:	f9 2f       	mov	r31, r25
 bc8:	96 e9       	ldi	r25, 0x96	; 150
 bca:	bb 27       	eor	r27, r27
 bcc:	93 95       	inc	r25
 bce:	f6 95       	lsr	r31
 bd0:	87 95       	ror	r24
 bd2:	77 95       	ror	r23
 bd4:	67 95       	ror	r22
 bd6:	b7 95       	ror	r27
 bd8:	f1 11       	cpse	r31, r1
 bda:	f8 cf       	rjmp	.-16     	; 0xbcc <__floatsisf+0x1c>
 bdc:	fa f4       	brpl	.+62     	; 0xc1c <__floatsisf+0x6c>
 bde:	bb 0f       	add	r27, r27
 be0:	11 f4       	brne	.+4      	; 0xbe6 <__floatsisf+0x36>
 be2:	60 ff       	sbrs	r22, 0
 be4:	1b c0       	rjmp	.+54     	; 0xc1c <__floatsisf+0x6c>
 be6:	6f 5f       	subi	r22, 0xFF	; 255
 be8:	7f 4f       	sbci	r23, 0xFF	; 255
 bea:	8f 4f       	sbci	r24, 0xFF	; 255
 bec:	9f 4f       	sbci	r25, 0xFF	; 255
 bee:	16 c0       	rjmp	.+44     	; 0xc1c <__floatsisf+0x6c>
 bf0:	88 23       	and	r24, r24
 bf2:	11 f0       	breq	.+4      	; 0xbf8 <__floatsisf+0x48>
 bf4:	96 e9       	ldi	r25, 0x96	; 150
 bf6:	11 c0       	rjmp	.+34     	; 0xc1a <__floatsisf+0x6a>
 bf8:	77 23       	and	r23, r23
 bfa:	21 f0       	breq	.+8      	; 0xc04 <__floatsisf+0x54>
 bfc:	9e e8       	ldi	r25, 0x8E	; 142
 bfe:	87 2f       	mov	r24, r23
 c00:	76 2f       	mov	r23, r22
 c02:	05 c0       	rjmp	.+10     	; 0xc0e <__floatsisf+0x5e>
 c04:	66 23       	and	r22, r22
 c06:	71 f0       	breq	.+28     	; 0xc24 <__floatsisf+0x74>
 c08:	96 e8       	ldi	r25, 0x86	; 134
 c0a:	86 2f       	mov	r24, r22
 c0c:	70 e0       	ldi	r23, 0x00	; 0
 c0e:	60 e0       	ldi	r22, 0x00	; 0
 c10:	2a f0       	brmi	.+10     	; 0xc1c <__floatsisf+0x6c>
 c12:	9a 95       	dec	r25
 c14:	66 0f       	add	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	da f7       	brpl	.-10     	; 0xc12 <__floatsisf+0x62>
 c1c:	88 0f       	add	r24, r24
 c1e:	96 95       	lsr	r25
 c20:	87 95       	ror	r24
 c22:	97 f9       	bld	r25, 7
 c24:	08 95       	ret

00000c26 <__fp_cmp>:
 c26:	99 0f       	add	r25, r25
 c28:	00 08       	sbc	r0, r0
 c2a:	55 0f       	add	r21, r21
 c2c:	aa 0b       	sbc	r26, r26
 c2e:	e0 e8       	ldi	r30, 0x80	; 128
 c30:	fe ef       	ldi	r31, 0xFE	; 254
 c32:	16 16       	cp	r1, r22
 c34:	17 06       	cpc	r1, r23
 c36:	e8 07       	cpc	r30, r24
 c38:	f9 07       	cpc	r31, r25
 c3a:	c0 f0       	brcs	.+48     	; 0xc6c <__fp_cmp+0x46>
 c3c:	12 16       	cp	r1, r18
 c3e:	13 06       	cpc	r1, r19
 c40:	e4 07       	cpc	r30, r20
 c42:	f5 07       	cpc	r31, r21
 c44:	98 f0       	brcs	.+38     	; 0xc6c <__fp_cmp+0x46>
 c46:	62 1b       	sub	r22, r18
 c48:	73 0b       	sbc	r23, r19
 c4a:	84 0b       	sbc	r24, r20
 c4c:	95 0b       	sbc	r25, r21
 c4e:	39 f4       	brne	.+14     	; 0xc5e <__fp_cmp+0x38>
 c50:	0a 26       	eor	r0, r26
 c52:	61 f0       	breq	.+24     	; 0xc6c <__fp_cmp+0x46>
 c54:	23 2b       	or	r18, r19
 c56:	24 2b       	or	r18, r20
 c58:	25 2b       	or	r18, r21
 c5a:	21 f4       	brne	.+8      	; 0xc64 <__fp_cmp+0x3e>
 c5c:	08 95       	ret
 c5e:	0a 26       	eor	r0, r26
 c60:	09 f4       	brne	.+2      	; 0xc64 <__fp_cmp+0x3e>
 c62:	a1 40       	sbci	r26, 0x01	; 1
 c64:	a6 95       	lsr	r26
 c66:	8f ef       	ldi	r24, 0xFF	; 255
 c68:	81 1d       	adc	r24, r1
 c6a:	81 1d       	adc	r24, r1
 c6c:	08 95       	ret

00000c6e <__fp_inf>:
 c6e:	97 f9       	bld	r25, 7
 c70:	9f 67       	ori	r25, 0x7F	; 127
 c72:	80 e8       	ldi	r24, 0x80	; 128
 c74:	70 e0       	ldi	r23, 0x00	; 0
 c76:	60 e0       	ldi	r22, 0x00	; 0
 c78:	08 95       	ret

00000c7a <__fp_mintl>:
 c7a:	88 23       	and	r24, r24
 c7c:	71 f4       	brne	.+28     	; 0xc9a <__fp_mintl+0x20>
 c7e:	77 23       	and	r23, r23
 c80:	21 f0       	breq	.+8      	; 0xc8a <__fp_mintl+0x10>
 c82:	98 50       	subi	r25, 0x08	; 8
 c84:	87 2b       	or	r24, r23
 c86:	76 2f       	mov	r23, r22
 c88:	07 c0       	rjmp	.+14     	; 0xc98 <__fp_mintl+0x1e>
 c8a:	66 23       	and	r22, r22
 c8c:	11 f4       	brne	.+4      	; 0xc92 <__fp_mintl+0x18>
 c8e:	99 27       	eor	r25, r25
 c90:	0d c0       	rjmp	.+26     	; 0xcac <__fp_mintl+0x32>
 c92:	90 51       	subi	r25, 0x10	; 16
 c94:	86 2b       	or	r24, r22
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	60 e0       	ldi	r22, 0x00	; 0
 c9a:	2a f0       	brmi	.+10     	; 0xca6 <__fp_mintl+0x2c>
 c9c:	9a 95       	dec	r25
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	da f7       	brpl	.-10     	; 0xc9c <__fp_mintl+0x22>
 ca6:	88 0f       	add	r24, r24
 ca8:	96 95       	lsr	r25
 caa:	87 95       	ror	r24
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__fp_mpack>:
 cb0:	9f 3f       	cpi	r25, 0xFF	; 255
 cb2:	31 f0       	breq	.+12     	; 0xcc0 <__fp_mpack_finite+0xc>

00000cb4 <__fp_mpack_finite>:
 cb4:	91 50       	subi	r25, 0x01	; 1
 cb6:	20 f4       	brcc	.+8      	; 0xcc0 <__fp_mpack_finite+0xc>
 cb8:	87 95       	ror	r24
 cba:	77 95       	ror	r23
 cbc:	67 95       	ror	r22
 cbe:	b7 95       	ror	r27
 cc0:	88 0f       	add	r24, r24
 cc2:	91 1d       	adc	r25, r1
 cc4:	96 95       	lsr	r25
 cc6:	87 95       	ror	r24
 cc8:	97 f9       	bld	r25, 7
 cca:	08 95       	ret

00000ccc <__fp_nan>:
 ccc:	9f ef       	ldi	r25, 0xFF	; 255
 cce:	80 ec       	ldi	r24, 0xC0	; 192
 cd0:	08 95       	ret

00000cd2 <__fp_pscA>:
 cd2:	00 24       	eor	r0, r0
 cd4:	0a 94       	dec	r0
 cd6:	16 16       	cp	r1, r22
 cd8:	17 06       	cpc	r1, r23
 cda:	18 06       	cpc	r1, r24
 cdc:	09 06       	cpc	r0, r25
 cde:	08 95       	ret

00000ce0 <__fp_pscB>:
 ce0:	00 24       	eor	r0, r0
 ce2:	0a 94       	dec	r0
 ce4:	12 16       	cp	r1, r18
 ce6:	13 06       	cpc	r1, r19
 ce8:	14 06       	cpc	r1, r20
 cea:	05 06       	cpc	r0, r21
 cec:	08 95       	ret

00000cee <__fp_round>:
 cee:	09 2e       	mov	r0, r25
 cf0:	03 94       	inc	r0
 cf2:	00 0c       	add	r0, r0
 cf4:	11 f4       	brne	.+4      	; 0xcfa <__fp_round+0xc>
 cf6:	88 23       	and	r24, r24
 cf8:	52 f0       	brmi	.+20     	; 0xd0e <__fp_round+0x20>
 cfa:	bb 0f       	add	r27, r27
 cfc:	40 f4       	brcc	.+16     	; 0xd0e <__fp_round+0x20>
 cfe:	bf 2b       	or	r27, r31
 d00:	11 f4       	brne	.+4      	; 0xd06 <__fp_round+0x18>
 d02:	60 ff       	sbrs	r22, 0
 d04:	04 c0       	rjmp	.+8      	; 0xd0e <__fp_round+0x20>
 d06:	6f 5f       	subi	r22, 0xFF	; 255
 d08:	7f 4f       	sbci	r23, 0xFF	; 255
 d0a:	8f 4f       	sbci	r24, 0xFF	; 255
 d0c:	9f 4f       	sbci	r25, 0xFF	; 255
 d0e:	08 95       	ret

00000d10 <__fp_split3>:
 d10:	57 fd       	sbrc	r21, 7
 d12:	90 58       	subi	r25, 0x80	; 128
 d14:	44 0f       	add	r20, r20
 d16:	55 1f       	adc	r21, r21
 d18:	59 f0       	breq	.+22     	; 0xd30 <__fp_splitA+0x10>
 d1a:	5f 3f       	cpi	r21, 0xFF	; 255
 d1c:	71 f0       	breq	.+28     	; 0xd3a <__fp_splitA+0x1a>
 d1e:	47 95       	ror	r20

00000d20 <__fp_splitA>:
 d20:	88 0f       	add	r24, r24
 d22:	97 fb       	bst	r25, 7
 d24:	99 1f       	adc	r25, r25
 d26:	61 f0       	breq	.+24     	; 0xd40 <__fp_splitA+0x20>
 d28:	9f 3f       	cpi	r25, 0xFF	; 255
 d2a:	79 f0       	breq	.+30     	; 0xd4a <__fp_splitA+0x2a>
 d2c:	87 95       	ror	r24
 d2e:	08 95       	ret
 d30:	12 16       	cp	r1, r18
 d32:	13 06       	cpc	r1, r19
 d34:	14 06       	cpc	r1, r20
 d36:	55 1f       	adc	r21, r21
 d38:	f2 cf       	rjmp	.-28     	; 0xd1e <__fp_split3+0xe>
 d3a:	46 95       	lsr	r20
 d3c:	f1 df       	rcall	.-30     	; 0xd20 <__fp_splitA>
 d3e:	08 c0       	rjmp	.+16     	; 0xd50 <__fp_splitA+0x30>
 d40:	16 16       	cp	r1, r22
 d42:	17 06       	cpc	r1, r23
 d44:	18 06       	cpc	r1, r24
 d46:	99 1f       	adc	r25, r25
 d48:	f1 cf       	rjmp	.-30     	; 0xd2c <__fp_splitA+0xc>
 d4a:	86 95       	lsr	r24
 d4c:	71 05       	cpc	r23, r1
 d4e:	61 05       	cpc	r22, r1
 d50:	08 94       	sec
 d52:	08 95       	ret

00000d54 <__fp_trunc>:
 d54:	0e 94 90 06 	call	0xd20	; 0xd20 <__fp_splitA>
 d58:	a0 f0       	brcs	.+40     	; 0xd82 <__fp_trunc+0x2e>
 d5a:	be e7       	ldi	r27, 0x7E	; 126
 d5c:	b9 17       	cp	r27, r25
 d5e:	88 f4       	brcc	.+34     	; 0xd82 <__fp_trunc+0x2e>
 d60:	bb 27       	eor	r27, r27
 d62:	9f 38       	cpi	r25, 0x8F	; 143
 d64:	60 f4       	brcc	.+24     	; 0xd7e <__fp_trunc+0x2a>
 d66:	16 16       	cp	r1, r22
 d68:	b1 1d       	adc	r27, r1
 d6a:	67 2f       	mov	r22, r23
 d6c:	78 2f       	mov	r23, r24
 d6e:	88 27       	eor	r24, r24
 d70:	98 5f       	subi	r25, 0xF8	; 248
 d72:	f7 cf       	rjmp	.-18     	; 0xd62 <__fp_trunc+0xe>
 d74:	86 95       	lsr	r24
 d76:	77 95       	ror	r23
 d78:	67 95       	ror	r22
 d7a:	b1 1d       	adc	r27, r1
 d7c:	93 95       	inc	r25
 d7e:	96 39       	cpi	r25, 0x96	; 150
 d80:	c8 f3       	brcs	.-14     	; 0xd74 <__fp_trunc+0x20>
 d82:	08 95       	ret

00000d84 <__fp_zero>:
 d84:	e8 94       	clt

00000d86 <__fp_szero>:
 d86:	bb 27       	eor	r27, r27
 d88:	66 27       	eor	r22, r22
 d8a:	77 27       	eor	r23, r23
 d8c:	cb 01       	movw	r24, r22
 d8e:	97 f9       	bld	r25, 7
 d90:	08 95       	ret

00000d92 <__gesf2>:
 d92:	0e 94 13 06 	call	0xc26	; 0xc26 <__fp_cmp>
 d96:	08 f4       	brcc	.+2      	; 0xd9a <__gesf2+0x8>
 d98:	8f ef       	ldi	r24, 0xFF	; 255
 d9a:	08 95       	ret

00000d9c <__mulsf3>:
 d9c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__mulsf3x>
 da0:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_round>
 da4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscA>
 da8:	38 f0       	brcs	.+14     	; 0xdb8 <__mulsf3+0x1c>
 daa:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_pscB>
 dae:	20 f0       	brcs	.+8      	; 0xdb8 <__mulsf3+0x1c>
 db0:	95 23       	and	r25, r21
 db2:	11 f0       	breq	.+4      	; 0xdb8 <__mulsf3+0x1c>
 db4:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_inf>
 db8:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_nan>
 dbc:	11 24       	eor	r1, r1
 dbe:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_szero>

00000dc2 <__mulsf3x>:
 dc2:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_split3>
 dc6:	70 f3       	brcs	.-36     	; 0xda4 <__mulsf3+0x8>

00000dc8 <__mulsf3_pse>:
 dc8:	95 9f       	mul	r25, r21
 dca:	c1 f3       	breq	.-16     	; 0xdbc <__mulsf3+0x20>
 dcc:	95 0f       	add	r25, r21
 dce:	50 e0       	ldi	r21, 0x00	; 0
 dd0:	55 1f       	adc	r21, r21
 dd2:	62 9f       	mul	r22, r18
 dd4:	f0 01       	movw	r30, r0
 dd6:	72 9f       	mul	r23, r18
 dd8:	bb 27       	eor	r27, r27
 dda:	f0 0d       	add	r31, r0
 ddc:	b1 1d       	adc	r27, r1
 dde:	63 9f       	mul	r22, r19
 de0:	aa 27       	eor	r26, r26
 de2:	f0 0d       	add	r31, r0
 de4:	b1 1d       	adc	r27, r1
 de6:	aa 1f       	adc	r26, r26
 de8:	64 9f       	mul	r22, r20
 dea:	66 27       	eor	r22, r22
 dec:	b0 0d       	add	r27, r0
 dee:	a1 1d       	adc	r26, r1
 df0:	66 1f       	adc	r22, r22
 df2:	82 9f       	mul	r24, r18
 df4:	22 27       	eor	r18, r18
 df6:	b0 0d       	add	r27, r0
 df8:	a1 1d       	adc	r26, r1
 dfa:	62 1f       	adc	r22, r18
 dfc:	73 9f       	mul	r23, r19
 dfe:	b0 0d       	add	r27, r0
 e00:	a1 1d       	adc	r26, r1
 e02:	62 1f       	adc	r22, r18
 e04:	83 9f       	mul	r24, r19
 e06:	a0 0d       	add	r26, r0
 e08:	61 1d       	adc	r22, r1
 e0a:	22 1f       	adc	r18, r18
 e0c:	74 9f       	mul	r23, r20
 e0e:	33 27       	eor	r19, r19
 e10:	a0 0d       	add	r26, r0
 e12:	61 1d       	adc	r22, r1
 e14:	23 1f       	adc	r18, r19
 e16:	84 9f       	mul	r24, r20
 e18:	60 0d       	add	r22, r0
 e1a:	21 1d       	adc	r18, r1
 e1c:	82 2f       	mov	r24, r18
 e1e:	76 2f       	mov	r23, r22
 e20:	6a 2f       	mov	r22, r26
 e22:	11 24       	eor	r1, r1
 e24:	9f 57       	subi	r25, 0x7F	; 127
 e26:	50 40       	sbci	r21, 0x00	; 0
 e28:	9a f0       	brmi	.+38     	; 0xe50 <__mulsf3_pse+0x88>
 e2a:	f1 f0       	breq	.+60     	; 0xe68 <__mulsf3_pse+0xa0>
 e2c:	88 23       	and	r24, r24
 e2e:	4a f0       	brmi	.+18     	; 0xe42 <__mulsf3_pse+0x7a>
 e30:	ee 0f       	add	r30, r30
 e32:	ff 1f       	adc	r31, r31
 e34:	bb 1f       	adc	r27, r27
 e36:	66 1f       	adc	r22, r22
 e38:	77 1f       	adc	r23, r23
 e3a:	88 1f       	adc	r24, r24
 e3c:	91 50       	subi	r25, 0x01	; 1
 e3e:	50 40       	sbci	r21, 0x00	; 0
 e40:	a9 f7       	brne	.-22     	; 0xe2c <__mulsf3_pse+0x64>
 e42:	9e 3f       	cpi	r25, 0xFE	; 254
 e44:	51 05       	cpc	r21, r1
 e46:	80 f0       	brcs	.+32     	; 0xe68 <__mulsf3_pse+0xa0>
 e48:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_inf>
 e4c:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_szero>
 e50:	5f 3f       	cpi	r21, 0xFF	; 255
 e52:	e4 f3       	brlt	.-8      	; 0xe4c <__mulsf3_pse+0x84>
 e54:	98 3e       	cpi	r25, 0xE8	; 232
 e56:	d4 f3       	brlt	.-12     	; 0xe4c <__mulsf3_pse+0x84>
 e58:	86 95       	lsr	r24
 e5a:	77 95       	ror	r23
 e5c:	67 95       	ror	r22
 e5e:	b7 95       	ror	r27
 e60:	f7 95       	ror	r31
 e62:	e7 95       	ror	r30
 e64:	9f 5f       	subi	r25, 0xFF	; 255
 e66:	c1 f7       	brne	.-16     	; 0xe58 <__mulsf3_pse+0x90>
 e68:	fe 2b       	or	r31, r30
 e6a:	88 0f       	add	r24, r24
 e6c:	91 1d       	adc	r25, r1
 e6e:	96 95       	lsr	r25
 e70:	87 95       	ror	r24
 e72:	97 f9       	bld	r25, 7
 e74:	08 95       	ret

00000e76 <_exit>:
 e76:	f8 94       	cli

00000e78 <__stop_program>:
 e78:	ff cf       	rjmp	.-2      	; 0xe78 <__stop_program>
=======
 928:	0e 94 c1 03 	call	0x782	; 0x782 <TIMER_stop>
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	ff 90       	pop	r15
 932:	ef 90       	pop	r14
 934:	df 90       	pop	r13
 936:	cf 90       	pop	r12
 938:	bf 90       	pop	r11
 93a:	af 90       	pop	r10
 93c:	9f 90       	pop	r9
 93e:	8f 90       	pop	r8
 940:	7f 90       	pop	r7
 942:	6f 90       	pop	r6
 944:	5f 90       	pop	r5
 946:	4f 90       	pop	r4
 948:	08 95       	ret

0000094a <__subsf3>:
 94a:	50 58       	subi	r21, 0x80	; 128

0000094c <__addsf3>:
 94c:	bb 27       	eor	r27, r27
 94e:	aa 27       	eor	r26, r26
 950:	0e 94 bd 04 	call	0x97a	; 0x97a <__addsf3x>
 954:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
 958:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
 95c:	38 f0       	brcs	.+14     	; 0x96c <__addsf3+0x20>
 95e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
 962:	20 f0       	brcs	.+8      	; 0x96c <__addsf3+0x20>
 964:	39 f4       	brne	.+14     	; 0x974 <__addsf3+0x28>
 966:	9f 3f       	cpi	r25, 0xFF	; 255
 968:	19 f4       	brne	.+6      	; 0x970 <__addsf3+0x24>
 96a:	26 f4       	brtc	.+8      	; 0x974 <__addsf3+0x28>
 96c:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
 970:	0e f4       	brtc	.+2      	; 0x974 <__addsf3+0x28>
 972:	e0 95       	com	r30
 974:	e7 fb       	bst	r30, 7
 976:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>

0000097a <__addsf3x>:
 97a:	e9 2f       	mov	r30, r25
 97c:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
 980:	58 f3       	brcs	.-42     	; 0x958 <__addsf3+0xc>
 982:	ba 17       	cp	r27, r26
 984:	62 07       	cpc	r22, r18
 986:	73 07       	cpc	r23, r19
 988:	84 07       	cpc	r24, r20
 98a:	95 07       	cpc	r25, r21
 98c:	20 f0       	brcs	.+8      	; 0x996 <__addsf3x+0x1c>
 98e:	79 f4       	brne	.+30     	; 0x9ae <__addsf3x+0x34>
 990:	a6 f5       	brtc	.+104    	; 0x9fa <__addsf3x+0x80>
 992:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_zero>
 996:	0e f4       	brtc	.+2      	; 0x99a <__addsf3x+0x20>
 998:	e0 95       	com	r30
 99a:	0b 2e       	mov	r0, r27
 99c:	ba 2f       	mov	r27, r26
 99e:	a0 2d       	mov	r26, r0
 9a0:	0b 01       	movw	r0, r22
 9a2:	b9 01       	movw	r22, r18
 9a4:	90 01       	movw	r18, r0
 9a6:	0c 01       	movw	r0, r24
 9a8:	ca 01       	movw	r24, r20
 9aa:	a0 01       	movw	r20, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	ff 27       	eor	r31, r31
 9b0:	59 1b       	sub	r21, r25
 9b2:	99 f0       	breq	.+38     	; 0x9da <__addsf3x+0x60>
 9b4:	59 3f       	cpi	r21, 0xF9	; 249
 9b6:	50 f4       	brcc	.+20     	; 0x9cc <__addsf3x+0x52>
 9b8:	50 3e       	cpi	r21, 0xE0	; 224
 9ba:	68 f1       	brcs	.+90     	; 0xa16 <__addsf3x+0x9c>
 9bc:	1a 16       	cp	r1, r26
 9be:	f0 40       	sbci	r31, 0x00	; 0
 9c0:	a2 2f       	mov	r26, r18
 9c2:	23 2f       	mov	r18, r19
 9c4:	34 2f       	mov	r19, r20
 9c6:	44 27       	eor	r20, r20
 9c8:	58 5f       	subi	r21, 0xF8	; 248
 9ca:	f3 cf       	rjmp	.-26     	; 0x9b2 <__addsf3x+0x38>
 9cc:	46 95       	lsr	r20
 9ce:	37 95       	ror	r19
 9d0:	27 95       	ror	r18
 9d2:	a7 95       	ror	r26
 9d4:	f0 40       	sbci	r31, 0x00	; 0
 9d6:	53 95       	inc	r21
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__addsf3x+0x52>
 9da:	7e f4       	brtc	.+30     	; 0x9fa <__addsf3x+0x80>
 9dc:	1f 16       	cp	r1, r31
 9de:	ba 0b       	sbc	r27, r26
 9e0:	62 0b       	sbc	r22, r18
 9e2:	73 0b       	sbc	r23, r19
 9e4:	84 0b       	sbc	r24, r20
 9e6:	ba f0       	brmi	.+46     	; 0xa16 <__addsf3x+0x9c>
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	a1 f0       	breq	.+40     	; 0xa14 <__addsf3x+0x9a>
 9ec:	ff 0f       	add	r31, r31
 9ee:	bb 1f       	adc	r27, r27
 9f0:	66 1f       	adc	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	c2 f7       	brpl	.-16     	; 0x9e8 <__addsf3x+0x6e>
 9f8:	0e c0       	rjmp	.+28     	; 0xa16 <__addsf3x+0x9c>
 9fa:	ba 0f       	add	r27, r26
 9fc:	62 1f       	adc	r22, r18
 9fe:	73 1f       	adc	r23, r19
 a00:	84 1f       	adc	r24, r20
 a02:	48 f4       	brcc	.+18     	; 0xa16 <__addsf3x+0x9c>
 a04:	87 95       	ror	r24
 a06:	77 95       	ror	r23
 a08:	67 95       	ror	r22
 a0a:	b7 95       	ror	r27
 a0c:	f7 95       	ror	r31
 a0e:	9e 3f       	cpi	r25, 0xFE	; 254
 a10:	08 f0       	brcs	.+2      	; 0xa14 <__addsf3x+0x9a>
 a12:	b0 cf       	rjmp	.-160    	; 0x974 <__addsf3+0x28>
 a14:	93 95       	inc	r25
 a16:	88 0f       	add	r24, r24
 a18:	08 f0       	brcs	.+2      	; 0xa1c <__addsf3x+0xa2>
 a1a:	99 27       	eor	r25, r25
 a1c:	ee 0f       	add	r30, r30
 a1e:	97 95       	ror	r25
 a20:	87 95       	ror	r24
 a22:	08 95       	ret

00000a24 <ceil>:
 a24:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_trunc>
 a28:	90 f0       	brcs	.+36     	; 0xa4e <ceil+0x2a>
 a2a:	9f 37       	cpi	r25, 0x7F	; 127
 a2c:	48 f4       	brcc	.+18     	; 0xa40 <ceil+0x1c>
 a2e:	91 11       	cpse	r25, r1
 a30:	16 f4       	brtc	.+4      	; 0xa36 <ceil+0x12>
 a32:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	80 e8       	ldi	r24, 0x80	; 128
 a3c:	9f e3       	ldi	r25, 0x3F	; 63
 a3e:	08 95       	ret
 a40:	26 f0       	brts	.+8      	; 0xa4a <ceil+0x26>
 a42:	1b 16       	cp	r1, r27
 a44:	61 1d       	adc	r22, r1
 a46:	71 1d       	adc	r23, r1
 a48:	81 1d       	adc	r24, r1
 a4a:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__fp_mintl>
 a4e:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_mpack>

00000a52 <__cmpsf2>:
 a52:	0e 94 0c 06 	call	0xc18	; 0xc18 <__fp_cmp>
 a56:	08 f4       	brcc	.+2      	; 0xa5a <__cmpsf2+0x8>
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	08 95       	ret

00000a5c <__divsf3>:
 a5c:	0e 94 42 05 	call	0xa84	; 0xa84 <__divsf3x>
 a60:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
 a64:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
 a68:	58 f0       	brcs	.+22     	; 0xa80 <__divsf3+0x24>
 a6a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
 a6e:	40 f0       	brcs	.+16     	; 0xa80 <__divsf3+0x24>
 a70:	29 f4       	brne	.+10     	; 0xa7c <__divsf3+0x20>
 a72:	5f 3f       	cpi	r21, 0xFF	; 255
 a74:	29 f0       	breq	.+10     	; 0xa80 <__divsf3+0x24>
 a76:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
 a7a:	51 11       	cpse	r21, r1
 a7c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
 a80:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>

00000a84 <__divsf3x>:
 a84:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
 a88:	68 f3       	brcs	.-38     	; 0xa64 <__divsf3+0x8>

00000a8a <__divsf3_pse>:
 a8a:	99 23       	and	r25, r25
 a8c:	b1 f3       	breq	.-20     	; 0xa7a <__divsf3+0x1e>
 a8e:	55 23       	and	r21, r21
 a90:	91 f3       	breq	.-28     	; 0xa76 <__divsf3+0x1a>
 a92:	95 1b       	sub	r25, r21
 a94:	55 0b       	sbc	r21, r21
 a96:	bb 27       	eor	r27, r27
 a98:	aa 27       	eor	r26, r26
 a9a:	62 17       	cp	r22, r18
 a9c:	73 07       	cpc	r23, r19
 a9e:	84 07       	cpc	r24, r20
 aa0:	38 f0       	brcs	.+14     	; 0xab0 <__divsf3_pse+0x26>
 aa2:	9f 5f       	subi	r25, 0xFF	; 255
 aa4:	5f 4f       	sbci	r21, 0xFF	; 255
 aa6:	22 0f       	add	r18, r18
 aa8:	33 1f       	adc	r19, r19
 aaa:	44 1f       	adc	r20, r20
 aac:	aa 1f       	adc	r26, r26
 aae:	a9 f3       	breq	.-22     	; 0xa9a <__divsf3_pse+0x10>
 ab0:	35 d0       	rcall	.+106    	; 0xb1c <__divsf3_pse+0x92>
 ab2:	0e 2e       	mov	r0, r30
 ab4:	3a f0       	brmi	.+14     	; 0xac4 <__divsf3_pse+0x3a>
 ab6:	e0 e8       	ldi	r30, 0x80	; 128
 ab8:	32 d0       	rcall	.+100    	; 0xb1e <__divsf3_pse+0x94>
 aba:	91 50       	subi	r25, 0x01	; 1
 abc:	50 40       	sbci	r21, 0x00	; 0
 abe:	e6 95       	lsr	r30
 ac0:	00 1c       	adc	r0, r0
 ac2:	ca f7       	brpl	.-14     	; 0xab6 <__divsf3_pse+0x2c>
 ac4:	2b d0       	rcall	.+86     	; 0xb1c <__divsf3_pse+0x92>
 ac6:	fe 2f       	mov	r31, r30
 ac8:	29 d0       	rcall	.+82     	; 0xb1c <__divsf3_pse+0x92>
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	bb 1f       	adc	r27, r27
 ad2:	26 17       	cp	r18, r22
 ad4:	37 07       	cpc	r19, r23
 ad6:	48 07       	cpc	r20, r24
 ad8:	ab 07       	cpc	r26, r27
 ada:	b0 e8       	ldi	r27, 0x80	; 128
 adc:	09 f0       	breq	.+2      	; 0xae0 <__divsf3_pse+0x56>
 ade:	bb 0b       	sbc	r27, r27
 ae0:	80 2d       	mov	r24, r0
 ae2:	bf 01       	movw	r22, r30
 ae4:	ff 27       	eor	r31, r31
 ae6:	93 58       	subi	r25, 0x83	; 131
 ae8:	5f 4f       	sbci	r21, 0xFF	; 255
 aea:	3a f0       	brmi	.+14     	; 0xafa <__divsf3_pse+0x70>
 aec:	9e 3f       	cpi	r25, 0xFE	; 254
 aee:	51 05       	cpc	r21, r1
 af0:	78 f0       	brcs	.+30     	; 0xb10 <__divsf3_pse+0x86>
 af2:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
 af6:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
 afa:	5f 3f       	cpi	r21, 0xFF	; 255
 afc:	e4 f3       	brlt	.-8      	; 0xaf6 <__divsf3_pse+0x6c>
 afe:	98 3e       	cpi	r25, 0xE8	; 232
 b00:	d4 f3       	brlt	.-12     	; 0xaf6 <__divsf3_pse+0x6c>
 b02:	86 95       	lsr	r24
 b04:	77 95       	ror	r23
 b06:	67 95       	ror	r22
 b08:	b7 95       	ror	r27
 b0a:	f7 95       	ror	r31
 b0c:	9f 5f       	subi	r25, 0xFF	; 255
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__divsf3_pse+0x78>
 b10:	88 0f       	add	r24, r24
 b12:	91 1d       	adc	r25, r1
 b14:	96 95       	lsr	r25
 b16:	87 95       	ror	r24
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret
 b1c:	e1 e0       	ldi	r30, 0x01	; 1
 b1e:	66 0f       	add	r22, r22
 b20:	77 1f       	adc	r23, r23
 b22:	88 1f       	adc	r24, r24
 b24:	bb 1f       	adc	r27, r27
 b26:	62 17       	cp	r22, r18
 b28:	73 07       	cpc	r23, r19
 b2a:	84 07       	cpc	r24, r20
 b2c:	ba 07       	cpc	r27, r26
 b2e:	20 f0       	brcs	.+8      	; 0xb38 <__divsf3_pse+0xae>
 b30:	62 1b       	sub	r22, r18
 b32:	73 0b       	sbc	r23, r19
 b34:	84 0b       	sbc	r24, r20
 b36:	ba 0b       	sbc	r27, r26
 b38:	ee 1f       	adc	r30, r30
 b3a:	88 f7       	brcc	.-30     	; 0xb1e <__divsf3_pse+0x94>
 b3c:	e0 95       	com	r30
 b3e:	08 95       	ret

00000b40 <__fixunssfsi>:
 b40:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_splitA>
 b44:	88 f0       	brcs	.+34     	; 0xb68 <__fixunssfsi+0x28>
 b46:	9f 57       	subi	r25, 0x7F	; 127
 b48:	98 f0       	brcs	.+38     	; 0xb70 <__fixunssfsi+0x30>
 b4a:	b9 2f       	mov	r27, r25
 b4c:	99 27       	eor	r25, r25
 b4e:	b7 51       	subi	r27, 0x17	; 23
 b50:	b0 f0       	brcs	.+44     	; 0xb7e <__fixunssfsi+0x3e>
 b52:	e1 f0       	breq	.+56     	; 0xb8c <__fixunssfsi+0x4c>
 b54:	66 0f       	add	r22, r22
 b56:	77 1f       	adc	r23, r23
 b58:	88 1f       	adc	r24, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	1a f0       	brmi	.+6      	; 0xb64 <__fixunssfsi+0x24>
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__fixunssfsi+0x14>
 b62:	14 c0       	rjmp	.+40     	; 0xb8c <__fixunssfsi+0x4c>
 b64:	b1 30       	cpi	r27, 0x01	; 1
 b66:	91 f0       	breq	.+36     	; 0xb8c <__fixunssfsi+0x4c>
 b68:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_zero>
 b6c:	b1 e0       	ldi	r27, 0x01	; 1
 b6e:	08 95       	ret
 b70:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_zero>
 b74:	67 2f       	mov	r22, r23
 b76:	78 2f       	mov	r23, r24
 b78:	88 27       	eor	r24, r24
 b7a:	b8 5f       	subi	r27, 0xF8	; 248
 b7c:	39 f0       	breq	.+14     	; 0xb8c <__fixunssfsi+0x4c>
 b7e:	b9 3f       	cpi	r27, 0xF9	; 249
 b80:	cc f3       	brlt	.-14     	; 0xb74 <__fixunssfsi+0x34>
 b82:	86 95       	lsr	r24
 b84:	77 95       	ror	r23
 b86:	67 95       	ror	r22
 b88:	b3 95       	inc	r27
 b8a:	d9 f7       	brne	.-10     	; 0xb82 <__fixunssfsi+0x42>
 b8c:	3e f4       	brtc	.+14     	; 0xb9c <__fixunssfsi+0x5c>
 b8e:	90 95       	com	r25
 b90:	80 95       	com	r24
 b92:	70 95       	com	r23
 b94:	61 95       	neg	r22
 b96:	7f 4f       	sbci	r23, 0xFF	; 255
 b98:	8f 4f       	sbci	r24, 0xFF	; 255
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	08 95       	ret

00000b9e <__floatunsisf>:
 b9e:	e8 94       	clt
 ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <__floatsisf+0x12>

00000ba2 <__floatsisf>:
 ba2:	97 fb       	bst	r25, 7
 ba4:	3e f4       	brtc	.+14     	; 0xbb4 <__floatsisf+0x12>
 ba6:	90 95       	com	r25
 ba8:	80 95       	com	r24
 baa:	70 95       	com	r23
 bac:	61 95       	neg	r22
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	99 23       	and	r25, r25
 bb6:	a9 f0       	breq	.+42     	; 0xbe2 <__floatsisf+0x40>
 bb8:	f9 2f       	mov	r31, r25
 bba:	96 e9       	ldi	r25, 0x96	; 150
 bbc:	bb 27       	eor	r27, r27
 bbe:	93 95       	inc	r25
 bc0:	f6 95       	lsr	r31
 bc2:	87 95       	ror	r24
 bc4:	77 95       	ror	r23
 bc6:	67 95       	ror	r22
 bc8:	b7 95       	ror	r27
 bca:	f1 11       	cpse	r31, r1
 bcc:	f8 cf       	rjmp	.-16     	; 0xbbe <__floatsisf+0x1c>
 bce:	fa f4       	brpl	.+62     	; 0xc0e <__floatsisf+0x6c>
 bd0:	bb 0f       	add	r27, r27
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <__floatsisf+0x36>
 bd4:	60 ff       	sbrs	r22, 0
 bd6:	1b c0       	rjmp	.+54     	; 0xc0e <__floatsisf+0x6c>
 bd8:	6f 5f       	subi	r22, 0xFF	; 255
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	16 c0       	rjmp	.+44     	; 0xc0e <__floatsisf+0x6c>
 be2:	88 23       	and	r24, r24
 be4:	11 f0       	breq	.+4      	; 0xbea <__floatsisf+0x48>
 be6:	96 e9       	ldi	r25, 0x96	; 150
 be8:	11 c0       	rjmp	.+34     	; 0xc0c <__floatsisf+0x6a>
 bea:	77 23       	and	r23, r23
 bec:	21 f0       	breq	.+8      	; 0xbf6 <__floatsisf+0x54>
 bee:	9e e8       	ldi	r25, 0x8E	; 142
 bf0:	87 2f       	mov	r24, r23
 bf2:	76 2f       	mov	r23, r22
 bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__floatsisf+0x5e>
 bf6:	66 23       	and	r22, r22
 bf8:	71 f0       	breq	.+28     	; 0xc16 <__floatsisf+0x74>
 bfa:	96 e8       	ldi	r25, 0x86	; 134
 bfc:	86 2f       	mov	r24, r22
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	60 e0       	ldi	r22, 0x00	; 0
 c02:	2a f0       	brmi	.+10     	; 0xc0e <__floatsisf+0x6c>
 c04:	9a 95       	dec	r25
 c06:	66 0f       	add	r22, r22
 c08:	77 1f       	adc	r23, r23
 c0a:	88 1f       	adc	r24, r24
 c0c:	da f7       	brpl	.-10     	; 0xc04 <__floatsisf+0x62>
 c0e:	88 0f       	add	r24, r24
 c10:	96 95       	lsr	r25
 c12:	87 95       	ror	r24
 c14:	97 f9       	bld	r25, 7
 c16:	08 95       	ret

00000c18 <__fp_cmp>:
 c18:	99 0f       	add	r25, r25
 c1a:	00 08       	sbc	r0, r0
 c1c:	55 0f       	add	r21, r21
 c1e:	aa 0b       	sbc	r26, r26
 c20:	e0 e8       	ldi	r30, 0x80	; 128
 c22:	fe ef       	ldi	r31, 0xFE	; 254
 c24:	16 16       	cp	r1, r22
 c26:	17 06       	cpc	r1, r23
 c28:	e8 07       	cpc	r30, r24
 c2a:	f9 07       	cpc	r31, r25
 c2c:	c0 f0       	brcs	.+48     	; 0xc5e <__fp_cmp+0x46>
 c2e:	12 16       	cp	r1, r18
 c30:	13 06       	cpc	r1, r19
 c32:	e4 07       	cpc	r30, r20
 c34:	f5 07       	cpc	r31, r21
 c36:	98 f0       	brcs	.+38     	; 0xc5e <__fp_cmp+0x46>
 c38:	62 1b       	sub	r22, r18
 c3a:	73 0b       	sbc	r23, r19
 c3c:	84 0b       	sbc	r24, r20
 c3e:	95 0b       	sbc	r25, r21
 c40:	39 f4       	brne	.+14     	; 0xc50 <__fp_cmp+0x38>
 c42:	0a 26       	eor	r0, r26
 c44:	61 f0       	breq	.+24     	; 0xc5e <__fp_cmp+0x46>
 c46:	23 2b       	or	r18, r19
 c48:	24 2b       	or	r18, r20
 c4a:	25 2b       	or	r18, r21
 c4c:	21 f4       	brne	.+8      	; 0xc56 <__fp_cmp+0x3e>
 c4e:	08 95       	ret
 c50:	0a 26       	eor	r0, r26
 c52:	09 f4       	brne	.+2      	; 0xc56 <__fp_cmp+0x3e>
 c54:	a1 40       	sbci	r26, 0x01	; 1
 c56:	a6 95       	lsr	r26
 c58:	8f ef       	ldi	r24, 0xFF	; 255
 c5a:	81 1d       	adc	r24, r1
 c5c:	81 1d       	adc	r24, r1
 c5e:	08 95       	ret

00000c60 <__fp_inf>:
 c60:	97 f9       	bld	r25, 7
 c62:	9f 67       	ori	r25, 0x7F	; 127
 c64:	80 e8       	ldi	r24, 0x80	; 128
 c66:	70 e0       	ldi	r23, 0x00	; 0
 c68:	60 e0       	ldi	r22, 0x00	; 0
 c6a:	08 95       	ret

00000c6c <__fp_mintl>:
 c6c:	88 23       	and	r24, r24
 c6e:	71 f4       	brne	.+28     	; 0xc8c <__fp_mintl+0x20>
 c70:	77 23       	and	r23, r23
 c72:	21 f0       	breq	.+8      	; 0xc7c <__fp_mintl+0x10>
 c74:	98 50       	subi	r25, 0x08	; 8
 c76:	87 2b       	or	r24, r23
 c78:	76 2f       	mov	r23, r22
 c7a:	07 c0       	rjmp	.+14     	; 0xc8a <__fp_mintl+0x1e>
 c7c:	66 23       	and	r22, r22
 c7e:	11 f4       	brne	.+4      	; 0xc84 <__fp_mintl+0x18>
 c80:	99 27       	eor	r25, r25
 c82:	0d c0       	rjmp	.+26     	; 0xc9e <__fp_mintl+0x32>
 c84:	90 51       	subi	r25, 0x10	; 16
 c86:	86 2b       	or	r24, r22
 c88:	70 e0       	ldi	r23, 0x00	; 0
 c8a:	60 e0       	ldi	r22, 0x00	; 0
 c8c:	2a f0       	brmi	.+10     	; 0xc98 <__fp_mintl+0x2c>
 c8e:	9a 95       	dec	r25
 c90:	66 0f       	add	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	da f7       	brpl	.-10     	; 0xc8e <__fp_mintl+0x22>
 c98:	88 0f       	add	r24, r24
 c9a:	96 95       	lsr	r25
 c9c:	87 95       	ror	r24
 c9e:	97 f9       	bld	r25, 7
 ca0:	08 95       	ret

00000ca2 <__fp_mpack>:
 ca2:	9f 3f       	cpi	r25, 0xFF	; 255
 ca4:	31 f0       	breq	.+12     	; 0xcb2 <__fp_mpack_finite+0xc>

00000ca6 <__fp_mpack_finite>:
 ca6:	91 50       	subi	r25, 0x01	; 1
 ca8:	20 f4       	brcc	.+8      	; 0xcb2 <__fp_mpack_finite+0xc>
 caa:	87 95       	ror	r24
 cac:	77 95       	ror	r23
 cae:	67 95       	ror	r22
 cb0:	b7 95       	ror	r27
 cb2:	88 0f       	add	r24, r24
 cb4:	91 1d       	adc	r25, r1
 cb6:	96 95       	lsr	r25
 cb8:	87 95       	ror	r24
 cba:	97 f9       	bld	r25, 7
 cbc:	08 95       	ret

00000cbe <__fp_nan>:
 cbe:	9f ef       	ldi	r25, 0xFF	; 255
 cc0:	80 ec       	ldi	r24, 0xC0	; 192
 cc2:	08 95       	ret

00000cc4 <__fp_pscA>:
 cc4:	00 24       	eor	r0, r0
 cc6:	0a 94       	dec	r0
 cc8:	16 16       	cp	r1, r22
 cca:	17 06       	cpc	r1, r23
 ccc:	18 06       	cpc	r1, r24
 cce:	09 06       	cpc	r0, r25
 cd0:	08 95       	ret

00000cd2 <__fp_pscB>:
 cd2:	00 24       	eor	r0, r0
 cd4:	0a 94       	dec	r0
 cd6:	12 16       	cp	r1, r18
 cd8:	13 06       	cpc	r1, r19
 cda:	14 06       	cpc	r1, r20
 cdc:	05 06       	cpc	r0, r21
 cde:	08 95       	ret

00000ce0 <__fp_round>:
 ce0:	09 2e       	mov	r0, r25
 ce2:	03 94       	inc	r0
 ce4:	00 0c       	add	r0, r0
 ce6:	11 f4       	brne	.+4      	; 0xcec <__fp_round+0xc>
 ce8:	88 23       	and	r24, r24
 cea:	52 f0       	brmi	.+20     	; 0xd00 <__fp_round+0x20>
 cec:	bb 0f       	add	r27, r27
 cee:	40 f4       	brcc	.+16     	; 0xd00 <__fp_round+0x20>
 cf0:	bf 2b       	or	r27, r31
 cf2:	11 f4       	brne	.+4      	; 0xcf8 <__fp_round+0x18>
 cf4:	60 ff       	sbrs	r22, 0
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__fp_round+0x20>
 cf8:	6f 5f       	subi	r22, 0xFF	; 255
 cfa:	7f 4f       	sbci	r23, 0xFF	; 255
 cfc:	8f 4f       	sbci	r24, 0xFF	; 255
 cfe:	9f 4f       	sbci	r25, 0xFF	; 255
 d00:	08 95       	ret

00000d02 <__fp_split3>:
 d02:	57 fd       	sbrc	r21, 7
 d04:	90 58       	subi	r25, 0x80	; 128
 d06:	44 0f       	add	r20, r20
 d08:	55 1f       	adc	r21, r21
 d0a:	59 f0       	breq	.+22     	; 0xd22 <__fp_splitA+0x10>
 d0c:	5f 3f       	cpi	r21, 0xFF	; 255
 d0e:	71 f0       	breq	.+28     	; 0xd2c <__fp_splitA+0x1a>
 d10:	47 95       	ror	r20

00000d12 <__fp_splitA>:
 d12:	88 0f       	add	r24, r24
 d14:	97 fb       	bst	r25, 7
 d16:	99 1f       	adc	r25, r25
 d18:	61 f0       	breq	.+24     	; 0xd32 <__fp_splitA+0x20>
 d1a:	9f 3f       	cpi	r25, 0xFF	; 255
 d1c:	79 f0       	breq	.+30     	; 0xd3c <__fp_splitA+0x2a>
 d1e:	87 95       	ror	r24
 d20:	08 95       	ret
 d22:	12 16       	cp	r1, r18
 d24:	13 06       	cpc	r1, r19
 d26:	14 06       	cpc	r1, r20
 d28:	55 1f       	adc	r21, r21
 d2a:	f2 cf       	rjmp	.-28     	; 0xd10 <__fp_split3+0xe>
 d2c:	46 95       	lsr	r20
 d2e:	f1 df       	rcall	.-30     	; 0xd12 <__fp_splitA>
 d30:	08 c0       	rjmp	.+16     	; 0xd42 <__fp_splitA+0x30>
 d32:	16 16       	cp	r1, r22
 d34:	17 06       	cpc	r1, r23
 d36:	18 06       	cpc	r1, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	f1 cf       	rjmp	.-30     	; 0xd1e <__fp_splitA+0xc>
 d3c:	86 95       	lsr	r24
 d3e:	71 05       	cpc	r23, r1
 d40:	61 05       	cpc	r22, r1
 d42:	08 94       	sec
 d44:	08 95       	ret

00000d46 <__fp_trunc>:
 d46:	0e 94 89 06 	call	0xd12	; 0xd12 <__fp_splitA>
 d4a:	a0 f0       	brcs	.+40     	; 0xd74 <__fp_trunc+0x2e>
 d4c:	be e7       	ldi	r27, 0x7E	; 126
 d4e:	b9 17       	cp	r27, r25
 d50:	88 f4       	brcc	.+34     	; 0xd74 <__fp_trunc+0x2e>
 d52:	bb 27       	eor	r27, r27
 d54:	9f 38       	cpi	r25, 0x8F	; 143
 d56:	60 f4       	brcc	.+24     	; 0xd70 <__fp_trunc+0x2a>
 d58:	16 16       	cp	r1, r22
 d5a:	b1 1d       	adc	r27, r1
 d5c:	67 2f       	mov	r22, r23
 d5e:	78 2f       	mov	r23, r24
 d60:	88 27       	eor	r24, r24
 d62:	98 5f       	subi	r25, 0xF8	; 248
 d64:	f7 cf       	rjmp	.-18     	; 0xd54 <__fp_trunc+0xe>
 d66:	86 95       	lsr	r24
 d68:	77 95       	ror	r23
 d6a:	67 95       	ror	r22
 d6c:	b1 1d       	adc	r27, r1
 d6e:	93 95       	inc	r25
 d70:	96 39       	cpi	r25, 0x96	; 150
 d72:	c8 f3       	brcs	.-14     	; 0xd66 <__fp_trunc+0x20>
 d74:	08 95       	ret

00000d76 <__fp_zero>:
 d76:	e8 94       	clt

00000d78 <__fp_szero>:
 d78:	bb 27       	eor	r27, r27
 d7a:	66 27       	eor	r22, r22
 d7c:	77 27       	eor	r23, r23
 d7e:	cb 01       	movw	r24, r22
 d80:	97 f9       	bld	r25, 7
 d82:	08 95       	ret

00000d84 <__gesf2>:
 d84:	0e 94 0c 06 	call	0xc18	; 0xc18 <__fp_cmp>
 d88:	08 f4       	brcc	.+2      	; 0xd8c <__gesf2+0x8>
 d8a:	8f ef       	ldi	r24, 0xFF	; 255
 d8c:	08 95       	ret

00000d8e <__mulsf3>:
 d8e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__mulsf3x>
 d92:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_round>
 d96:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_pscA>
 d9a:	38 f0       	brcs	.+14     	; 0xdaa <__mulsf3+0x1c>
 d9c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscB>
 da0:	20 f0       	brcs	.+8      	; 0xdaa <__mulsf3+0x1c>
 da2:	95 23       	and	r25, r21
 da4:	11 f0       	breq	.+4      	; 0xdaa <__mulsf3+0x1c>
 da6:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
 daa:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__fp_nan>
 dae:	11 24       	eor	r1, r1
 db0:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>

00000db4 <__mulsf3x>:
 db4:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_split3>
 db8:	70 f3       	brcs	.-36     	; 0xd96 <__mulsf3+0x8>

00000dba <__mulsf3_pse>:
 dba:	95 9f       	mul	r25, r21
 dbc:	c1 f3       	breq	.-16     	; 0xdae <__mulsf3+0x20>
 dbe:	95 0f       	add	r25, r21
 dc0:	50 e0       	ldi	r21, 0x00	; 0
 dc2:	55 1f       	adc	r21, r21
 dc4:	62 9f       	mul	r22, r18
 dc6:	f0 01       	movw	r30, r0
 dc8:	72 9f       	mul	r23, r18
 dca:	bb 27       	eor	r27, r27
 dcc:	f0 0d       	add	r31, r0
 dce:	b1 1d       	adc	r27, r1
 dd0:	63 9f       	mul	r22, r19
 dd2:	aa 27       	eor	r26, r26
 dd4:	f0 0d       	add	r31, r0
 dd6:	b1 1d       	adc	r27, r1
 dd8:	aa 1f       	adc	r26, r26
 dda:	64 9f       	mul	r22, r20
 ddc:	66 27       	eor	r22, r22
 dde:	b0 0d       	add	r27, r0
 de0:	a1 1d       	adc	r26, r1
 de2:	66 1f       	adc	r22, r22
 de4:	82 9f       	mul	r24, r18
 de6:	22 27       	eor	r18, r18
 de8:	b0 0d       	add	r27, r0
 dea:	a1 1d       	adc	r26, r1
 dec:	62 1f       	adc	r22, r18
 dee:	73 9f       	mul	r23, r19
 df0:	b0 0d       	add	r27, r0
 df2:	a1 1d       	adc	r26, r1
 df4:	62 1f       	adc	r22, r18
 df6:	83 9f       	mul	r24, r19
 df8:	a0 0d       	add	r26, r0
 dfa:	61 1d       	adc	r22, r1
 dfc:	22 1f       	adc	r18, r18
 dfe:	74 9f       	mul	r23, r20
 e00:	33 27       	eor	r19, r19
 e02:	a0 0d       	add	r26, r0
 e04:	61 1d       	adc	r22, r1
 e06:	23 1f       	adc	r18, r19
 e08:	84 9f       	mul	r24, r20
 e0a:	60 0d       	add	r22, r0
 e0c:	21 1d       	adc	r18, r1
 e0e:	82 2f       	mov	r24, r18
 e10:	76 2f       	mov	r23, r22
 e12:	6a 2f       	mov	r22, r26
 e14:	11 24       	eor	r1, r1
 e16:	9f 57       	subi	r25, 0x7F	; 127
 e18:	50 40       	sbci	r21, 0x00	; 0
 e1a:	9a f0       	brmi	.+38     	; 0xe42 <__mulsf3_pse+0x88>
 e1c:	f1 f0       	breq	.+60     	; 0xe5a <__mulsf3_pse+0xa0>
 e1e:	88 23       	and	r24, r24
 e20:	4a f0       	brmi	.+18     	; 0xe34 <__mulsf3_pse+0x7a>
 e22:	ee 0f       	add	r30, r30
 e24:	ff 1f       	adc	r31, r31
 e26:	bb 1f       	adc	r27, r27
 e28:	66 1f       	adc	r22, r22
 e2a:	77 1f       	adc	r23, r23
 e2c:	88 1f       	adc	r24, r24
 e2e:	91 50       	subi	r25, 0x01	; 1
 e30:	50 40       	sbci	r21, 0x00	; 0
 e32:	a9 f7       	brne	.-22     	; 0xe1e <__mulsf3_pse+0x64>
 e34:	9e 3f       	cpi	r25, 0xFE	; 254
 e36:	51 05       	cpc	r21, r1
 e38:	80 f0       	brcs	.+32     	; 0xe5a <__mulsf3_pse+0xa0>
 e3a:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_inf>
 e3e:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
 e42:	5f 3f       	cpi	r21, 0xFF	; 255
 e44:	e4 f3       	brlt	.-8      	; 0xe3e <__mulsf3_pse+0x84>
 e46:	98 3e       	cpi	r25, 0xE8	; 232
 e48:	d4 f3       	brlt	.-12     	; 0xe3e <__mulsf3_pse+0x84>
 e4a:	86 95       	lsr	r24
 e4c:	77 95       	ror	r23
 e4e:	67 95       	ror	r22
 e50:	b7 95       	ror	r27
 e52:	f7 95       	ror	r31
 e54:	e7 95       	ror	r30
 e56:	9f 5f       	subi	r25, 0xFF	; 255
 e58:	c1 f7       	brne	.-16     	; 0xe4a <__mulsf3_pse+0x90>
 e5a:	fe 2b       	or	r31, r30
 e5c:	88 0f       	add	r24, r24
 e5e:	91 1d       	adc	r25, r1
 e60:	96 95       	lsr	r25
 e62:	87 95       	ror	r24
 e64:	97 f9       	bld	r25, 7
 e66:	08 95       	ret

00000e68 <_exit>:
 e68:	f8 94       	cli

00000e6a <__stop_program>:
 e6a:	ff cf       	rjmp	.-2      	; 0xe6a <__stop_program>
>>>>>>> feature
