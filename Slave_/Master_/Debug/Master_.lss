
Master_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000048a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f53  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000926  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000026fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004db  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000443  00000000  00000000  00002d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000031a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  74:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:

volatile uint16_t digital_value = 0;
void app_init(void)
{
	
	DIO_init(PORT_D,PIN5,OUT); /*Makes PIN5 in PORT D output pin and initiate it by low*/
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	65 e0       	ldi	r22, 0x05	; 5
  80:	84 e4       	ldi	r24, 0x44	; 68
  82:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_init>
	DIO_init(PORT_D,PIN6,OUT); /*Makes PIN6 in PORT D output pin and initiate it by low*/
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	66 e0       	ldi	r22, 0x06	; 6
  8a:	84 e4       	ldi	r24, 0x44	; 68
  8c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_init>
	DIO_init(PORT_D,PIN7,OUT); /*Makes PIN7 in PORT D output pin and initiate it by low*/
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	67 e0       	ldi	r22, 0x07	; 7
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_init>
		
	DIO_write(PORT_D,PIN5,LOW);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	65 e0       	ldi	r22, 0x05	; 5
  9e:	84 e4       	ldi	r24, 0x44	; 68
  a0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
	DIO_write(PORT_D,PIN6,LOW);
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	66 e0       	ldi	r22, 0x06	; 6
  a8:	84 e4       	ldi	r24, 0x44	; 68
  aa:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
	DIO_write(PORT_D,PIN7,LOW);	
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	67 e0       	ldi	r22, 0x07	; 7
  b2:	84 e4       	ldi	r24, 0x44	; 68
  b4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>

	DDRC = 0xFF;	// Set PORTC to be output
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20

	DDRD |= (1<<0) | (1<<1);	//Set PIN0 and PIN1 in PORTD to be outputs
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	81 bb       	out	0x11, r24	; 17

	//ADC initializing
	DDRA &= ~(1<<0);	// Set ADC channel 0 to be input
  c2:	8a b3       	in	r24, 0x1a	; 26
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	8a bb       	out	0x1a, r24	; 26
	
	Spi_Slave_init();
  c8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Spi_Slave_init>
  cc:	08 95       	ret

000000ce <app_start>:

}

void app_start(void)
{
	data = Spi_Slave_receive();
  ce:	0e 94 03 02 	call	0x406	; 0x406 <Spi_Slave_receive>
  d2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <data>
	PORTA = data;
  d6:	8b bb       	out	0x1b, r24	; 27
	
	switch(data)
  d8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <data>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	31 f0       	breq	.+12     	; 0xec <app_start+0x1e>
  e0:	40 f0       	brcs	.+16     	; 0xf2 <app_start+0x24>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	49 f0       	breq	.+18     	; 0xf8 <app_start+0x2a>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	91 f0       	breq	.+36     	; 0x10e <app_start+0x40>
  ea:	1b c0       	rjmp	.+54     	; 0x122 <app_start+0x54>
	{
		case Open_Door: servo_move_180_deg(); break;
  ec:	0e 94 bf 00 	call	0x17e	; 0x17e <servo_move_180_deg>
  f0:	18 c0       	rjmp	.+48     	; 0x122 <app_start+0x54>
		
		case Close_Door: servo_move_zero_deg(); break;
  f2:	0e 94 a5 00 	call	0x14a	; 0x14a <servo_move_zero_deg>
  f6:	15 c0       	rjmp	.+42     	; 0x122 <app_start+0x54>
		
		case Turn_On: 
			DIO_write(PORT_D,PIN6,HIGH); 
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	66 e0       	ldi	r22, 0x06	; 6
  fc:	84 e4       	ldi	r24, 0x44	; 68
  fe:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
			DIO_write(PORT_D,PIN7,HIGH);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	67 e0       	ldi	r22, 0x07	; 7
 106:	84 e4       	ldi	r24, 0x44	; 68
 108:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
			break; 
 10c:	0a c0       	rjmp	.+20     	; 0x122 <app_start+0x54>
		case Turn_Off:
			DIO_write(PORT_D,PIN6,LOW);
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	66 e0       	ldi	r22, 0x06	; 6
 112:	84 e4       	ldi	r24, 0x44	; 68
 114:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
			DIO_write(PORT_D,PIN7,LOW);
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	67 e0       	ldi	r22, 0x07	; 7
 11c:	84 e4       	ldi	r24, 0x44	; 68
 11e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
			break; 
	}
	ADC_init();	
 122:	0e 94 de 00 	call	0x1bc	; 0x1bc <ADC_init>
	digital_value = ADC_read(ADC_CH_0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 e6 00 	call	0x1cc	; 0x1cc <ADC_read>
 12c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTC = (uint8_t)digital_value;
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 13c:	85 bb       	out	0x15, r24	; 21

	PORTD = (uint8_t)(digital_value>>8);
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 146:	92 bb       	out	0x12, r25	; 18
 148:	08 95       	ret

0000014a <servo_move_zero_deg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	65 e0       	ldi	r22, 0x05	; 5
 14e:	84 e4       	ldi	r24, 0x44	; 68
 150:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <servo_move_zero_deg+0xe>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <servo_move_zero_deg+0x14>
 15e:	00 00       	nop
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	65 e0       	ldi	r22, 0x05	; 5
 164:	84 e4       	ldi	r24, 0x44	; 68
 166:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
 16a:	9f e7       	ldi	r25, 0x7F	; 127
 16c:	2a e1       	ldi	r18, 0x1A	; 26
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <servo_move_zero_deg+0x26>
 178:	00 c0       	rjmp	.+0      	; 0x17a <servo_move_zero_deg+0x30>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <servo_move_180_deg>:
	  DIO_write(PORT_D,PIN5,LOW);
	  _delay_ms(2000);	
}
void servo_move_180_deg(void)
{
	  DIO_write(PORT_D,PIN5,HIGH);
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	65 e0       	ldi	r22, 0x05	; 5
 182:	84 e4       	ldi	r24, 0x44	; 68
 184:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
 188:	83 ef       	ldi	r24, 0xF3	; 243
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <servo_move_180_deg+0xe>
 190:	00 c0       	rjmp	.+0      	; 0x192 <servo_move_180_deg+0x14>
 192:	00 00       	nop
	  _delay_ms(2);
	  DIO_write(PORT_D,PIN5,LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	65 e0       	ldi	r22, 0x05	; 5
 198:	84 e4       	ldi	r24, 0x44	; 68
 19a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_write>
 19e:	9f e7       	ldi	r25, 0x7F	; 127
 1a0:	2a e1       	ldi	r18, 0x1A	; 26
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	91 50       	subi	r25, 0x01	; 1
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <servo_move_180_deg+0x26>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <servo_move_180_deg+0x30>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <main>:
int main(void)
{
    /* Replace with your application code */
	/* initialization */
	/*Declaring and Initialization of variables*/	
	app_init();
 1b2:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	
	while(1)
	{
		app_start();
 1b6:	0e 94 67 00 	call	0xce	; 0xce <app_start>
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <main+0x4>

000001bc <ADC_init>:
 */ 
#include "adc.h"

void ADC_init(void)
{
	ADMUX |= (1<<REFS0);		// AVCC reference
 1bc:	87 b1       	in	r24, 0x07	; 7
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0x00 ;			//prescale  /2
 1c2:	16 b8       	out	0x06, r1	; 6
	
	ADCSRA |= (1<<ADEN);	// Enable the ADC
 1c4:	86 b1       	in	r24, 0x06	; 6
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	86 b9       	out	0x06, r24	; 6
 1ca:	08 95       	ret

000001cc <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
	ADMUX |= (channel & 0x0F);	//Choose channel to be read
 1cc:	97 b1       	in	r25, 0x07	; 7
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	98 2b       	or	r25, r24
 1d2:	97 b9       	out	0x07, r25	; 7
	
	ADCSRA |= (1<<ADSC);		//Start Conversion
 1d4:	86 b1       	in	r24, 0x06	; 6
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1<<4)) == 0);	//Wait for conversion Complete flag
 1da:	34 9b       	sbis	0x06, 4	; 6
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <ADC_read+0xe>

	return ADCL | (ADCH << 8);	//Return the digital value
 1de:	24 b1       	in	r18, 0x04	; 4
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	98 2f       	mov	r25, r24
 1e6:	88 27       	eor	r24, r24
	
 1e8:	82 2b       	or	r24, r18
 1ea:	08 95       	ret

000001ec <DIO_init>:

// global variables
// functions definitions
void DIO_init(uint8_t port_number, uint8_t pin_number, uint8_t direction)
{
	switch(port_number)
 1ec:	82 34       	cpi	r24, 0x42	; 66
 1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_init+0x4e>
 1f0:	18 f4       	brcc	.+6      	; 0x1f8 <DIO_init+0xc>
 1f2:	81 34       	cpi	r24, 0x41	; 65
 1f4:	39 f0       	breq	.+14     	; 0x204 <DIO_init+0x18>
 1f6:	08 95       	ret
 1f8:	83 34       	cpi	r24, 0x43	; 67
 1fa:	d1 f1       	breq	.+116    	; 0x270 <DIO_init+0x84>
 1fc:	84 34       	cpi	r24, 0x44	; 68
 1fe:	09 f4       	brne	.+2      	; 0x202 <DIO_init+0x16>
 200:	52 c0       	rjmp	.+164    	; 0x2a6 <DIO_init+0xba>
 202:	08 95       	ret
	{
		case PORT_A:
		if(direction == OUT)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <DIO_init+0x32>
		{
			//DDRA |= (1<<pin_number); //output
			SET_BIT(DDRA, pin_number);
 208:	2a b3       	in	r18, 0x1a	; 26
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_init+0x28>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_init+0x24>
 218:	82 2b       	or	r24, r18
 21a:	8a bb       	out	0x1a, r24	; 26
 21c:	08 95       	ret
			
		}
		else if(direction == IN)
 21e:	41 11       	cpse	r20, r1
 220:	5c c0       	rjmp	.+184    	; 0x2da <DIO_init+0xee>
		{
			//DDRA &= ~(1<<pin_number); // input
			ClEAR_BIT(DDRA, pin_number);
 222:	2a b3       	in	r18, 0x1a	; 26
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_init+0x42>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_init+0x3e>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	8a bb       	out	0x1a, r24	; 26
 238:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_B:
		if(direction == OUT)
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	59 f4       	brne	.+22     	; 0x254 <DIO_init+0x68>
		{
			//DDRB |= (1<<pin_number);
			SET_BIT(DDRB, pin_number);
 23e:	27 b3       	in	r18, 0x17	; 23
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_init+0x5e>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_init+0x5a>
 24e:	82 2b       	or	r24, r18
 250:	87 bb       	out	0x17, r24	; 23
 252:	08 95       	ret
		}
		else if(direction == IN)
 254:	41 11       	cpse	r20, r1
 256:	41 c0       	rjmp	.+130    	; 0x2da <DIO_init+0xee>
		{
			//DDRB &= ~(1<<pin_number);
			ClEAR_BIT(DDRB, pin_number);
 258:	27 b3       	in	r18, 0x17	; 23
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_init+0x78>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_init+0x74>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_C:
		if(direction == OUT)
 270:	41 30       	cpi	r20, 0x01	; 1
 272:	59 f4       	brne	.+22     	; 0x28a <DIO_init+0x9e>
		{
			//DDRC |= (1<<pin_number);
			SET_BIT(DDRC, pin_number);
 274:	24 b3       	in	r18, 0x14	; 20
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_init+0x94>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_init+0x90>
 284:	82 2b       	or	r24, r18
 286:	84 bb       	out	0x14, r24	; 20
 288:	08 95       	ret
		}
		else if(direction == IN)
 28a:	41 11       	cpse	r20, r1
 28c:	26 c0       	rjmp	.+76     	; 0x2da <DIO_init+0xee>
		{
			//DDRC &= ~(1<<pin_number);
			ClEAR_BIT(DDRC, pin_number);
 28e:	24 b3       	in	r18, 0x14	; 20
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_init+0xae>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_init+0xaa>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	84 bb       	out	0x14, r24	; 20
 2a4:	08 95       	ret
			//ERROR handling
		}
		break;
		
		case PORT_D:
		if(direction == OUT)
 2a6:	41 30       	cpi	r20, 0x01	; 1
 2a8:	59 f4       	brne	.+22     	; 0x2c0 <DIO_init+0xd4>
		{
			//DDRD |= (1<<pin_number);
			SET_BIT(DDRD, pin_number);
 2aa:	21 b3       	in	r18, 0x11	; 17
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_init+0xca>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_init+0xc6>
 2ba:	82 2b       	or	r24, r18
 2bc:	81 bb       	out	0x11, r24	; 17
 2be:	08 95       	ret
		}
		else if(direction == IN)
 2c0:	41 11       	cpse	r20, r1
 2c2:	0b c0       	rjmp	.+22     	; 0x2da <DIO_init+0xee>
		{
			//DDRD &= ~(1<<pin_number);
			ClEAR_BIT(DDRD, pin_number);
 2c4:	21 b3       	in	r18, 0x11	; 17
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_init+0xe4>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_init+0xe0>
 2d4:	80 95       	com	r24
 2d6:	82 23       	and	r24, r18
 2d8:	81 bb       	out	0x11, r24	; 17
 2da:	08 95       	ret

000002dc <DIO_write>:
	}
}

void DIO_write(uint8_t port_number, uint8_t pin_number, uint8_t value)
{
		switch(port_number)
 2dc:	82 34       	cpi	r24, 0x42	; 66
 2de:	29 f1       	breq	.+74     	; 0x32a <DIO_write+0x4e>
 2e0:	18 f4       	brcc	.+6      	; 0x2e8 <DIO_write+0xc>
 2e2:	81 34       	cpi	r24, 0x41	; 65
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <DIO_write+0x18>
 2e6:	08 95       	ret
 2e8:	83 34       	cpi	r24, 0x43	; 67
 2ea:	d1 f1       	breq	.+116    	; 0x360 <DIO_write+0x84>
 2ec:	84 34       	cpi	r24, 0x44	; 68
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <DIO_write+0x16>
 2f0:	52 c0       	rjmp	.+164    	; 0x396 <DIO_write+0xba>
 2f2:	08 95       	ret
		{
			case PORT_A:
			if(value == HIGH)
 2f4:	41 30       	cpi	r20, 0x01	; 1
 2f6:	59 f4       	brne	.+22     	; 0x30e <DIO_write+0x32>
			{
				//PORTA |= (1<<pin_number); //write 1
				SET_BIT(PORTA, pin_number);
 2f8:	2b b3       	in	r18, 0x1b	; 27
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_write+0x28>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_write+0x24>
 308:	82 2b       	or	r24, r18
 30a:	8b bb       	out	0x1b, r24	; 27
 30c:	08 95       	ret
			}
			else if(value == LOW)
 30e:	41 11       	cpse	r20, r1
 310:	5c c0       	rjmp	.+184    	; 0x3ca <DIO_write+0xee>
			{
				//PORTA &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTA, pin_number);
 312:	2b b3       	in	r18, 0x1b	; 27
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_write+0x42>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_write+0x3e>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	8b bb       	out	0x1b, r24	; 27
 328:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_B:
			if(value == HIGH)
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	59 f4       	brne	.+22     	; 0x344 <DIO_write+0x68>
			{
				//PORTB |= (1<<pin_number); //write 1
				SET_BIT(PORTB, pin_number);
 32e:	28 b3       	in	r18, 0x18	; 24
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_write+0x5e>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_write+0x5a>
 33e:	82 2b       	or	r24, r18
 340:	88 bb       	out	0x18, r24	; 24
 342:	08 95       	ret
			}
			else if(value == LOW)
 344:	41 11       	cpse	r20, r1
 346:	41 c0       	rjmp	.+130    	; 0x3ca <DIO_write+0xee>
			{
				//PORTB &= ~(1<<pin_number); // write 0
				ClEAR_BIT(PORTB, pin_number);
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_write+0x78>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_write+0x74>
 358:	80 95       	com	r24
 35a:	82 23       	and	r24, r18
 35c:	88 bb       	out	0x18, r24	; 24
 35e:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_C:
			if(value == HIGH)
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	59 f4       	brne	.+22     	; 0x37a <DIO_write+0x9e>
			{
				//PORTC |= (1<<pin_number); //write 1
				SET_BIT(PORTC, pin_number);
 364:	25 b3       	in	r18, 0x15	; 21
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_write+0x94>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_write+0x90>
 374:	82 2b       	or	r24, r18
 376:	85 bb       	out	0x15, r24	; 21
 378:	08 95       	ret
			}
			else if(value == LOW)
 37a:	41 11       	cpse	r20, r1
 37c:	26 c0       	rjmp	.+76     	; 0x3ca <DIO_write+0xee>
			{
				//PORTC &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTC, pin_number);
 37e:	25 b3       	in	r18, 0x15	; 21
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_write+0xae>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_write+0xaa>
 38e:	80 95       	com	r24
 390:	82 23       	and	r24, r18
 392:	85 bb       	out	0x15, r24	; 21
 394:	08 95       	ret
				//ERROR handling
			}
			break;
			
			case PORT_D:
			if(value == HIGH)
 396:	41 30       	cpi	r20, 0x01	; 1
 398:	59 f4       	brne	.+22     	; 0x3b0 <DIO_write+0xd4>
			{
				//PORTD |= (1<<pin_number); //write 1
				SET_BIT(PORTD, pin_number);
 39a:	22 b3       	in	r18, 0x12	; 18
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_write+0xca>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_write+0xc6>
 3aa:	82 2b       	or	r24, r18
 3ac:	82 bb       	out	0x12, r24	; 18
 3ae:	08 95       	ret
			}
			else if(value == LOW)
 3b0:	41 11       	cpse	r20, r1
 3b2:	0b c0       	rjmp	.+22     	; 0x3ca <DIO_write+0xee>
			{
				//PORTD &= ~(1<<pin_number); //write 0
				ClEAR_BIT(PORTD, pin_number);
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_write+0xe4>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_write+0xe0>
 3c4:	80 95       	com	r24
 3c6:	82 23       	and	r24, r18
 3c8:	82 bb       	out	0x12, r24	; 18
 3ca:	08 95       	ret

000003cc <Spi_Slave_init>:

}

void Spi_Slave_init(void)
{
	DDRA = 0xFF;
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	8a bb       	out	0x1a, r24	; 26
	//initialize the IN and OUT PINS
	DIO_init(PORT_B,SS,IN);
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	82 e4       	ldi	r24, 0x42	; 66
 3d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_init>
	DIO_init(PORT_B,SCK,IN);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	67 e0       	ldi	r22, 0x07	; 7
 3de:	82 e4       	ldi	r24, 0x42	; 66
 3e0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_init>
	DIO_init(PORT_B,MOSI,IN);
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	65 e0       	ldi	r22, 0x05	; 5
 3e8:	82 e4       	ldi	r24, 0x42	; 66
 3ea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_init>
	DIO_init(PORT_B,MISO,OUT);
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	66 e0       	ldi	r22, 0x06	; 6
 3f2:	82 e4       	ldi	r24, 0x42	; 66
 3f4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_init>
	//Select Master mode, prescale of /16, enable the SPI
	SPCR |= (1<<SPE) | (1<<SPR1);
 3f8:	8d b1       	in	r24, 0x0d	; 13
 3fa:	82 64       	ori	r24, 0x42	; 66
 3fc:	8d b9       	out	0x0d, r24	; 13
	//disable the double SPI speed bit
	SPSR &= ~ (1<<SPI2X);	
 3fe:	8e b1       	in	r24, 0x0e	; 14
 400:	8e 7f       	andi	r24, 0xFE	; 254
 402:	8e b9       	out	0x0e, r24	; 14
 404:	08 95       	ret

00000406 <Spi_Slave_receive>:
}
uint8_t Spi_Slave_receive(void)
{
	SPDR = 0xFF;
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	8f b9       	out	0x0f, r24	; 15
	
	while(READ_BIT(SPSR,SPIF) == 0);
 40a:	77 9b       	sbis	0x0e, 7	; 14
 40c:	fe cf       	rjmp	.-4      	; 0x40a <Spi_Slave_receive+0x4>
	
	return SPDR;	
 40e:	8f b1       	in	r24, 0x0f	; 15
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
